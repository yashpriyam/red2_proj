{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(TextArea) {\n  var DocumentedTextArea = describe(TextArea).availableAt(getAvailableAtBadge('TextArea')).description('A control to input multiple lines of text.').usage(\"import { TextArea } from 'grommet';\\n<TextArea id='item' name='item' />\").intrinsicElement('textarea');\n  DocumentedTextArea.propTypes = {\n    id: PropTypes.string.description('The id attribute of the textarea.'),\n    fill: PropTypes.bool.description('Whether the width and height should fill the container.').defaultValue(false),\n    focusIndicator: PropTypes.bool.description('Whether the plain textarea should receive a focus outline.'),\n    name: PropTypes.string.description('The name attribute of the textarea.'),\n    onChange: PropTypes.func.description('Function that will be called when the user types in the textarea.'),\n    placeholder: PropTypes.string.description('Placeholder text to use when no value is provided.'),\n    plain: PropTypes.bool.description(\"Whether this is a plain textarea with no border or padding.\\nOnly use this when the containing context provides sufficient affordance.\"),\n    value: PropTypes.string.description('What text to put in the textarea.'),\n    resize: PropTypes.oneOfType([PropTypes.oneOf(['vertical', 'horizontal']), PropTypes.bool]).description('Whether user is allowed to resize the textarea.').defaultValue(true),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the TextArea.')\n  };\n  return DocumentedTextArea;\n};\nexport var themeDoc = _extends({\n  'global.colors.border': {\n    description: 'The color of the border.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)'\n    }\n  },\n  'global.control.border.color': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: 'border'\n  },\n  'global.control.border.radius': {\n    description: 'The border radius.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'global.control.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '1px'\n  },\n  'textArea.extend': {\n    description: 'Any additional style for Text.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textArea.disabled.opacity': {\n    description: 'The opacity when the textArea is disabled.',\n    type: 'number',\n    defaultValue: 0.3\n  }\n}, themeDocUtils.focusStyle, {}, themeDocUtils.placeholderStyle, {}, themeDocUtils.inputStyle, {}, themeDocUtils.disabledStyle);","map":null,"metadata":{},"sourceType":"module"}