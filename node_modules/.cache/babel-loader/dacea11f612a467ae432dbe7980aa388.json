{"ast":null,"code":"import { normalizeValues } from './utils';\nexport var calcs = function calcs(values, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var coarseness = options.coarseness || 5;\n  var steps = options.steps || [1, 1];\n  var calcValues = normalizeValues(values || []);\n  var min;\n  var max;\n\n  if (options.min !== undefined && options.max !== undefined) {\n    var _options = options;\n    min = _options.min;\n    max = _options.max;\n  } else if (calcValues.length) {\n    // Calculate the max and min y values.\n    min = calcValues[0].value[1] || 0;\n    max = min;\n    calcValues.forEach(function (value) {\n      var y = value.value[1];\n      min = Math.min(min, y);\n      max = Math.max(max, y); // handle ranges of values\n\n      if (value.value[2] !== undefined) {\n        var y2 = value.value[2];\n        min = Math.min(min, y2);\n        max = Math.max(max, y2);\n      }\n    });\n    min = options.min !== undefined ? options.min : min;\n    max = options.max !== undefined ? options.max : max; // Calculate some reasonable y bounds based on the max and min y values.\n    // This is so values like 87342.12 don't end up being displayed as the\n    // graph axis edge label.\n\n    var delta = max - min;\n    var interval = Number.parseFloat((delta / coarseness).toPrecision(1));\n    max = max - max % interval + interval;\n    min -= min % interval;\n  }\n\n  var bounds = calcValues.length ? [[calcValues[0].value[0], calcValues[calcValues.length - 1].value[0]], [min, max]] : [[], []];\n  var dimensions = [bounds[0][1] - bounds[0][0], bounds[1][1] - bounds[1][0]]; // Calculate x and y axis values across the specfied number of steps.\n\n  var yAxis = [];\n  var y = bounds[1][1];\n  var yStepInterval = dimensions[1] / steps[1];\n\n  while (y >= bounds[1][0]) {\n    yAxis.push(y);\n    y -= yStepInterval;\n  }\n\n  var xAxis = [];\n  var x = bounds[0][0];\n  var xStepInterval = dimensions[0] / steps[0];\n\n  while (xStepInterval > 0 && x <= bounds[0][1] || xStepInterval < 0 && x >= bounds[0][1]) {\n    xAxis.push(x);\n    x += xStepInterval;\n  } // Set bar thickness based on number of values being rendered.\n  // Someday, it would be better to include the actual rendered size.\n  // These values were emirically determined, trying to balance visibility\n  // and overlap across resolutions.\n\n\n  var thickness;\n  var pad;\n\n  if (calcValues.length < 5) {\n    thickness = 'xlarge';\n    pad = 'large';\n  } else if (calcValues.length < 11) {\n    thickness = 'large';\n    pad = 'medium';\n  } else if (calcValues.length < 21) {\n    thickness = 'medium';\n    pad = 'small';\n  } else if (calcValues.length < 61) {\n    thickness = 'small';\n    pad = 'xsmall';\n  } else if (calcValues.length < 121) {\n    thickness = 'xsmall';\n    pad = 'xxsmall';\n  } else {\n    thickness = 'hair';\n  }\n\n  return {\n    axis: [xAxis, yAxis],\n    bounds: bounds,\n    dimensions: dimensions,\n    pad: pad,\n    thickness: thickness\n  };\n};","map":null,"metadata":{},"sourceType":"module"}