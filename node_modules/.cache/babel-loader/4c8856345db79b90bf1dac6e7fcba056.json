{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { FormSearch } from 'grommet-icons/icons/FormSearch';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\nimport { normalizeColor } from '../../utils';\n\nvar Searcher = function Searcher(_ref) {\n  var filtering = _ref.filtering,\n      filters = _ref.filters,\n      onFilter = _ref.onFilter,\n      onFiltering = _ref.onFiltering,\n      property = _ref.property,\n      theme = _ref.theme;\n  var inputRef = useRef();\n  var needsFocus = filtering === property;\n  useEffect(function () {\n    if (inputRef && needsFocus) {\n      inputRef.current.focus();\n    }\n  }, [needsFocus, inputRef]);\n  return filtering === property ? React.createElement(Keyboard, {\n    onEsc: function onEsc() {\n      return onFiltering(undefined);\n    }\n  }, React.createElement(Box, {\n    flex: true,\n    pad: {\n      horizontal: 'small'\n    }\n  }, React.createElement(TextInput, {\n    name: \"search-\" + property,\n    ref: inputRef,\n    value: filters[property],\n    onChange: function onChange(event) {\n      return onFilter(property, event.target.value);\n    },\n    onBlur: function onBlur() {\n      return onFiltering(undefined);\n    }\n  }))) : React.createElement(React.Fragment, null, filters[property] ? React.createElement(Box, {\n    flex: false,\n    pad: {\n      horizontal: 'small'\n    },\n    direction: \"row\",\n    align: \"center\"\n  }, React.createElement(Text, null, filters[property])) : null, React.createElement(Button, {\n    a11yTitle: \"focus-search-\" + property,\n    icon: React.createElement(FormSearch, {\n      color: normalizeColor(filtering === property ? 'brand' : 'border', theme)\n    }),\n    hoverIndicator: true,\n    onClick: function onClick() {\n      return onFiltering(filtering === property ? undefined : property);\n    }\n  }));\n};\n\nSearcher.defaultProps = {};\nObject.setPrototypeOf(Searcher.defaultProps, defaultProps);\nvar SearcherWrapper = compose(withTheme)(Searcher);\nexport { SearcherWrapper as Searcher };","map":null,"metadata":{},"sourceType":"module"}