{"ast":null,"code":"import styled, { css } from 'styled-components';\nimport { breakpointStyle, genericStyles, normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\n\nvar sizeStyle = function sizeStyle(props) {\n  // size is a combination of the level and size properties\n  var size = props.size || 'medium';\n  var headingTheme = props.theme.heading;\n  var levelStyle = headingTheme.level[props.level];\n\n  if (levelStyle) {\n    var data = levelStyle[size];\n    var styles = [css([\"font-size:\", \";line-height:\", \";max-width:\", \";font-weight:\", \";\"], data ? data.size : size, data ? data.height : 'normal', data ? data.maxWidth : levelStyle.medium.maxWidth, levelStyle.font.weight || headingTheme.weight)];\n\n    if (props.responsive && headingTheme.responsiveBreakpoint) {\n      var breakpoint = props.theme.global.breakpoints[headingTheme.responsiveBreakpoint];\n\n      if (breakpoint) {\n        var responsiveData = headingTheme.level[Math.min(props.level + 1, 4)][size];\n\n        if (responsiveData) {\n          styles.push(breakpointStyle(breakpoint, \"\\n            font-size: \" + responsiveData.size + \";\\n            line-height: \" + responsiveData.height + \";\\n            max-width: \" + responsiveData.maxWidth + \";\\n          \"));\n        }\n      }\n    }\n\n    return styles;\n  }\n\n  console.warn(\"Heading level \" + props.level + \" is not defined in your theme.\");\n  return '';\n};\n\nvar fontFamily = function fontFamily(props) {\n  var font = props.theme.heading.level[props.level].font;\n\n  if (font && font.family) {\n    return css([\"font-family:\", \";\"], font.family);\n  }\n\n  return props.theme.heading.font ? css([\"font-family:\", \";\"], props.theme.heading.font.family) : '';\n};\n\nvar TEXT_ALIGN_MAP = {\n  center: 'center',\n  end: 'right',\n  start: 'left'\n};\nvar textAlignStyle = css([\"text-align:\", \";\"], function (props) {\n  return TEXT_ALIGN_MAP[props.textAlign];\n});\nvar truncateStyle = \"\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n\";\nvar colorStyle = css([\"color:\", \";\"], function (props) {\n  return normalizeColor(props.colorProp, props.theme);\n});\nvar StyledHeading = styled.h1.withConfig({\n  displayName: \"StyledHeading\",\n  componentId: \"sc-1rdh4aw-0\"\n})([\"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\"], genericStyles, function (props) {\n  return fontFamily(props);\n}, function (props) {\n  return sizeStyle(props);\n}, function (props) {\n  return props.textAlign && textAlignStyle;\n}, function (props) {\n  return props.truncate && truncateStyle;\n}, function (props) {\n  return props.colorProp && colorStyle;\n}, function (props) {\n  return props.theme.heading && props.theme.heading.extend;\n});\nStyledHeading.defaultProps = {};\nObject.setPrototypeOf(StyledHeading.defaultProps, defaultProps);\nexport { StyledHeading };","map":null,"metadata":{},"sourceType":"module"}