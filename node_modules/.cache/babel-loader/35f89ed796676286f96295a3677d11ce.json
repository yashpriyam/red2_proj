{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '../Box';\nimport { Text } from '../Text';\n\nvar Value = function Value(_ref) {\n  var basis = _ref.basis,\n      children = _ref.children;\n  return React.createElement(Box, {\n    basis: basis,\n    flex: \"shrink\",\n    overflow: \"hidden\"\n  }, children);\n};\n\nValue.propTypes = {\n  basis: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired\n};\n\nvar Distribution = function Distribution(_ref2) {\n  var basis = _ref2.basis,\n      children = _ref2.children,\n      direction = _ref2.direction,\n      fill = _ref2.fill,\n      gap = _ref2.gap,\n      values = _ref2.values,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"basis\", \"children\", \"direction\", \"fill\", \"gap\", \"values\"]);\n\n  if (values.length === 1) {\n    var value = values[0];\n    return React.createElement(Value, {\n      value: value,\n      basis: basis\n    }, children(value));\n  }\n\n  if (values.length > 1) {\n    var reducer = function reducer(accumulator, _ref3) {\n      var value = _ref3.value;\n      return accumulator + value;\n    };\n\n    var total = values.reduce(reducer, 0); // figure out how many of the values area needed to represent half of the\n    // total\n\n    var subTotal = 0;\n    var subIndex;\n    values.some(function (v, index) {\n      subTotal += v.value;\n\n      if (subTotal >= total * 0.4) {\n        subIndex = index + 1;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (subIndex === values.length) {\n      var _value = values[0];\n      return React.createElement(Value, {\n        value: _value,\n        basis: basis\n      }, children(_value));\n    }\n\n    var childBasis;\n\n    if (subTotal > total * 0.7) {\n      childBasis = ['3/4', '1/4'];\n    } else if (subTotal > total * 0.6) {\n      childBasis = ['2/3', '1/3'];\n    } else {\n      childBasis = ['1/2', '1/2'];\n    }\n\n    return React.createElement(Box, _extends({\n      direction: direction,\n      basis: basis,\n      flex: basis ? 'shrink' : true,\n      overflow: \"hidden\",\n      gap: gap,\n      fill: fill\n    }, rest), React.createElement(Distribution, {\n      values: values.slice(0, subIndex),\n      basis: childBasis[0],\n      direction: direction === 'row' ? 'column' : 'row',\n      gap: gap\n    }, children), React.createElement(Distribution, {\n      values: values.slice(subIndex),\n      basis: childBasis[1],\n      direction: direction === 'row' ? 'column' : 'row',\n      gap: gap\n    }, children));\n  }\n\n  return null;\n};\n\nDistribution.defaultProps = {\n  basis: undefined,\n  children: function children(value) {\n    return React.createElement(Box, {\n      fill: true,\n      border: true\n    }, React.createElement(Text, null, value.value));\n  },\n  direction: 'row',\n  gap: 'xsmall',\n  values: []\n};\nvar DistributionDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  DistributionDoc = require('./doc').doc(Distribution);\n}\n\nvar DistributionWrapper = DistributionDoc || Distribution;\nexport { DistributionWrapper as Distribution };","map":null,"metadata":{},"sourceType":"module"}