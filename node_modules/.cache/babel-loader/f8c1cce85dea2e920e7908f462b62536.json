{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Accordion) {\n  var DocumentedAccordion = describe(Accordion).availableAt(getAvailableAtBadge('Accordion')).description('An accordion containing collapsible panels.').usage(\"import { Accordion, AccordionPanel } from 'grommet';\\n<Accordion>\\n  <AccordionPanel label='Panel 1'>...</AccordionPanel>\\n  <AccordionPanel label='Panel 2'>...</AccordionPanel>\\n</Accordion>\").intrinsicElement('div');\n  DocumentedAccordion.propTypes = _extends({}, genericProps, {\n    activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).description(\"Active panel index. If specified, Accordion will be a controlled \\ncomponent. This means that future panel changes will not work unless you\\nsubscribe to onActive function and update activeIndex accordingly.\").defaultValue(0),\n    animate: PropTypes.bool.description('Transition content in & out with a slide down animation.').defaultValue(true),\n    children: PropTypes.node.description('Array of AccordionPanels.'),\n    onActive: PropTypes.func.description(\"Function that will be called when the active index changes.\\nIt will always send an array with currently active panel indexes.\"),\n    multiple: PropTypes.bool.description('Allow multiple panels to be opened at once.').defaultValue(false),\n    messages: PropTypes.shape({\n      tabContents: PropTypes.string\n    }).description('Custom messages for Tabs. Used for accessibility by screen readers.').defaultValue({\n      tabContents: 'Tab Contents'\n    })\n  });\n  return DocumentedAccordion;\n};","map":null,"metadata":{},"sourceType":"module"}