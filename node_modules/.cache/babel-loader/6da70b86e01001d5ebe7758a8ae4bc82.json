{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useMemo } from 'react';\nimport { Bar } from './Bar';\nimport { Circle } from './Circle';\n\nvar deriveMax = function deriveMax(values) {\n  var max = 100;\n\n  if (values && values.length > 1) {\n    max = 0;\n    values.forEach(function (v) {\n      max += v.value;\n    });\n  }\n\n  return max;\n};\n\nvar Meter = function Meter(_ref) {\n  var _ref$background = _ref.background,\n      background = _ref$background === void 0 ? {\n    color: 'light-2',\n    opacity: 'medium'\n  } : _ref$background,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      _ref$thickness = _ref.thickness,\n      thickness = _ref$thickness === void 0 ? 'medium' : _ref$thickness,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'bar' : _ref$type,\n      values = _ref.values,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"background\", \"size\", \"thickness\", \"type\", \"values\"]);\n\n  var memoizedMax = useMemo(function () {\n    return deriveMax(values);\n  }, [values]);\n  var content;\n\n  if (type === 'bar') {\n    content = React.createElement(Bar, _extends({\n      max: memoizedMax,\n      values: values,\n      size: size,\n      thickness: thickness,\n      background: background\n    }, rest));\n  } else if (type === 'circle') {\n    content = React.createElement(Circle, _extends({\n      max: memoizedMax,\n      values: values,\n      size: size,\n      thickness: thickness,\n      background: background\n    }, rest));\n  }\n\n  return content;\n};\n\nvar MeterDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  MeterDoc = require('./doc').doc(Meter); // eslint-disable-line global-require\n}\n\nvar MeterWrapper = MeterDoc || Meter;\nexport { MeterWrapper as Meter };","map":null,"metadata":{},"sourceType":"module"}