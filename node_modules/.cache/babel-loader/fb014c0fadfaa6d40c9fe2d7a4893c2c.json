{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, isValidElement, useContext, useEffect, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Drop } from '../Drop';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { FormContext } from '../Form/FormContext';\nimport { AnnounceContext } from '../../contexts';\nimport { isNodeAfterScroll, isNodeBeforeScroll, sizeStyle } from '../../utils';\nimport { StyledTextInput, StyledTextInputContainer, StyledPlaceholder, StyledIcon, StyledSuggestions } from './StyledTextInput';\n\nvar renderLabel = function renderLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    return suggestion.label || suggestion.value;\n  }\n\n  return suggestion;\n};\n\nvar stringLabel = function stringLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    if (suggestion.label && typeof suggestion.label === 'string') {\n      return suggestion.label;\n    }\n\n    return suggestion.value;\n  }\n\n  return suggestion;\n};\n\nvar ContainerBox = styled(Box).withConfig({\n  displayName: \"TextInput__ContainerBox\",\n  componentId: \"sc-1ai0c08-0\"\n})([\"\", \";@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none){width:100%;}\"], function (props) {\n  return props.dropHeight ? sizeStyle('max-height', props.dropHeight, props.theme) : 'max-height: inherit;';\n});\nvar TextInput = forwardRef(function (_ref, ref) {\n  var defaultValue = _ref.defaultValue,\n      _ref$dropAlign = _ref.dropAlign,\n      dropAlign = _ref$dropAlign === void 0 ? {\n    top: 'bottom',\n    left: 'left'\n  } : _ref$dropAlign,\n      dropHeight = _ref.dropHeight,\n      dropTarget = _ref.dropTarget,\n      dropProps = _ref.dropProps,\n      icon = _ref.icon,\n      id = _ref.id,\n      _ref$messages = _ref.messages,\n      messages = _ref$messages === void 0 ? {\n    enterSelect: '(Press Enter to Select)',\n    suggestionsCount: 'suggestions available',\n    suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n    suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n  } : _ref$messages,\n      name = _ref.name,\n      _onBlur = _ref.onBlur,\n      onChange = _ref.onChange,\n      _onFocus = _ref.onFocus,\n      onKeyDown = _ref.onKeyDown,\n      onSelect = _ref.onSelect,\n      onSuggestionsClose = _ref.onSuggestionsClose,\n      onSuggestionsOpen = _ref.onSuggestionsOpen,\n      placeholder = _ref.placeholder,\n      plain = _ref.plain,\n      readOnly = _ref.readOnly,\n      reverse = _ref.reverse,\n      suggestions = _ref.suggestions,\n      valueProp = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"defaultValue\", \"dropAlign\", \"dropHeight\", \"dropTarget\", \"dropProps\", \"icon\", \"id\", \"messages\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onSelect\", \"onSuggestionsClose\", \"onSuggestionsOpen\", \"placeholder\", \"plain\", \"readOnly\", \"reverse\", \"suggestions\", \"value\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var announce = useContext(AnnounceContext);\n  var formContext = useContext(FormContext);\n  var inputRef = useRef();\n  var dropRef = useRef();\n  var suggestionsRef = useRef();\n  var suggestionRefs = {}; // if this is a readOnly property, don't set a name with the form context\n  // this allows Select to control the form context for the name.\n\n  var _formContext$useFormC = formContext.useFormContext(readOnly ? undefined : name, valueProp, ''),\n      value = _formContext$useFormC[0],\n      setValue = _formContext$useFormC[1];\n\n  var _useState = useState(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var _useState2 = useState(),\n      showDrop = _useState2[0],\n      setShowDrop = _useState2[1]; // if we have no suggestions, close drop if it's open\n\n\n  useEffect(function () {\n    if (showDrop && (!suggestions || !suggestions.length)) {\n      setShowDrop(false);\n      if (onSuggestionsClose) onSuggestionsClose();\n    }\n  }, [onSuggestionsClose, showDrop, suggestions]); // If we have suggestions and focus, open drop if it's closed.\n  // This can occur when suggestions are tied to the value.\n  // We don't want focus or showDrop in the dependencies because we\n  // don't want to open the drop just because Esc close it.\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  useEffect(function () {\n    if (focus && !showDrop && suggestions && suggestions.length) {\n      setShowDrop(true);\n      if (onSuggestionsOpen) onSuggestionsOpen();\n    }\n  }, [onSuggestionsOpen, suggestions]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  var _useState3 = useState(-1),\n      activeSuggestionIndex = _useState3[0],\n      setActiveSuggestionIndex = _useState3[1]; // reset activeSuggestionIndex when the drop is closed\n\n\n  useEffect(function () {\n    if (activeSuggestionIndex !== -1 && !showDrop) {\n      setActiveSuggestionIndex(-1);\n    }\n  }, [activeSuggestionIndex, showDrop]); // announce active suggestion\n\n  useEffect(function () {\n    if (activeSuggestionIndex >= 0) {\n      var label = stringLabel(suggestions[activeSuggestionIndex]);\n      announce(label + \" \" + messages.enterSelect);\n    }\n  }, [activeSuggestionIndex, announce, messages, suggestions]);\n\n  var _useState4 = useState(-1),\n      selectedSuggestionIndex = _useState4[0],\n      setSelectedSuggestionIndex = _useState4[1]; // set selectedSuggestionIndex based on value and current suggestions\n\n\n  useEffect(function () {\n    if (suggestions) {\n      var suggestionValues = suggestions.map(function (suggestion) {\n        return typeof suggestion === 'object' ? suggestion.value : suggestion;\n      });\n      setSelectedSuggestionIndex(suggestionValues.indexOf(value));\n    } else setSelectedSuggestionIndex(-1);\n  }, [suggestions, value]); // make sure activeSuggestion remains visible in scroll\n\n  useEffect(function () {\n    var buttonNode = suggestionRefs[activeSuggestionIndex];\n    var optionsNode = suggestionsRef.current;\n\n    if (buttonNode && isNodeAfterScroll(buttonNode, optionsNode) && optionsNode.scrollTo) {\n      optionsNode.scrollTo(0, buttonNode.offsetTop - (optionsNode.getBoundingClientRect().height - buttonNode.getBoundingClientRect().height));\n    }\n\n    if (buttonNode && isNodeBeforeScroll(buttonNode, optionsNode) && optionsNode.scrollTo) {\n      optionsNode.scrollTo(0, buttonNode.offsetTop);\n    }\n  }, [activeSuggestionIndex, suggestionRefs]);\n\n  var openDrop = function openDrop() {\n    setShowDrop(true);\n    announce(messages.suggestionIsOpen);\n    announce(suggestions.length + \" \" + messages.suggestionsCount);\n    if (onSuggestionsOpen) onSuggestionsOpen();\n  };\n\n  var closeDrop = function closeDrop() {\n    setShowDrop(false);\n    if (messages.onSuggestionsClose) onSuggestionsClose();\n    if (onSuggestionsClose) onSuggestionsClose();\n  };\n\n  var onNextSuggestion = function onNextSuggestion(event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.min(activeSuggestionIndex + 1, suggestions.length - 1);\n    setActiveSuggestionIndex(nextActiveIndex);\n  };\n\n  var onPreviousSuggestion = function onPreviousSuggestion(event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.max(activeSuggestionIndex - 1, 0);\n    setActiveSuggestionIndex(nextActiveIndex);\n  };\n\n  var showStyledPlaceholder = placeholder && typeof placeholder !== 'string' && !value;\n  var drop;\n\n  if (showDrop) {\n    drop = // keyboard access needed here in case user clicks\n    // and drags on scroll bar and focus shifts to drop\n    React.createElement(Keyboard, {\n      onDown: function onDown(event) {\n        return onNextSuggestion(event);\n      },\n      onUp: function onUp(event) {\n        return onPreviousSuggestion(event);\n      },\n      onEnter: function onEnter(event) {\n        // we stole the focus, give it back\n        (ref || inputRef).current.focus();\n        closeDrop();\n\n        if (onSelect) {\n          var adjustedEvent = event;\n          adjustedEvent.suggestion = suggestions[activeSuggestionIndex];\n          onSelect(adjustedEvent);\n        }\n\n        setValue(suggestions[activeSuggestionIndex]);\n      }\n    }, React.createElement(Drop, _extends({\n      ref: dropRef,\n      id: id ? \"text-input-drop__\" + id : undefined,\n      align: dropAlign,\n      responsive: false,\n      target: dropTarget || (ref || inputRef).current,\n      onClickOutside: closeDrop,\n      onEsc: closeDrop\n    }, dropProps), React.createElement(ContainerBox, {\n      ref: suggestionsRef,\n      overflow: \"auto\",\n      dropHeight: dropHeight\n    }, React.createElement(StyledSuggestions, null, React.createElement(InfiniteScroll, {\n      items: suggestions,\n      step: theme.select.step\n    }, function (suggestion, index) {\n      var plainLabel = typeof suggestion === 'object' && typeof isValidElement(suggestion.label);\n      return React.createElement(\"li\", {\n        key: stringLabel(suggestion) + \"-\" + index\n      }, React.createElement(Button, {\n        active: activeSuggestionIndex === index || selectedSuggestionIndex === index,\n        ref: function ref(r) {\n          suggestionRefs[index] = r;\n        },\n        fill: true,\n        hoverIndicator: \"background\",\n        onClick: function onClick(event) {\n          // we stole the focus, give it back\n          (ref || inputRef).current.focus();\n          closeDrop();\n\n          if (onSelect) {\n            event.persist();\n            var adjustedEvent = event;\n            adjustedEvent.suggestion = suggestion;\n            adjustedEvent.target = (ref || inputRef).current;\n            onSelect(adjustedEvent);\n          }\n\n          setValue(suggestion);\n        },\n        onMouseOver: function onMouseOver() {\n          return setActiveSuggestionIndex(index);\n        },\n        onFocus: function onFocus() {\n          return setActiveSuggestionIndex(index);\n        }\n      }, plainLabel ? renderLabel(suggestion) : React.createElement(Box, {\n        align: \"start\",\n        pad: \"small\"\n      }, renderLabel(suggestion))));\n    })))));\n  }\n\n  return React.createElement(StyledTextInputContainer, {\n    plain: plain\n  }, showStyledPlaceholder && React.createElement(StyledPlaceholder, null, placeholder), icon && React.createElement(StyledIcon, {\n    reverse: reverse,\n    theme: theme\n  }, icon), React.createElement(Keyboard, {\n    onEnter: function onEnter(event) {\n      closeDrop();\n\n      if (activeSuggestionIndex >= 0 && onSelect) {\n        // prevent submitting forms when choosing a suggestion\n        event.preventDefault();\n        event.persist();\n        var adjustedEvent = event;\n        adjustedEvent.suggestion = suggestions[activeSuggestionIndex];\n        adjustedEvent.target = (ref || inputRef).current;\n        onSelect(adjustedEvent);\n      }\n    },\n    onEsc: showDrop ? function (event) {\n      closeDrop(); // we have to stop both synthetic events and native events\n      // drop and layer should not close by pressing esc on this\n      // input\n\n      event.stopPropagation();\n      event.nativeEvent.stopImmediatePropagation();\n    } : undefined,\n    onTab: showDrop ? closeDrop : undefined,\n    onUp: showDrop && suggestions && suggestions.length > 0 && activeSuggestionIndex ? function (event) {\n      onPreviousSuggestion(event);\n    } : undefined,\n    onDown: suggestions && suggestions.length > 0 ? function (event) {\n      if (!showDrop) {\n        openDrop();\n      } else {\n        onNextSuggestion(event);\n      }\n    } : undefined,\n    onKeyDown: onKeyDown\n  }, React.createElement(StyledTextInput, _extends({\n    ref: ref || inputRef,\n    id: id,\n    name: name,\n    autoComplete: \"off\",\n    plain: plain,\n    placeholder: typeof placeholder === 'string' ? placeholder : undefined,\n    icon: icon,\n    reverse: reverse,\n    focus: focus\n  }, rest, {\n    defaultValue: renderLabel(defaultValue),\n    value: renderLabel(value),\n    readOnly: readOnly,\n    onFocus: function onFocus(event) {\n      setFocus(true);\n\n      if (suggestions && suggestions.length > 0) {\n        announce(messages.suggestionsExist);\n        openDrop();\n      }\n\n      if (_onFocus) _onFocus(event);\n    },\n    onBlur: function onBlur(event) {\n      setFocus(false);\n      if (_onBlur) _onBlur(event);\n    },\n    onChange: readOnly ? undefined : function (event) {\n      setValue(event.target.value);\n      if (onChange) onChange(event);\n    }\n  }))), drop);\n});\nTextInput.displayName = 'TextInput';\nvar TextInputDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  TextInputDoc = require('./doc').doc(TextInput);\n}\n\nvar TextInputWrapper = TextInputDoc || TextInput;\nexport { TextInputWrapper as TextInput };","map":null,"metadata":{},"sourceType":"module"}