{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { createRef, Component } from 'react';\nimport styled, { withTheme } from 'styled-components';\nimport { debounce, debounceDelay, isNodeAfterScroll, isNodeBeforeScroll, selectedStyle, setFocusWithoutScroll } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\nimport { SelectOption } from './SelectOption';\nimport { StyledContainer } from './StyledSelect'; // position relative is so scroll can be managed correctly\n\nvar OptionsBox = styled(Box).withConfig({\n  displayName: \"SelectContainer__OptionsBox\",\n  componentId: \"sc-1wi0ul8-0\"\n})([\"position:relative;scroll-behavior:smooth;\"]);\nvar OptionBox = styled(Box).withConfig({\n  displayName: \"SelectContainer__OptionBox\",\n  componentId: \"sc-1wi0ul8-1\"\n})([\"\", \"\"], function (props) {\n  return props.selected && selectedStyle;\n});\n\nvar SelectContainer = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(SelectContainer, _Component);\n\n  function SelectContainer(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"optionRefs\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"searchRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"optionsRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchChange\", function (event) {\n      _this.setState({\n        search: event.target.value,\n        activeIndex: -1\n      }, function () {\n        var search = _this.state.search;\n\n        _this.onSearch(search);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearch\", debounce(function (search) {\n      var onSearch = _this.props.onSearch;\n      onSearch(search);\n    }, debounceDelay(_this.props)));\n\n    _defineProperty(_assertThisInitialized(_this), \"selectOption\", function (option) {\n      return function (event) {\n        var _this$props = _this.props,\n            multiple = _this$props.multiple,\n            onChange = _this$props.onChange,\n            value = _this$props.value,\n            valueKey = _this$props.valueKey,\n            selected = _this$props.selected;\n        var initialOptions = _this.state.initialOptions;\n\n        if (onChange) {\n          var nextValue = Array.isArray(value) ? value.slice() : []; // preserve compatibility until selected is deprecated\n\n          if (selected) {\n            nextValue = selected.map(function (s) {\n              return initialOptions[s];\n            });\n          }\n\n          var optionValue = valueKey ? option[valueKey] : option;\n\n          if (multiple) {\n            if (nextValue.indexOf(optionValue) !== -1) {\n              nextValue = nextValue.filter(function (v) {\n                return v !== optionValue;\n              });\n            } else {\n              nextValue.push(optionValue);\n            }\n          } else {\n            nextValue = optionValue;\n          }\n\n          var nextSelected = Array.isArray(nextValue) ? nextValue.map(function (v) {\n            return initialOptions.indexOf(v);\n          }) : initialOptions.indexOf(nextValue);\n          onChange(event, {\n            option: option,\n            value: nextValue,\n            selected: nextSelected\n          });\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearKeyboardNavigation\", function () {\n      clearTimeout(_this.keyboardNavTimer);\n      _this.keyboardNavTimer = setTimeout(function () {\n        _this.setState({\n          keyboardNavigating: false\n        });\n      }, 100); // 100ms was empirically determined\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNextOption\", function (event) {\n      var options = _this.props.options;\n      var activeIndex = _this.state.activeIndex;\n      event.preventDefault();\n      var nextActiveIndex = activeIndex + 1;\n\n      while (nextActiveIndex < options.length && _this.isDisabled(nextActiveIndex)) {\n        nextActiveIndex += 1;\n      }\n\n      if (nextActiveIndex !== options.length) {\n        _this.setState({\n          activeIndex: nextActiveIndex,\n          keyboardNavigating: true\n        }, function () {\n          var buttonNode = _this.optionRefs[nextActiveIndex];\n          var optionsNode = _this.optionsRef.current;\n\n          if (buttonNode && isNodeAfterScroll(buttonNode, optionsNode) && optionsNode.scrollTo) {\n            optionsNode.scrollTo(0, buttonNode.offsetTop - (optionsNode.getBoundingClientRect().height - buttonNode.getBoundingClientRect().height));\n          }\n\n          _this.clearKeyboardNavigation();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPreviousOption\", function (event) {\n      var activeIndex = _this.state.activeIndex;\n      event.preventDefault();\n      var nextActiveIndex = activeIndex - 1;\n\n      while (nextActiveIndex >= 0 && _this.isDisabled(nextActiveIndex)) {\n        nextActiveIndex -= 1;\n      }\n\n      if (nextActiveIndex >= 0) {\n        _this.setState({\n          activeIndex: nextActiveIndex,\n          keyboardNavigating: true\n        }, function () {\n          var buttonNode = _this.optionRefs[nextActiveIndex];\n          var optionsNode = _this.optionsRef.current;\n\n          if (buttonNode && isNodeBeforeScroll(buttonNode, optionsNode) && optionsNode.scrollTo) {\n            optionsNode.scrollTo(0, buttonNode.offsetTop);\n          }\n\n          _this.clearKeyboardNavigation();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onActiveOption\", function (index) {\n      return function () {\n        var keyboardNavigating = _this.state.keyboardNavigating;\n\n        if (!keyboardNavigating) {\n          _this.setState({\n            activeIndex: index\n          });\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectOption\", function (event) {\n      var options = _this.props.options;\n      var activeIndex = _this.state.activeIndex;\n\n      if (activeIndex >= 0) {\n        event.preventDefault(); // prevent submitting forms\n\n        _this.selectOption(options[activeIndex])(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"optionLabel\", function (index) {\n      var _this$props2 = _this.props,\n          options = _this$props2.options,\n          labelKey = _this$props2.labelKey;\n      var option = options[index];\n      var optionLabel;\n\n      if (labelKey) {\n        if (typeof labelKey === 'function') {\n          optionLabel = labelKey(option);\n        } else {\n          optionLabel = option[labelKey];\n        }\n      } else {\n        optionLabel = option;\n      }\n\n      return optionLabel;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"optionValue\", function (index) {\n      var _this$props3 = _this.props,\n          options = _this$props3.options,\n          valueKey = _this$props3.valueKey;\n      var option = options[index];\n      var optionValue;\n\n      if (valueKey) {\n        if (typeof valueKey === 'function') {\n          optionValue = valueKey(option);\n        } else {\n          optionValue = option[valueKey];\n        }\n      } else {\n        optionValue = option;\n      }\n\n      return optionValue;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isDisabled\", function (index) {\n      var _this$props4 = _this.props,\n          disabled = _this$props4.disabled,\n          disabledKey = _this$props4.disabledKey,\n          options = _this$props4.options;\n      var option = options[index];\n      var result;\n\n      if (disabledKey) {\n        if (typeof disabledKey === 'function') {\n          result = disabledKey(option, index);\n        } else {\n          result = option[disabledKey];\n        }\n      } else if (Array.isArray(disabled)) {\n        if (typeof disabled[0] === 'number') {\n          result = disabled.indexOf(index) !== -1;\n        } else {\n          var optionValue = _this.optionValue(index);\n\n          result = disabled.indexOf(optionValue) !== -1;\n        }\n      }\n\n      return result;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSelected\", function (index) {\n      var _this$props5 = _this.props,\n          selected = _this$props5.selected,\n          value = _this$props5.value,\n          valueKey = _this$props5.valueKey;\n      var result;\n\n      if (selected) {\n        // deprecated in favor of value\n        result = selected.indexOf(index) !== -1;\n      } else {\n        var optionValue = _this.optionValue(index);\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            result = false;\n          } else if (typeof value[0] !== 'object') {\n            result = value.indexOf(optionValue) !== -1;\n          } else if (valueKey) {\n            result = value.some(function (valueItem) {\n              var valueValue = typeof valueKey === 'function' ? valueKey(valueItem) : valueItem[valueKey];\n              return valueValue === optionValue;\n            });\n          }\n        } else if (valueKey && typeof value === 'object') {\n          var valueValue = typeof valueKey === 'function' ? valueKey(value) : value[valueKey];\n          result = valueValue === optionValue;\n        } else {\n          result = value === optionValue;\n        }\n      }\n\n      return result;\n    });\n\n    _this.state = {\n      initialOptions: props.options,\n      search: '',\n      activeIndex: -1\n    };\n    return _this;\n  }\n\n  SelectContainer.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var options = nextProps.options,\n        value = nextProps.value,\n        onSearch = nextProps.onSearch;\n\n    if (onSearch) {\n      if (prevState.activeIndex === -1 && prevState.search === '' && options && value) {\n        var optionValue = Array.isArray(value) && value.length ? value[0] : value;\n        var activeIndex = options.indexOf(optionValue);\n        return {\n          activeIndex: activeIndex\n        };\n      }\n\n      if (prevState.activeIndex === -1 && prevState.search !== '') {\n        return {\n          activeIndex: 0\n        };\n      }\n    }\n\n    return null;\n  };\n\n  var _proto = SelectContainer.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var onSearch = this.props.onSearch;\n    var activeIndex = this.state.activeIndex; // timeout need to send the operation through event loop and allow\n    // time to the portal to be available\n\n    setTimeout(function () {\n      var optionsNode = _this2.optionsRef.current;\n\n      if (onSearch) {\n        var input = _this2.searchRef.current;\n\n        if (input && input.focus) {\n          setFocusWithoutScroll(input);\n        }\n      } else if (optionsNode) {\n        setFocusWithoutScroll(optionsNode);\n      } // scroll to active option if it is below the fold\n\n\n      if (activeIndex >= 0 && optionsNode) {\n        var optionNode = _this2.optionRefs[activeIndex];\n\n        var _optionsNode$getBound = optionsNode.getBoundingClientRect(),\n            containerBottom = _optionsNode$getBound.bottom;\n\n        if (optionNode) {\n          var _optionNode$getBoundi = optionNode.getBoundingClientRect(),\n              optionTop = _optionNode$getBoundi.bottom;\n\n          if (containerBottom < optionTop) {\n            optionNode.scrollIntoView();\n          }\n        }\n      }\n    }, 0);\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var _this$props6 = this.props,\n        children = _this$props6.children,\n        dropHeight = _this$props6.dropHeight,\n        emptySearchMessage = _this$props6.emptySearchMessage,\n        id = _this$props6.id,\n        onMore = _this$props6.onMore,\n        onKeyDown = _this$props6.onKeyDown,\n        onSearch = _this$props6.onSearch,\n        options = _this$props6.options,\n        searchPlaceholder = _this$props6.searchPlaceholder,\n        theme = _this$props6.theme,\n        replace = _this$props6.replace;\n    var _this$state = this.state,\n        activeIndex = _this$state.activeIndex,\n        search = _this$state.search;\n    var customSearchInput = theme.select.searchInput;\n    var SelectTextInput = customSearchInput || TextInput;\n\n    var selectOptionsStyle = _extends({}, theme.select.options.box, {}, theme.select.options.container);\n\n    return React.createElement(Keyboard, {\n      onEnter: this.onSelectOption,\n      onUp: this.onPreviousOption,\n      onDown: this.onNextOption,\n      onKeyDown: onKeyDown\n    }, React.createElement(StyledContainer, {\n      as: Box,\n      id: id ? id + \"__select-drop\" : undefined,\n      dropHeight: dropHeight\n    }, onSearch && React.createElement(Box, {\n      pad: !customSearchInput ? 'xsmall' : undefined,\n      flex: false\n    }, React.createElement(SelectTextInput, {\n      focusIndicator: !customSearchInput,\n      size: \"small\",\n      ref: this.searchRef,\n      type: \"search\",\n      value: search,\n      placeholder: searchPlaceholder,\n      onChange: this.onSearchChange\n    })), React.createElement(OptionsBox, {\n      flex: \"shrink\",\n      role: \"menubar\",\n      tabIndex: \"-1\",\n      ref: this.optionsRef,\n      overflow: \"auto\"\n    }, options.length > 0 ? React.createElement(InfiniteScroll, {\n      items: options,\n      step: theme.select.step,\n      onMore: onMore,\n      replace: replace\n    }, function (option, index) {\n      var isDisabled = _this3.isDisabled(index);\n\n      var isSelected = _this3.isSelected(index);\n\n      var isActive = activeIndex === index;\n      return React.createElement(SelectOption // eslint-disable-next-line react/no-array-index-key\n      , {\n        key: index,\n        ref: function ref(_ref) {\n          _this3.optionRefs[index] = _ref;\n        },\n        disabled: isDisabled || undefined,\n        active: isActive,\n        selected: isSelected,\n        option: option,\n        onMouseOver: !isDisabled ? _this3.onActiveOption(index) : undefined,\n        onClick: !isDisabled ? _this3.selectOption(option) : undefined\n      }, children ? children(option, index, options, {\n        active: isActive,\n        disabled: isDisabled,\n        selected: isSelected\n      }) : React.createElement(OptionBox, _extends({}, selectOptionsStyle, {\n        selected: isSelected\n      }), React.createElement(Text, theme.select.options.text, _this3.optionLabel(index))));\n    }) : React.createElement(SelectOption, {\n      key: \"search_empty\",\n      disabled: true,\n      option: emptySearchMessage\n    }, React.createElement(OptionBox, selectOptionsStyle, React.createElement(Text, theme.select.container.text, emptySearchMessage))))));\n  };\n\n  return SelectContainer;\n}(Component);\n\n_defineProperty(SelectContainer, \"defaultProps\", {\n  children: null,\n  disabled: undefined,\n  emptySearchMessage: 'No matches found',\n  id: undefined,\n  multiple: false,\n  name: undefined,\n  onKeyDown: undefined,\n  onSearch: undefined,\n  options: undefined,\n  searchPlaceholder: undefined,\n  selected: undefined,\n  value: '',\n  replace: true\n});\n\nObject.setPrototypeOf(SelectContainer.defaultProps, defaultProps);\nvar SelectContainerWrapper = withTheme(SelectContainer);\nexport { SelectContainerWrapper as SelectContainer };","map":null,"metadata":{},"sourceType":"module"}