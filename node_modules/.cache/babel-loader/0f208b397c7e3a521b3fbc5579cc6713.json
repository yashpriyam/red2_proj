{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useState } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Keyboard } from '../Keyboard';\nimport { normalizeColor, parseMetricToNum } from '../../utils';\nimport { withForwardRef } from '../hocs';\nvar DIRECTION_PROPS = {\n  horizontal: {\n    cursor: 'col-resize',\n    fill: 'vertical'\n  },\n  vertical: {\n    cursor: 'row-resize',\n    fill: 'horizontal'\n  }\n};\n\nvar EdgeControl = function EdgeControl(_ref) {\n  var color = _ref.color,\n      direction = _ref.direction,\n      edge = _ref.edge,\n      forwardRef = _ref.forwardRef,\n      onDecrease = _ref.onDecrease,\n      onIncrease = _ref.onIncrease,\n      theme = _ref.theme,\n      thickness = _ref.thickness,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"color\", \"direction\", \"edge\", \"forwardRef\", \"onDecrease\", \"onIncrease\", \"theme\", \"thickness\"]);\n\n  var _useState = useState(false),\n      focused = _useState[0],\n      setFocused = _useState[1];\n\n  var _DIRECTION_PROPS$dire = DIRECTION_PROPS[direction],\n      cursor = _DIRECTION_PROPS$dire.cursor,\n      fill = _DIRECTION_PROPS$dire.fill;\n  var size = parseMetricToNum(theme.global.spacing) / 2;\n  var keyboardProps = direction === 'vertical' ? {\n    onUp: onDecrease,\n    onDown: onIncrease\n  } : {\n    onLeft: onDecrease,\n    onRight: onIncrease\n  };\n  var boxDirection = direction === 'vertical' ? 'row' : 'column';\n  var type = theme.rangeSelector && theme.rangeSelector.edge && theme.rangeSelector.edge.type || 'disc';\n  var node;\n\n  if (type === 'bar') {\n    node = React.createElement(Box, {\n      flex: !thickness,\n      justifySelf: \"stretch\",\n      width: direction === 'vertical' ? thickness : size + \"px\",\n      height: direction === 'vertical' ? size + \"px\" : thickness,\n      background: normalizeColor(color || 'control', theme),\n      border: focused ? {\n        color: normalizeColor('focus', theme)\n      } : undefined\n    });\n  } else if (type === 'disc') {\n    node = React.createElement(Box, {\n      width: size + (focused ? 2 : 0) + \"px\",\n      height: size + (focused ? 2 : 0) + \"px\",\n      round: \"full\",\n      background: normalizeColor(color || 'control', theme),\n      border: focused ? {\n        color: normalizeColor('focus', theme)\n      } : undefined\n    });\n  } else {\n    node = type;\n  }\n\n  return React.createElement(Keyboard, keyboardProps, React.createElement(Box, {\n    direction: boxDirection,\n    style: {\n      flex: '0 0 1px'\n    },\n    overflow: \"visible\",\n    align: \"center\",\n    justify: \"center\",\n    alignSelf: \"stretch\"\n  }, React.createElement(Box, _extends({\n    ref: forwardRef,\n    direction: boxDirection,\n    justify: \"center\",\n    align: \"center\",\n    basis: \"full\",\n    fill: fill,\n    style: {\n      cursor: cursor,\n      minWidth: size,\n      minHeight: size,\n      zIndex: 10\n    },\n    tabIndex: 0,\n    onFocus: function onFocus() {\n      return setFocused(true);\n    },\n    onBlur: function onBlur() {\n      return setFocused(false);\n    }\n  }, rest), node)));\n};\n\nEdgeControl.defaultProps = {};\nObject.setPrototypeOf(EdgeControl.defaultProps, defaultProps);\nvar EdgeControlWrapper = compose(withForwardRef, withTheme)(EdgeControl);\nexport { EdgeControlWrapper as EdgeControl };","map":null,"metadata":{},"sourceType":"module"}