{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport styled, { withTheme } from 'styled-components';\nimport { Box } from '../Box';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { focusStyle, genericStyles } from '../../utils';\nimport { withFocus, withForwardRef } from '../hocs';\nvar StyledList = styled.ul.withConfig({\n  displayName: \"List__StyledList\",\n  componentId: \"sc-130gdqg-0\"\n})([\"list-style:none;\", \" padding:0;\", \" \", \"\"], function (props) {\n  return !props.margin && 'margin: 0;';\n}, genericStyles, function (props) {\n  return props.focus && focusStyle;\n});\nvar StyledItem = styled(Box).withConfig({\n  displayName: \"List__StyledItem\",\n  componentId: \"sc-130gdqg-1\"\n})([\"\", \"\"], function (props) {\n  return props.onClick && \"cursor: pointer;\";\n});\n\nvar normalize = function normalize(item, index, property) {\n  if (typeof property === 'function') {\n    return property(item, index);\n  }\n\n  return item[property];\n};\n\nvar List = React.forwardRef(function (props, ref) {\n  var action = props.action,\n      as = props.as,\n      background = props.background,\n      border = props.border,\n      children = props.children,\n      data = props.data,\n      focus = props.focus,\n      itemProps = props.itemProps,\n      pad = props.pad,\n      primaryKey = props.primaryKey,\n      secondaryKey = props.secondaryKey,\n      step = props.step,\n      theme = props.theme,\n      onClickItem = props.onClickItem,\n      onMore = props.onMore,\n      rest = _objectWithoutPropertiesLoose(props, [\"action\", \"as\", \"background\", \"border\", \"children\", \"data\", \"focus\", \"itemProps\", \"pad\", \"primaryKey\", \"secondaryKey\", \"step\", \"theme\", \"onClickItem\", \"onMore\"]);\n\n  var _React$useState = React.useState(),\n      active = _React$useState[0],\n      setActive = _React$useState[1];\n\n  return React.createElement(Keyboard, {\n    onEnter: onClickItem && active >= 0 ? function (event) {\n      event.persist();\n      var adjustedEvent = event;\n      adjustedEvent.item = data[active];\n      adjustedEvent.index = active;\n      onClickItem(adjustedEvent);\n    } : undefined,\n    onUp: onClickItem && active ? function () {\n      setActive(active - 1);\n    } : undefined,\n    onDown: onClickItem && data && data.length ? function () {\n      setActive(active >= 0 ? Math.min(active + 1, data.length - 1) : 0);\n    } : undefined\n  }, React.createElement(StyledList, _extends({\n    ref: ref,\n    as: as || 'ul',\n    tabIndex: onClickItem ? 0 : undefined\n  }, rest), React.createElement(InfiniteScroll, {\n    items: data,\n    onMore: onMore,\n    scrollableAncestor: \"window\",\n    step: step,\n    renderMarker: function renderMarker(marker) {\n      return React.createElement(Box, {\n        as: \"li\",\n        flex: false\n      }, marker);\n    }\n  }, function (item, index) {\n    var content;\n    var boxProps = {};\n\n    if (children) {\n      content = children(item, index, onClickItem ? {\n        active: active === index\n      } : undefined);\n    } else if (primaryKey) {\n      if (typeof primaryKey === 'function') {\n        content = primaryKey(item, index);\n      } else {\n        content = React.createElement(Text, {\n          key: \"p\",\n          weight: \"bold\"\n        }, normalize(item, index, primaryKey));\n      }\n\n      if (secondaryKey) {\n        if (typeof secondaryKey === 'function') {\n          content = [content, secondaryKey(item, index)];\n        } else {\n          content = [content, React.createElement(Text, {\n            key: \"s\"\n          }, normalize(item, index, secondaryKey))];\n        }\n\n        boxProps = {\n          direction: 'row',\n          align: 'center',\n          justify: 'between',\n          gap: 'medium'\n        };\n      }\n    } else if (typeof item === 'object') {\n      content = item[Object.keys(item)[0]];\n    } else {\n      content = item;\n    }\n\n    if (action) {\n      content = [React.createElement(Box, {\n        align: \"start\"\n      }, content), action(item, index)];\n      boxProps = {\n        direction: 'row',\n        align: secondaryKey ? 'start' : 'center',\n        justify: 'between',\n        gap: 'medium'\n      };\n    }\n\n    var adjustedBackground = background || theme.list.item.background;\n\n    if (active === index) {\n      adjustedBackground = theme.global.hover.background;\n    } else if (Array.isArray(adjustedBackground)) {\n      adjustedBackground = adjustedBackground[index % adjustedBackground.length];\n    }\n\n    var adjustedBorder = border || theme.list.item.border;\n\n    if (adjustedBorder === 'horizontal' && index) {\n      adjustedBorder = 'bottom';\n    }\n\n    if (itemProps && itemProps[index]) {\n      boxProps = _extends({}, boxProps, {}, itemProps[index]);\n    }\n\n    var clickProps;\n\n    if (onClickItem) {\n      clickProps = {\n        tabIndex: -1,\n        active: active === index,\n        onClick: function onClick(event) {\n          event.persist(); // extract from React's synthetic event pool\n\n          var adjustedEvent = event;\n          adjustedEvent.item = item;\n          adjustedEvent.index = index;\n          onClickItem(adjustedEvent);\n        },\n        onMouseOver: function onMouseOver() {\n          return setActive(index);\n        },\n        onMouseOut: function onMouseOut() {\n          return setActive(undefined);\n        },\n        onFocus: function onFocus() {\n          return setActive(index);\n        },\n        onBlur: function onBlur() {\n          return setActive(undefined);\n        }\n      };\n    }\n\n    return React.createElement(StyledItem, _extends({\n      key: index,\n      tag: \"li\",\n      flex: false,\n      pad: pad || theme.list.item.pad,\n      background: adjustedBackground,\n      border: adjustedBorder\n    }, boxProps, clickProps), content);\n  })));\n});\nList.displayName = 'List';\nvar ListDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  ListDoc = require('./doc').doc(List); // eslint-disable-line global-require\n}\n\nvar ListWrapper = compose(withTheme, withFocus(), withForwardRef)(ListDoc || List);\nexport { ListWrapper as List };","map":null,"metadata":{},"sourceType":"module"}