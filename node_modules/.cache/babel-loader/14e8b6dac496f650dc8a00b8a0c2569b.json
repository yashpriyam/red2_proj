{"ast":null,"code":"export var findScrollParents = function findScrollParents(element, horizontal) {\n  var result = [];\n\n  if (element) {\n    var parent = element.parentNode;\n\n    while (parent && parent.getBoundingClientRect) {\n      var rect = parent.getBoundingClientRect(); // 10px is to account for borders and scrollbars in a lazy way\n\n      if (horizontal) {\n        if (rect.width && parent.scrollWidth > rect.width + 10) {\n          result.push(parent);\n        }\n      } else if (rect.height && parent.scrollHeight > rect.height + 10) {\n        result.push(parent);\n      }\n\n      parent = parent.parentNode;\n    } // last scrollable element will be the document\n    // if nothing else is scrollable in the page\n\n\n    if (result.length === 0) {\n      result.push(document);\n    } else if (result[0].tagName.toLowerCase() === 'body') {\n      result.length = 0;\n      result.push(document);\n    }\n  }\n\n  return result;\n};\nexport var getFirstFocusableDescendant = function getFirstFocusableDescendant(element) {\n  var children = element.getElementsByTagName('*');\n\n  for (var i = 0; i < children.length; i += 1) {\n    var child = children[i];\n    var tagName = child.tagName.toLowerCase();\n\n    if (tagName === 'input' || tagName === 'select') {\n      return child;\n    }\n  }\n\n  return undefined;\n};\nexport var getBodyChildElements = function getBodyChildElements() {\n  var excludeMatch = /^(script|link)$/i;\n  var children = [];\n  [].forEach.call(document.body.children, function (node) {\n    if (!excludeMatch.test(node.tagName)) {\n      children.push(node);\n    }\n  });\n  return children;\n};\nexport var getNewContainer = function getNewContainer() {\n  // setup DOM\n  var container = document.createElement('div');\n  document.body.appendChild(container);\n  return container;\n};\nexport var setFocusWithoutScroll = function setFocusWithoutScroll(element) {\n  var x = window.scrollX;\n  var y = window.scrollY;\n  element.focus();\n  window.scrollTo(x, y);\n};\nvar TABINDEX = 'tabindex';\nvar TABINDEX_STATE = 'data-g-tabindex';\nexport var makeNodeFocusable = function makeNodeFocusable(node) {\n  // do not touch aria live containers so that announcements work\n  if (!node.hasAttribute('aria-live')) {\n    node.setAttribute('aria-hidden', false); // allow children to receive focus again\n\n    var elements = node.getElementsByTagName('*'); // only reset elements we've changed in makeNodeUnfocusable()\n\n    Array.prototype.filter.call(elements || [], function (element) {\n      return element.hasAttribute(TABINDEX_STATE);\n    }).forEach(function (element) {\n      var prior = element.getAttribute(TABINDEX_STATE);\n\n      if (prior >= 0) {\n        element.setAttribute(TABINDEX, element.getAttribute(TABINDEX_STATE));\n      } else if (prior === 'none') {\n        element.removeAttribute(TABINDEX);\n      }\n\n      element.removeAttribute(TABINDEX_STATE);\n    });\n  }\n};\nvar autoFocusingTags = /(a|area|input|select|textarea|button|iframe)$/;\nexport var makeNodeUnfocusable = function makeNodeUnfocusable(node) {\n  // do not touch aria live containers so that announcements work\n  if (!node.hasAttribute('aria-live')) {\n    node.setAttribute('aria-hidden', true); // prevent children to receive focus\n\n    var elements = node.getElementsByTagName('*'); // first, save off the tabindex of any element with one\n\n    Array.prototype.filter.call(elements || [], function (element) {\n      return element.getAttribute(TABINDEX) !== null;\n    }).forEach(function (element) {\n      element.setAttribute(TABINDEX_STATE, element.getAttribute(TABINDEX));\n      element.setAttribute(TABINDEX, -1);\n    }); // then, if any element is inherently focusable and not handled above,\n    // give it a tabindex of -1 so it can't receive focus\n\n    Array.prototype.filter.call(elements || [], function (element) {\n      var currentTag = element.tagName.toLowerCase();\n      return currentTag.match(autoFocusingTags) && element.focus && element.getAttribute(TABINDEX_STATE) === null;\n    }).forEach(function (element) {\n      element.setAttribute(TABINDEX_STATE, 'none');\n      element.setAttribute(TABINDEX, -1);\n    });\n  }\n};\nexport var findVisibleParent = function findVisibleParent(element) {\n  if (element) {\n    return element.offsetParent ? element : findVisibleParent(element.parentElement) || element;\n  }\n\n  return undefined;\n};\nexport var isNodeAfterScroll = function isNodeAfterScroll(node, target) {\n  if (target === void 0) {\n    target = window;\n  }\n\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n      bottom = _node$getBoundingClie.bottom;\n\n  var _target$getBoundingCl = target.getBoundingClientRect(),\n      height = _target$getBoundingCl.height,\n      top = _target$getBoundingCl.top;\n\n  return bottom >= top + height;\n};\nexport var isNodeBeforeScroll = function isNodeBeforeScroll(node, target) {\n  if (target === void 0) {\n    target = window;\n  }\n\n  var _node$getBoundingClie2 = node.getBoundingClientRect(),\n      top = _node$getBoundingClie2.top;\n\n  var _target$getBoundingCl2 = target.getBoundingClientRect(),\n      targetTop = _target$getBoundingCl2.top;\n\n  return top <= targetTop;\n};","map":null,"metadata":{},"sourceType":"module"}