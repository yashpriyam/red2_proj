{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport { Button } from '../Button';\nimport { Drop } from '../Drop';\nvar DropButton = forwardRef(function (_ref, ref) {\n  var _ref$a11yTitle = _ref.a11yTitle,\n      a11yTitle = _ref$a11yTitle === void 0 ? 'Open Drop' : _ref$a11yTitle,\n      disabled = _ref.disabled,\n      _ref$dropAlign = _ref.dropAlign,\n      dropAlign = _ref$dropAlign === void 0 ? {\n    top: 'top',\n    left: 'left'\n  } : _ref$dropAlign,\n      dropProps = _ref.dropProps,\n      dropContent = _ref.dropContent,\n      dropTarget = _ref.dropTarget,\n      id = _ref.id,\n      open = _ref.open,\n      onClick = _ref.onClick,\n      onClose = _ref.onClose,\n      onOpen = _ref.onOpen,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"a11yTitle\", \"disabled\", \"dropAlign\", \"dropProps\", \"dropContent\", \"dropTarget\", \"id\", \"open\", \"onClick\", \"onClose\", \"onOpen\"]);\n\n  var _useState = useState(),\n      show = _useState[0],\n      setShow = _useState[1];\n\n  useEffect(function () {\n    if (open !== undefined && open !== show) {\n      setShow(open);\n    }\n  }, [open, show]);\n  var buttonRef = useRef();\n  var onDropClose = useCallback(function (event) {\n    // if the user has clicked on our Button, don't do anything here,\n    // handle that in onClickInternal() below.\n    var node = event.target;\n\n    while (node !== document && node !== (ref || buttonRef).current) {\n      node = node.parentNode;\n    }\n\n    if (node !== (ref || buttonRef).current) {\n      setShow(false);\n      if (onClose) onClose(event);\n    }\n  }, [onClose, ref]);\n  var onClickInternal = useCallback(function (event) {\n    if (!show) {\n      setShow(true);\n      if (onOpen) onOpen(event);\n    } else {\n      setShow(false);\n      if (onClose) onClose(event);\n    }\n\n    if (onClick) onClick(event);\n  }, [onClick, onClose, onOpen, show]);\n  return React.createElement(React.Fragment, null, React.createElement(Button, _extends({\n    id: id,\n    ref: ref || buttonRef,\n    a11yTitle: a11yTitle,\n    disabled: disabled\n  }, rest, {\n    onClick: onClickInternal\n  })), show && (ref || buttonRef).current && React.createElement(Drop, _extends({\n    id: id ? id + \"__drop\" : undefined,\n    restrictFocus: true,\n    align: dropAlign,\n    target: dropTarget || (ref || buttonRef).current,\n    onClickOutside: onDropClose,\n    onEsc: onDropClose\n  }, dropProps), dropContent));\n});\nDropButton.displayName = 'DropButton';\nvar DropButtonDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  DropButtonDoc = require('./doc').doc(DropButton);\n}\n\nvar DropButtonWrapper = DropButtonDoc || DropButton;\nexport { DropButtonWrapper as DropButton };","map":null,"metadata":{},"sourceType":"module"}