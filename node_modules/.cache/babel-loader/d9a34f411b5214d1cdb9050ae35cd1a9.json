{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { defaultProps } from '../../default-props';\nimport { normalizeColor, removeUndefined } from '../../utils';\nimport { StyledRadioButton, StyledRadioButtonContainer, StyledRadioButtonIcon, StyledRadioButtonInput, StyledRadioButtonBox } from './StyledRadioButton';\nvar RadioButton = forwardRef(function (_ref, ref) {\n  var checked = _ref.checked,\n      children = _ref.children,\n      disabled = _ref.disabled,\n      focus = _ref.focus,\n      id = _ref.id,\n      label = _ref.label,\n      name = _ref.name,\n      onChange = _ref.onChange,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"checked\", \"children\", \"disabled\", \"focus\", \"id\", \"label\", \"name\", \"onChange\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(),\n      hover = _useState[0],\n      setHover = _useState[1];\n\n  var normalizedLabel = typeof label === 'string' ? React.createElement(\"span\", null, label) : label;\n  var Icon = theme.radioButton.icons.circle;\n  var borderColor = normalizeColor(theme.radioButton.border.color, theme);\n\n  if (checked) {\n    borderColor = normalizeColor(theme.radioButton.color || 'control', theme);\n  }\n\n  return React.createElement(StyledRadioButtonContainer, _extends({}, removeUndefined({\n    htmlFor: id,\n    disabled: disabled\n  }), {\n    onClick: function onClick(event) {\n      // prevents clicking on the label trigging the event twice\n      // https://stackoverflow.com/questions/24501497/why-the-onclick-element-will-trigger-twice-for-label-element\n      if (event.target.type !== 'radio') {\n        event.stopPropagation();\n      }\n    },\n    onMouseEnter: function onMouseEnter() {\n      return setHover(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setHover(false);\n    }\n  }), React.createElement(StyledRadioButton, {\n    as: Box,\n    margin: label ? {\n      right: theme.radioButton.gap || 'small'\n    } : undefined\n  }, React.createElement(StyledRadioButtonInput, _extends({}, rest, {\n    ref: ref,\n    type: \"radio\"\n  }, removeUndefined({\n    id: id,\n    name: name,\n    checked: checked,\n    disabled: disabled,\n    onChange: onChange\n  }))), children ? children({\n    checked: checked,\n    hover: hover\n  }) : React.createElement(StyledRadioButtonBox, {\n    focus: focus,\n    as: Box,\n    align: \"center\",\n    justify: \"center\",\n    width: theme.radioButton.size,\n    height: theme.radioButton.size,\n    border: {\n      size: theme.radioButton.border.width,\n      color: borderColor\n    },\n    round: theme.radioButton.check.radius\n  }, checked && (Icon ? React.createElement(Icon, {\n    as: StyledRadioButtonIcon\n  }) : React.createElement(StyledRadioButtonIcon, {\n    viewBox: \"0 0 24 24\",\n    preserveAspectRatio: \"xMidYMid meet\"\n  }, React.createElement(\"circle\", {\n    cx: 12,\n    cy: 12,\n    r: 6\n  }))))), normalizedLabel);\n});\nRadioButton.displayName = 'RadioButton';\nvar RadioButtonDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  RadioButtonDoc = require('./doc').doc(RadioButton);\n}\n\nvar RadioButtonWrapper = RadioButtonDoc || RadioButton;\nexport { RadioButtonWrapper as RadioButton };","map":null,"metadata":{},"sourceType":"module"}