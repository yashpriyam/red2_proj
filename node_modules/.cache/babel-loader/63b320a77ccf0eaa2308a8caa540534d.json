{"ast":null,"code":"function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { normalizeColor, parseMetricToNum } from '../../utils';\nimport { StyledWorldMap } from './StyledWorldMap'; // The graphic is drawn as a rectangular grid using coordinates spaced\n// by FACTOR pixels. The contents have both an area boundary for interaction\n// and dots described as rows where each row is described by three values:\n// a starting coordinate and a length. This approach is more efficient than\n// describing it via SVG elements, keeping the code/library size smaller.\n\nvar CONTINENTS = [{\n  name: 'Australia',\n  origin: [74, 32],\n  area: [[4, 0], [7, 1], [15, 7], [13, 9], [0, 6], [0, 2]],\n  dots: [[4, 0, 1], [2, 1, 6], [0, 2, 9], [0, 3, 10], [0, 4, 10], [0, 5, 3], [5, 5, 5], [5, 6, 4], [15, 7, 1], [14, 8, 1], [13, 9, 1]]\n}, {\n  name: 'Asia',\n  origin: [52, 1],\n  area: [[16, 0], [38, 5], [40, 7], [28, 17], [24, 25], [29, 29], [19, 29], [11, 24], [3, 23], [0, 20], [0, 19], [6, 13], [7, 6]],\n  dots: [[16, 0, 1], [17, 1, 2], [18, 2, 2], [15, 3, 6], [28, 3, 1], [30, 3, 1], [10, 4, 2], [13, 4, 10], [24, 4, 1], [9, 5, 22], [32, 5, 1], [38, 5, 1], [7, 6, 2], [10, 6, 1], [12, 6, 27], [7, 7, 34], [7, 8, 31], [7, 9, 26], [34, 9, 3], [7, 10, 22], [31, 10, 1], [33, 10, 1], [7, 11, 21], [32, 11, 2], [7, 12, 21], [32, 12, 1], [6, 13, 22], [32, 13, 1], [6, 14, 22], [5, 15, 22], [3, 16, 2], [6, 16, 20], [2, 17, 3], [6, 17, 16], [24, 17, 1], [28, 17, 1], [1, 18, 22], [26, 18, 2], [0, 19, 24], [0, 20, 5], [6, 20, 17], [2, 21, 5], [10, 21, 14], [2, 22, 5], [11, 22, 4], [16, 22, 4], [3, 23, 3], [11, 23, 2], [17, 23, 3], [23, 23, 1], [11, 24, 2], [18, 24, 2], [23, 24, 1], [24, 25, 1], [18, 26, 1], [22, 26, 1], [18, 27, 1], [20, 27, 4], [18, 28, 1], [21, 28, 1], [23, 28, 1], [26, 28, 3], [19, 29, 1], [28, 29, 2]]\n}, {\n  // 21X, 40Y\n  name: 'Africa',\n  origin: [40, 19],\n  area: [[3, 0], [6, 0], [11, 2], [16, 7], [16, 15], [11, 18], [9, 18], [0, 6], [0, 3]],\n  dots: [[3, 0, 4], [2, 1, 6], [9, 1, 2], [1, 2, 11], [0, 3, 13], [0, 4, 14], [0, 5, 14], [0, 6, 16], [1, 7, 16], [2, 8, 2], [6, 8, 11], [7, 9, 9], [7, 10, 8], [7, 11, 7], [8, 12, 7], [7, 13, 8], [7, 14, 7], [16, 14, 1], [8, 15, 5], [15, 15, 2], [8, 16, 5], [9, 17, 3], [9, 18, 3]]\n}, {\n  name: 'Europe',\n  origin: [39, 2],\n  area: [[8, 0], [10, 0], [20, 2], [19, 11], [18, 13], [14, 16], [3, 16], [0, 7]],\n  dots: [[8, 0, 3], [9, 1, 1], [20, 2, 1], [19, 3, 1], [12, 4, 1], [19, 4, 1], [9, 5, 6], [9, 6, 7], [17, 6, 3], [0, 7, 1], [8, 7, 12], [7, 8, 3], [11, 8, 9], [7, 9, 3], [11, 9, 9], [4, 10, 1], [7, 10, 1], [9, 10, 1], [11, 10, 9], [3, 11, 2], [7, 11, 13], [4, 12, 1], [6, 12, 13], [4, 13, 15], [5, 14, 3], [9, 14, 4], [15, 14, 2], [3, 15, 3], [8, 15, 1], [10, 15, 5], [6, 15, 2], [3, 16, 2], [10, 16, 5]]\n}, {\n  name: 'South America',\n  origin: [22, 26],\n  area: [[2, 0], [5, 0], [11, 4], [11, 8], [3, 18], [2, 17], [0, 4], [0, 3]],\n  dots: [[2, 0, 4], [1, 1, 7], [1, 2, 7], [0, 3, 10], [0, 4, 12], [1, 5, 11], [2, 6, 9], [3, 7, 8], [3, 8, 8], [3, 9, 6], [3, 10, 6], [3, 11, 5], [3, 12, 3], [2, 13, 3], [2, 14, 3], [2, 15, 2], [2, 16, 2], [2, 17, 2], [3, 18, 1]]\n}, {\n  name: 'North America',\n  origin: [0, 0],\n  area: [[21, 0], [39, 0], [39, 6], [22, 26], [16, 23], [2, 12], [0, 7]],\n  dots: [[22, 0, 6], [29, 0, 1], [31, 0, 1], [33, 0, 5], [20, 1, 1], [22, 1, 1], [24, 1, 2], [27, 1, 13], [17, 2, 1], [20, 2, 5], [26, 2, 13], [13, 3, 1], [19, 3, 1], [21, 3, 3], [26, 3, 14], [14, 4, 1], [16, 4, 4], [21, 4, 3], [29, 4, 11], [12, 5, 3], [16, 5, 1], [18, 5, 1], [20, 5, 3], [24, 5, 1], [30, 5, 8], [14, 6, 3], [19, 6, 1], [22, 6, 4], [31, 6, 8], [0, 7, 15], [16, 7, 1], [18, 7, 4], [24, 7, 2], [30, 7, 7], [2, 8, 20], [24, 8, 3], [29, 8, 5], [2, 9, 20], [24, 9, 2], [30, 9, 3], [1, 10, 18], [23, 10, 2], [31, 10, 1], [2, 11, 2], [8, 11, 11], [23, 11, 2], [26, 11, 1], [2, 12, 1], [8, 12, 13], [24, 12, 3], [10, 13, 12], [23, 13, 5], [11, 14, 17], [11, 15, 9], [21, 15, 6], [28, 15, 2], [11, 16, 11], [23, 16, 4], [11, 17, 14], [12, 18, 11], [12, 19, 12], [13, 20, 9], [15, 21, 3], [22, 21, 1], [16, 22, 2], [16, 23, 2], [20, 23, 1], [23, 23, 1], [18, 24, 3], [21, 25, 1], [22, 26, 1]]\n}]; // FACTOR is the distance in pixels between coordinates\n\nvar FACTOR = 10;\n\nvar maxCoordinate = function maxCoordinate(a, b) {\n  return [Math.max(a[0], b[0]), Math.max(a[1], b[1])];\n}; // const minCoordinate = (a, b) =>\n//   [Math.min(a[0], b[0]), Math.min(a[1], b[1])];\n// Based on https://stackoverflow.com/a/43861247\n\n\nvar MAP_LAT_BOTTOM = -50.0; // empirically determined\n\nvar MAP_LAT_BOTTOM_RAD = MAP_LAT_BOTTOM * Math.PI / 180;\nvar MAP_LON_LEFT = -171.0; // empirically determined\n\nvar MAP_LON_RIGHT = 184.0; // empirically determined\n\nvar MAP_LON_DELTA = MAP_LON_RIGHT - MAP_LON_LEFT;\n\nvar mapValues = function mapValues(extent) {\n  var mapRadius = extent[0] / MAP_LON_DELTA * 360 / (2 * Math.PI);\n  var mapOffsetY = Math.round(mapRadius / 2 * Math.log((1 + Math.sin(MAP_LAT_BOTTOM_RAD)) / (1 - Math.sin(MAP_LAT_BOTTOM_RAD))));\n  return {\n    mapRadius: mapRadius,\n    mapOffsetY: mapOffsetY\n  };\n};\n\nvar latLonToCoord = function latLonToCoord(latLon, origin, extent) {\n  var _mapValues = mapValues(extent),\n      mapRadius = _mapValues.mapRadius,\n      mapOffsetY = _mapValues.mapOffsetY;\n\n  var x = Math.round((latLon[1] - MAP_LON_LEFT) * extent[0] / MAP_LON_DELTA);\n  var latitudeRad = latLon[0] * Math.PI / 180;\n  var y = extent[1] + mapOffsetY - Math.round(mapRadius / 2 * Math.log((1 + Math.sin(latitudeRad)) / (1 - Math.sin(latitudeRad))));\n  return [x, y]; // the coordinate value of this point on the map image\n};\n\nvar coordToLatLon = function coordToLatLon(coord, origin, extent) {\n  var _mapValues2 = mapValues(extent),\n      mapRadius = _mapValues2.mapRadius,\n      mapOffsetY = _mapValues2.mapOffsetY;\n\n  var a = (extent[1] + mapOffsetY - coord[1]) / mapRadius;\n  var lat = 180 / Math.PI * (2 * Math.atan(Math.exp(a)) - Math.PI / 2);\n  var lon = coord[0] * MAP_LON_DELTA / extent[0] + MAP_LON_LEFT;\n  return [lat, lon];\n};\n\nvar buildContinentState = function buildContinentState(_ref) {\n  var area = _ref.area,\n      dots = _ref.dots,\n      origin = _ref.origin;\n  var extent = [].concat(origin);\n  var stateDots = dots.map(function (segment) {\n    var count = segment[2];\n    var spots = [];\n\n    for (var i = 0; i < count; i += 1) {\n      spots.push('h0');\n    }\n\n    var dotCommands = spots.join(' m10,0 ');\n    var x = FACTOR * (origin[0] + segment[0] + 1);\n    var y = FACTOR * (origin[1] + segment[1] + 1);\n    extent = maxCoordinate(extent, [origin[0] + segment[0] + segment[2], origin[1] + segment[1]]);\n    return \"M\" + x + \",\" + y + \" \" + dotCommands;\n  }).join(' ');\n  var stateArea = area.map(function (point, index) {\n    var x = FACTOR * (point[0] + origin[0] + 1);\n    var y = FACTOR * (point[1] + origin[1] + 1);\n    return \"\" + (index === 0 ? 'M' : 'L') + x + \",\" + y;\n  }).join(' ') + \" Z\";\n  var mid = [origin[0] + (extent[0] - origin[0]) / 2, origin[1] + (extent[1] - origin[1]) / 2];\n  return {\n    area: stateArea,\n    dots: stateDots,\n    origin: origin,\n    extent: extent,\n    mid: mid\n  };\n};\n\nvar buildState = function buildState() {\n  var continents = {}; // Build the SVG paths describing the individual dots\n\n  var origin = [0, 0];\n  var extent = [0, 0];\n  CONTINENTS.forEach(function (continent) {\n    continents[continent.name] = buildContinentState(continent);\n    extent = maxCoordinate(extent, continents[continent.name].extent);\n  });\n  return {\n    continents: continents,\n    extent: extent,\n    origin: origin,\n    x: origin[0] * FACTOR,\n    y: origin[1] * FACTOR,\n    width: (extent[0] - origin[0] + 1) * FACTOR,\n    height: (extent[1] - origin[1] + 2) * FACTOR\n  };\n};\n\nvar updateState = function updateState(state, _ref2) {\n  var continents = _ref2.continents,\n      places = _ref2.places;\n\n  var nextState = _extends({}, state);\n\n  if (continents) {\n    continents.forEach(function (continent) {\n      nextState.continents[continent.name] = _extends({}, state.continents[continent.name], {}, continent);\n    });\n  }\n\n  nextState.places = (places || []).map(function (_ref3) {\n    var location = _ref3.location,\n        place = _objectWithoutPropertiesLoose(_ref3, [\"location\"]);\n\n    var coords = latLonToCoord(location, state.origin, state.extent);\n    return _extends({\n      coords: coords,\n      key: location.join(',')\n    }, place);\n  });\n  return nextState;\n};\n\nvar buildInteractiveProps = function buildInteractiveProps(_ref4, activeFunc, active) {\n  var name = _ref4.name,\n      onClick = _ref4.onClick,\n      onHover = _ref4.onHover;\n  return {\n    role: 'button',\n    'aria-label': name,\n    tabIndex: '0',\n    onClick: onClick ? function () {\n      return onClick(name);\n    } : undefined,\n    onMouseOver: function onMouseOver() {\n      if (!active) {\n        activeFunc(name);\n\n        if (onHover) {\n          onHover(true);\n        }\n      }\n    },\n    onMouseLeave: function onMouseLeave() {\n      if (active) {\n        activeFunc(undefined);\n\n        if (onHover) {\n          onHover(false);\n        }\n      }\n    },\n    onFocus: function onFocus() {\n      // This moves the map unnecessarily. Instead, we should check\n      // the position and scroll if it isn't already visible\n      // this._worldMapRef.scrollIntoView();\n      if (!active) {\n        activeFunc(name);\n      }\n    },\n    onBlur: function onBlur() {\n      if (active) {\n        activeFunc(undefined);\n      }\n    }\n  };\n};\n\nvar WorldMap = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(WorldMap, _Component);\n\n  function WorldMap() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseOver\", function () {\n      // track when we're over the map to avoid dealing with mouse moves\n      _this.setState({\n        over: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseMove\", function (event) {\n      var width = _this.state.width; // determine the map coordinates for where the mouse is\n      // containerRef uses the group so we can handle aspect ratio scaling\n\n      var rect = _this.containerRef.getBoundingClientRect();\n\n      var scale = rect.width / width; // since the SVG viewBox might be scaled\n\n      var coords = [Math.round((event.clientX - rect.left) / scale / FACTOR), Math.round((event.clientY - rect.top) / scale / FACTOR)];\n\n      _this.setState({\n        activeCoords: coords\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseLeave\", function () {\n      _this.setState({\n        over: false,\n        activeCoords: undefined\n      });\n    });\n\n    return _this;\n  }\n\n  WorldMap.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (!prevState.continents) {\n      return updateState(buildState(), nextProps);\n    }\n\n    return updateState(prevState, nextProps);\n  };\n\n  var _proto = WorldMap.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        color = _this$props.color,\n        fill = _this$props.fill,\n        onSelectPlace = _this$props.onSelectPlace,\n        hoverColor = _this$props.hoverColor,\n        theme = _this$props.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"color\", \"fill\", \"onSelectPlace\", \"hoverColor\", \"theme\"]);\n\n    delete rest.places;\n    delete rest.continents;\n    var _this$state = this.state,\n        activeContinent = _this$state.activeContinent,\n        activeCoords = _this$state.activeCoords,\n        activePlace = _this$state.activePlace,\n        continentStates = _this$state.continents,\n        extent = _this$state.extent,\n        origin = _this$state.origin,\n        over = _this$state.over,\n        placeStates = _this$state.places,\n        x = _this$state.x,\n        y = _this$state.y,\n        width = _this$state.width,\n        height = _this$state.height;\n    var continents = Object.keys(continentStates).map(function (name) {\n      var _continentStates$name = continentStates[name],\n          area = _continentStates$name.area,\n          continentColor = _continentStates$name.color,\n          dots = _continentStates$name.dots,\n          onClick = _continentStates$name.onClick,\n          onHover = _continentStates$name.onHover;\n      var active = activeContinent && activeContinent === name;\n      var interactiveProps = {};\n\n      if (onClick || onHover) {\n        interactiveProps = buildInteractiveProps(continentStates[name], function (activate) {\n          return _this2.setState({\n            activeContinent: activate\n          });\n        }, active);\n      }\n\n      return React.createElement(\"g\", _extends({\n        key: name\n      }, interactiveProps), React.createElement(\"path\", {\n        stroke: \"none\",\n        fill: \"#fff\",\n        fillOpacity: \"0.01\",\n        d: area\n      }), React.createElement(\"path\", {\n        d: dots,\n        strokeLinecap: \"round\",\n        strokeWidth: parseMetricToNum(theme.worldMap.continent[active ? 'active' : 'base']),\n        stroke: normalizeColor(continentColor || color || theme.worldMap.color, theme)\n      }));\n    });\n    var places = placeStates.map(function (place) {\n      var placeColor = place.color,\n          coords = place.coords,\n          key = place.key,\n          name = place.name,\n          onClick = place.onClick,\n          onHover = place.onHover,\n          restPlace = _objectWithoutPropertiesLoose(place, [\"color\", \"coords\", \"key\", \"name\", \"onClick\", \"onHover\"]);\n\n      var d = \"M\" + FACTOR * coords[0] + \", \" + FACTOR * coords[1] + \" h0\";\n      var active = activePlace && activePlace === name;\n      var interactiveProps = {};\n\n      if (onClick || onHover) {\n        interactiveProps = buildInteractiveProps(place, function (activate) {\n          return _this2.setState({\n            activePlace: activate\n          });\n        }, active);\n      }\n\n      return React.createElement(\"path\", _extends({\n        key: key,\n        strokeLinecap: \"round\",\n        strokeWidth: parseMetricToNum(theme.worldMap.place[active ? 'active' : 'base']),\n        stroke: normalizeColor(placeColor || color || theme.worldMap.color, theme)\n      }, interactiveProps, restPlace, {\n        d: d\n      }));\n    }); // If the caller is interested in onSelectPlace changes, track where the\n\n    var interactiveProps = {};\n\n    if (onSelectPlace) {\n      interactiveProps = {\n        onMouseOver: this.onMouseOver,\n        onMouseMove: over ? this.onMouseMove : undefined,\n        onMouseLeave: this.onMouseLeave\n      };\n    }\n\n    var active;\n\n    if (activeCoords) {\n      var d = \"M\" + FACTOR * activeCoords[0] + \", \" + FACTOR * activeCoords[1] + \" h0\";\n      active = React.createElement(\"g\", {\n        stroke: \"none\",\n        fill: \"none\",\n        fillRule: \"evenodd\",\n        onClick: function onClick() {\n          return onSelectPlace(coordToLatLon(activeCoords, origin, extent));\n        }\n      }, React.createElement(\"path\", {\n        strokeLinecap: \"round\",\n        strokeWidth: parseMetricToNum(theme.worldMap.place.active),\n        stroke: normalizeColor(hoverColor || color || theme.worldMap.hover.color, theme),\n        d: d\n      }));\n    }\n\n    return React.createElement(StyledWorldMap, _extends({\n      viewBox: x + \" \" + y + \" \" + width + \" \" + height,\n      preserveAspectRatio: \"xMinYMin meet\",\n      fillProp: fill,\n      width: width,\n      height: height\n    }, interactiveProps, rest), React.createElement(\"g\", {\n      ref: function ref(_ref5) {\n        _this2.containerRef = _ref5;\n      },\n      stroke: \"none\",\n      fill: \"none\",\n      fillRule: \"evenodd\"\n    }, continents), places, active);\n  };\n\n  return WorldMap;\n}(Component);\n\nWorldMap.defaultProps = {};\nObject.setPrototypeOf(WorldMap.defaultProps, defaultProps);\nvar WorldMapDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  WorldMapDoc = require('./doc').doc(WorldMap);\n}\n\nvar WorldMapWrapper = compose(withTheme)(WorldMapDoc || WorldMap);\nexport { WorldMapWrapper as WorldMap };","map":null,"metadata":{},"sourceType":"module"}