{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { TableContext } from '../Table/TableContext';\nimport { StyledTableCell } from '../Table/StyledTable';\nvar verticalAlignToJustify = {\n  middle: 'center',\n  top: 'start',\n  bottom: 'end'\n};\n\nvar TableCell = function TableCell(_ref) {\n  var align = _ref.align,\n      background = _ref.background,\n      border = _ref.border,\n      children = _ref.children,\n      colSpan = _ref.colSpan,\n      pad = _ref.pad,\n      plain = _ref.plain,\n      scope = _ref.scope,\n      size = _ref.size,\n      theme = _ref.theme,\n      verticalAlign = _ref.verticalAlign,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"align\", \"background\", \"border\", \"children\", \"colSpan\", \"pad\", \"plain\", \"scope\", \"size\", \"theme\", \"verticalAlign\"]);\n\n  return React.createElement(TableContext.Consumer, null, function (tableContext) {\n    var tableContextTheme;\n\n    if (tableContext === 'header') {\n      tableContextTheme = theme.table && theme.table.header;\n    } else if (tableContext === 'footer') {\n      tableContextTheme = theme.table && theme.table.footer;\n    } else {\n      tableContextTheme = theme.table && theme.table.body;\n    } // merge tabelContextTheme and rest\n\n\n    var mergedProps = _extends({}, tableContextTheme, {}, rest);\n\n    Object.keys(mergedProps).forEach(function (key) {\n      if (rest[key] === undefined) mergedProps[key] = tableContextTheme[key];\n    }); // split out background, border, and pad\n\n    var cellProps = {\n      align: align || mergedProps.align || undefined,\n      background: background || mergedProps.background || undefined,\n      border: border || mergedProps.border || undefined,\n      pad: pad || mergedProps.pad || undefined,\n      verticalAlign: verticalAlign || mergedProps.verticalAlign || undefined\n    };\n    delete mergedProps.align;\n    delete mergedProps.background;\n    delete mergedProps.border;\n    delete mergedProps.pad;\n    delete mergedProps.verticalAlign;\n    return React.createElement(StyledTableCell, _extends({\n      as: scope ? 'th' : undefined,\n      scope: scope,\n      size: size,\n      colSpan: colSpan,\n      tableContext: tableContext,\n      tableContextTheme: tableContextTheme\n    }, plain ? mergedProps : {}, cellProps), plain || !Object.keys(mergedProps).length ? children : React.createElement(Box, _extends({}, mergedProps, {\n      align: align,\n      justify: verticalAlignToJustify[verticalAlign]\n    }), children));\n  });\n};\n\nTableCell.defaultProps = {};\nObject.setPrototypeOf(TableCell.defaultProps, defaultProps);\nvar TableCellDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  TableCellDoc = require('./doc').doc(TableCell);\n}\n\nvar TableCellWrapper = compose(withTheme)(TableCellDoc || TableCell);\nexport { TableCellWrapper as TableCell };","map":null,"metadata":{},"sourceType":"module"}