{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useCallback, useContext, useMemo, useState, useEffect } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Heading } from '../Heading';\nimport { Keyboard } from '../Keyboard';\nimport { StyledCalendar, StyledDay, StyledDayContainer, StyledWeek, StyledWeeks, StyledWeeksContainer } from './StyledCalendar';\nimport { addDays, addMonths, betweenDates, daysApart, endOfMonth, startOfMonth, subtractDays, subtractMonths, withinDates } from './utils';\nvar headingPadMap = {\n  small: 'xsmall',\n  medium: 'small',\n  large: 'medium'\n};\n\nvar normalizeReference = function normalizeReference(reference, date, dates) {\n  var normalizedReference;\n\n  if (reference) {\n    normalizedReference = new Date(reference);\n  } else if (date) {\n    normalizedReference = new Date(date);\n  } else if (dates && dates.length > 0) {\n    if (typeof dates[0] === 'string') {\n      normalizedReference = new Date(dates[0]);\n    } else if (Array.isArray(dates[0])) {\n      normalizedReference = new Date(dates[0][0]);\n    } else {\n      normalizedReference = new Date();\n      normalizedReference.setHours(0, 0, 0, 0);\n    }\n  } else {\n    normalizedReference = new Date();\n    normalizedReference.setHours(0, 0, 0, 0);\n  }\n\n  return normalizedReference;\n};\n\nvar buildDisplayBounds = function buildDisplayBounds(reference, firstDayOfWeek) {\n  var start = new Date(reference);\n  start.setDate(1); // first of month\n  // In case Sunday is the first day of the month, and the user asked for Monday\n  // to be the first day of the week, then we need to include Sunday and six\n  // days prior.\n\n  start = start.getDay() === 0 && firstDayOfWeek === 1 ? start = subtractDays(start, 6) : // beginning of week\n  start = subtractDays(start, start.getDay() - firstDayOfWeek);\n  var end = addDays(start, 7 * 5 + 7); // 5 weeks to end of week\n\n  return [start, end];\n};\n\nvar Calendar = forwardRef(function (_ref, ref) {\n  var _ref$animate = _ref.animate,\n      animate = _ref$animate === void 0 ? true : _ref$animate,\n      validBounds = _ref.bounds,\n      dateProp = _ref.date,\n      datesProp = _ref.dates,\n      daysOfWeek = _ref.daysOfWeek,\n      disabled = _ref.disabled,\n      _ref$firstDayOfWeek = _ref.firstDayOfWeek,\n      firstDayOfWeek = _ref$firstDayOfWeek === void 0 ? 0 : _ref$firstDayOfWeek,\n      header = _ref.header,\n      _ref$locale = _ref.locale,\n      locale = _ref$locale === void 0 ? 'en-US' : _ref$locale,\n      onReference = _ref.onReference,\n      onSelect = _ref.onSelect,\n      range = _ref.range,\n      referenceProp = _ref.reference,\n      _ref$showAdjacentDays = _ref.showAdjacentDays,\n      showAdjacentDays = _ref$showAdjacentDays === void 0 ? true : _ref$showAdjacentDays,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"animate\", \"bounds\", \"date\", \"dates\", \"daysOfWeek\", \"disabled\", \"firstDayOfWeek\", \"header\", \"locale\", \"onReference\", \"onSelect\", \"range\", \"reference\", \"showAdjacentDays\", \"size\"]);\n\n  var theme = useContext(ThemeContext); // set date when caller changes it, allows us to change it internally too\n\n  var _useState = useState(dateProp),\n      date = _useState[0],\n      setDate = _useState[1];\n\n  useEffect(function () {\n    return setDate(dateProp);\n  }, [dateProp]); // set dates when caller changes it, allows us to change it internally too\n\n  var _useState2 = useState(datesProp),\n      dates = _useState2[0],\n      setDates = _useState2[1];\n\n  useEffect(function () {\n    return setDates(datesProp);\n  }, [datesProp]); // set reference based on what the caller passed or date/dates.\n\n  var _useState3 = useState(normalizeReference(referenceProp, date, dates)),\n      reference = _useState3[0],\n      setReference = _useState3[1];\n\n  useEffect(function () {\n    return setReference(normalizeReference(referenceProp, dateProp, datesProp));\n  }, [dateProp, datesProp, referenceProp]); // calculate the bounds we display based on the reference\n\n  var _useState4 = useState(buildDisplayBounds(reference, firstDayOfWeek)),\n      displayBounds = _useState4[0],\n      setDisplayBounds = _useState4[1];\n\n  var _useState5 = useState(),\n      targetDisplayBounds = _useState5[0],\n      setTargetDisplayBounds = _useState5[1];\n\n  var _useState6 = useState(),\n      slide = _useState6[0],\n      setSlide = _useState6[1]; // When the reference changes, we need to update the displayBounds.\n  // This is easy when we aren't animating. If we are animating,\n  // we temporarily increase the displayBounds to be the union of the old\n  // and new ones and set slide to drive the animation. We keep track\n  // of where we are heading via targetDisplayBounds. When the animation\n  // finishes, we prune displayBounds down to where we are headed and\n  // clear the slide and targetDisplayBounds.\n\n\n  useEffect(function () {\n    var nextDisplayBounds = buildDisplayBounds(reference, firstDayOfWeek);\n\n    if (!animate) {\n      setDisplayBounds(nextDisplayBounds);\n    } else {\n      setTargetDisplayBounds(nextDisplayBounds);\n    }\n  }, [animate, firstDayOfWeek, reference]);\n  useEffect(function () {\n    if (targetDisplayBounds) {\n      if (targetDisplayBounds[0].getTime() < displayBounds[0].getTime()) {\n        setDisplayBounds([targetDisplayBounds[0], displayBounds[1]]);\n        setSlide({\n          direction: 'down',\n          weeks: daysApart(displayBounds[0], targetDisplayBounds[0]) / 7\n        });\n      } else if (targetDisplayBounds[1].getTime() > displayBounds[1].getTime()) {\n        setDisplayBounds([displayBounds[0], targetDisplayBounds[1]]);\n        setSlide({\n          direction: 'up',\n          weeks: daysApart(targetDisplayBounds[1], displayBounds[1]) / 7\n        });\n      } // Wait for animation to finish before cleaning up.\n\n\n      var timer = setTimeout(function () {\n        setDisplayBounds(targetDisplayBounds);\n        setTargetDisplayBounds(undefined);\n        setSlide(undefined);\n      }, 400 // Empirically determined.\n      );\n      return function () {\n        return clearTimeout(timer);\n      };\n    }\n\n    setSlide(undefined);\n    return undefined;\n  }, [displayBounds, targetDisplayBounds]); // We have to deal with reference being the end of a month with more\n  // days than the month we are changing to. So, we always set reference\n  // to the first of the month before changing the month.\n\n  var previousMonth = useMemo(function () {\n    return endOfMonth(subtractMonths(startOfMonth(reference), 1));\n  }, [reference]);\n  var nextMonth = useMemo(function () {\n    return startOfMonth(addMonths(startOfMonth(reference), 1));\n  }, [reference]);\n\n  var _useState7 = useState(),\n      focus = _useState7[0],\n      setFocus = _useState7[1];\n\n  var _useState8 = useState(),\n      active = _useState8[0],\n      setActive = _useState8[1]; // when working on a range, remember the last selected date so we know\n  // how to handle subsequent date selection\n\n\n  var _useState9 = useState(),\n      lastSelectedDate = _useState9[0],\n      setLastSelectedDate = _useState9[1];\n\n  var changeReference = useCallback(function (nextReference) {\n    if (betweenDates(nextReference, validBounds)) {\n      setReference(nextReference);\n      if (onReference) onReference(nextReference.toISOString());\n    }\n  }, [onReference, validBounds]);\n  var selectDate = useCallback(function (selectedDate) {\n    var nextDates;\n    var nextDate;\n\n    if (!range) {\n      nextDate = selectedDate;\n    } else if (!dates) {\n      if (!date) {\n        nextDate = selectedDate;\n      } else {\n        var priorDate = new Date(date);\n        var selDate = new Date(selectedDate);\n\n        if (priorDate.getTime() < selDate.getTime()) {\n          nextDates = [[date, selectedDate]];\n          nextDate = undefined;\n        } else if (priorDate.getTime() > selDate.getTime()) {\n          nextDates = [[selectedDate, date]];\n          nextDate = undefined;\n        } else {\n          nextDate = undefined;\n        }\n      }\n    } else {\n      // have dates\n      var priorDates = dates[0].map(function (d) {\n        return new Date(d);\n      });\n      var previousDate = new Date(lastSelectedDate || dates[0][0]);\n\n      var _selDate = new Date(selectedDate);\n\n      if (_selDate.getTime() === priorDates[0].getTime()) {\n        var _dates$ = dates[0];\n        nextDate = _dates$[1];\n        nextDates = undefined;\n      } else if (_selDate.getTime() === priorDates[1].getTime()) {\n        var _dates$2 = dates[0];\n        nextDate = _dates$2[0];\n        nextDates = undefined;\n      } else if (_selDate.getTime() < previousDate.getTime()) {\n        if (_selDate.getTime() < priorDates[0].getTime()) {\n          nextDates = [[selectedDate, dates[0][1]]];\n        } else if (_selDate.getTime() > priorDates[0].getTime()) {\n          nextDates = [[dates[0][0], selectedDate]];\n        }\n      } else if (_selDate.getTime() > previousDate.getTime()) {\n        if (_selDate.getTime() > priorDates[1].getTime()) {\n          nextDates = [[dates[0][0], selectedDate]];\n        } else if (_selDate.getTime() < priorDates[1].getTime()) {\n          nextDates = [[selectedDate, dates[0][1]]];\n        }\n      }\n    }\n\n    setDates(nextDates);\n    if (!dates) setDate(nextDate);\n    setActive(new Date(selectedDate));\n    setLastSelectedDate(selectedDate);\n    if (onSelect) onSelect(nextDates || nextDate);\n  }, [date, dates, lastSelectedDate, onSelect, range]);\n\n  var renderCalendarHeader = function renderCalendarHeader() {\n    var PreviousIcon = size === 'small' ? theme.calendar.icons.small.previous : theme.calendar.icons.previous;\n    var NextIcon = size === 'small' ? theme.calendar.icons.small.next : theme.calendar.icons.next;\n    return React.createElement(Box, {\n      direction: \"row\",\n      justify: \"between\",\n      align: \"center\"\n    }, React.createElement(Box, {\n      flex: true,\n      pad: {\n        horizontal: headingPadMap[size] || 'small'\n      }\n    }, React.createElement(Heading, {\n      level: size === 'small' ? theme.calendar.heading && theme.calendar.heading.level || 4 : (theme.calendar.heading && theme.calendar.heading.level || 4) - 1,\n      size: size,\n      margin: \"none\"\n    }, reference.toLocaleDateString(locale, {\n      month: 'long',\n      year: 'numeric'\n    }))), React.createElement(Box, {\n      flex: false,\n      direction: \"row\",\n      align: \"center\"\n    }, React.createElement(Button, {\n      a11yTitle: previousMonth.toLocaleDateString(locale, {\n        month: 'long',\n        year: 'numeric'\n      }),\n      icon: React.createElement(PreviousIcon, {\n        size: size !== 'small' ? size : undefined\n      }),\n      disabled: !betweenDates(previousMonth, validBounds),\n      onClick: function onClick() {\n        return changeReference(previousMonth);\n      }\n    }), React.createElement(Button, {\n      a11yTitle: nextMonth.toLocaleDateString(locale, {\n        month: 'long',\n        year: 'numeric'\n      }),\n      icon: React.createElement(NextIcon, {\n        size: size !== 'small' ? size : undefined\n      }),\n      disabled: !betweenDates(nextMonth, validBounds),\n      onClick: function onClick() {\n        return changeReference(nextMonth);\n      }\n    })));\n  };\n\n  var renderDaysOfWeek = function renderDaysOfWeek() {\n    var day = new Date(displayBounds[0]);\n    var days = [];\n\n    while (days.length < 7) {\n      days.push(React.createElement(StyledDayContainer, {\n        key: days.length,\n        sizeProp: size\n      }, React.createElement(StyledDay, {\n        otherMonth: true,\n        sizeProp: size\n      }, day.toLocaleDateString(locale, {\n        weekday: 'narrow'\n      }))));\n      day = addDays(day, 1);\n    }\n\n    return React.createElement(StyledWeek, null, days);\n  };\n\n  var weeks = [];\n  var day = new Date(displayBounds[0]);\n  var days;\n  var firstDayInMonth;\n\n  while (day.getTime() < displayBounds[1].getTime()) {\n    if (day.getDay() === firstDayOfWeek) {\n      if (days) {\n        weeks.push(React.createElement(StyledWeek, {\n          key: day.getTime()\n        }, days));\n      }\n\n      days = [];\n    }\n\n    var otherMonth = day.getMonth() !== reference.getMonth();\n\n    if (!showAdjacentDays && otherMonth) {\n      days.push(React.createElement(StyledDayContainer, {\n        key: day.getTime(),\n        sizeProp: size\n      }, React.createElement(StyledDay, {\n        sizeProp: size\n      })));\n    } else {\n      (function () {\n        var dateString = day.toISOString(); // this.dayRefs[dateString] = React.createRef();\n\n        var selected = false;\n        var inRange = false;\n        var selectedState = withinDates(day, date || dates);\n\n        if (selectedState === 2) {\n          selected = true;\n        } else if (selectedState === 1) {\n          inRange = true;\n        }\n\n        var dayDisabled = withinDates(day, disabled) || validBounds && !betweenDates(day, validBounds);\n\n        if (!firstDayInMonth && !dayDisabled && day.getMonth() === reference.getMonth()) {\n          firstDayInMonth = dateString;\n        }\n\n        days.push(React.createElement(StyledDayContainer, {\n          key: day.getTime(),\n          sizeProp: size\n        }, React.createElement(Button, {\n          a11yTitle: day.toDateString(),\n          plain: true,\n          tabIndex: -1,\n          active: active && active.getTime() === day.getTime(),\n          disabled: dayDisabled,\n          onClick: function onClick() {\n            return selectDate(dateString);\n          },\n          onMouseOver: function onMouseOver() {\n            return setActive(new Date(dateString));\n          },\n          onMouseOut: function onMouseOut() {\n            return setActive(undefined);\n          },\n          onFocus: function onFocus() {},\n          onBlur: function onBlur() {}\n        }, React.createElement(StyledDay, {\n          inRange: inRange,\n          otherMonth: day.getMonth() !== reference.getMonth(),\n          isSelected: selected,\n          sizeProp: size\n        }, day.getDate()))));\n      })();\n    }\n\n    day = addDays(day, 1);\n  }\n\n  weeks.push(React.createElement(StyledWeek, {\n    key: day.getTime()\n  }, days));\n  return React.createElement(StyledCalendar, _extends({\n    ref: ref,\n    sizeProp: size\n  }, rest), React.createElement(Box, null, header ? header({\n    date: reference,\n    locale: locale,\n    onPreviousMonth: function onPreviousMonth() {\n      return changeReference(previousMonth);\n    },\n    onNextMonth: function onNextMonth() {\n      return changeReference(nextMonth);\n    },\n    previousInBound: betweenDates(previousMonth, validBounds),\n    nextInBound: betweenDates(nextMonth, validBounds)\n  }) : renderCalendarHeader(previousMonth, nextMonth), daysOfWeek && renderDaysOfWeek(), React.createElement(Keyboard, {\n    onEnter: function onEnter() {\n      return selectDate(active.toISOString());\n    },\n    onUp: function onUp(event) {\n      event.preventDefault();\n      event.stopPropagation(); // so the page doesn't scroll\n\n      setActive(addDays(active, -7));\n    },\n    onDown: function onDown(event) {\n      event.preventDefault();\n      event.stopPropagation(); // so the page doesn't scroll\n\n      setActive(addDays(active, 7));\n    },\n    onLeft: function onLeft() {\n      return active && setActive(addDays(active, -1));\n    },\n    onRight: function onRight() {\n      return active && setActive(addDays(active, 1));\n    }\n  }, React.createElement(StyledWeeksContainer, {\n    sizeProp: size,\n    tabIndex: 0,\n    focus: focus,\n    onFocus: function onFocus() {\n      setFocus(true);\n\n      if (date && betweenDates(new Date(date), displayBounds)) {\n        setActive(new Date(date));\n      } else {\n        setActive(new Date(firstDayInMonth));\n      }\n    },\n    onBlur: function onBlur() {\n      setFocus(false);\n      setActive(undefined);\n    }\n  }, React.createElement(StyledWeeks, {\n    slide: slide,\n    sizeProp: size\n  }, weeks)))));\n});\nCalendar.displayName = 'Calendar';\nvar CalendarDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  CalendarDoc = require('./doc').doc(Calendar);\n}\n\nvar CalendarWrapper = CalendarDoc || Calendar;\nexport { CalendarWrapper as Calendar };","map":null,"metadata":{},"sourceType":"module"}