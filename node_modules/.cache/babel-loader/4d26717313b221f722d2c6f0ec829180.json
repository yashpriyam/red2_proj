{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { withForwardRef } from '../hocs';\n\nfunction areEqual(prevProps, nextProps) {\n  var active = prevProps.active,\n      disabled = prevProps.disabled,\n      option = prevProps.option,\n      selected = prevProps.selected;\n  var nextActive = nextProps.active,\n      nextDisabled = nextProps.disabled,\n      nextOption = nextProps.option,\n      nextSelected = nextProps.selected;\n  return active === nextActive && selected === nextSelected && disabled === nextDisabled && option === nextOption;\n}\n\nvar SelectOption = React.memo(function (_ref) {\n  var forwardRef = _ref.forwardRef,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"forwardRef\"]);\n\n  return React.createElement(Box, {\n    flex: false\n  }, React.createElement(Button, _extends({\n    tabIndex: \"-1\",\n    ref: forwardRef,\n    role: \"menuitem\",\n    hoverIndicator: \"background\"\n  }, rest)));\n}, areEqual);\nvar SelectOptionWrapper = withForwardRef(SelectOption);\nexport { SelectOptionWrapper as SelectOption };","map":null,"metadata":{},"sourceType":"module"}