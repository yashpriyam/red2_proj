{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = descToTypescript;\n\nvar arrayFormat = function arrayFormat(array) {\n  return array.map(function (propType) {\n    return propTypeFormat(propType);\n  });\n};\n\nvar shapeFormat = function shapeFormat(shape) {\n  var props = Object.keys(shape).map(function (key) {\n    var value = shape[key];\n    var valueFormat = void 0;\n\n    if (value.type && (value.type === 'arrayOf' || value.type === 'oneOfType' || value.type === 'oneOf') && Array.isArray(value.args)) {\n      valueFormat = '' + propTypeFormat(value);\n    } else if (value.type === 'shape') {\n      valueFormat = '' + propTypeFormat(value);\n    } else {\n      valueFormat = propTypeFormat(value);\n    }\n\n    return '' + key + (value.reactDesc && value.reactDesc.required ? '' : '?') + ': ' + valueFormat;\n  });\n  return '{' + props.join(',') + '}';\n};\n\nvar propTypeFormat = function propTypeFormat(propType, joinWith) {\n  var result = void 0;\n\n  if (Array.isArray(propType)) {\n    result = arrayFormat(propType).join(joinWith);\n  } else if (typeof propType !== 'function' && propType.type) {\n    switch (propType.type) {\n      case 'array':\n        result = 'any[]';\n        break;\n\n      case 'arrayOf':\n        if (propType.args.type === 'oneOfType') {\n          result = '(' + propTypeFormat(propType.args, ' | ') + ')[]';\n        } else {\n          result = propTypeFormat(propType.args, '\\n') + '[]';\n        }\n\n        break;\n\n      case 'bool':\n        result = 'boolean';\n        break;\n\n      case 'func':\n        result = '((...args: any[]) => any)';\n        break;\n\n      case 'node':\n        result = 'React.ReactNode';\n        break;\n\n      case 'element':\n        result = 'JSX.Element';\n        break;\n\n      case 'instanceOf':\n        result = 'any';\n        break;\n\n      case 'symbol':\n        result = 'any';\n        break;\n\n      case 'objectOf':\n        result = '{ [key: string]: ' + propTypeFormat(propType.args) + ' }';\n        break;\n\n      case 'oneOf':\n        result = propType.args.map(function (a) {\n          return '\"' + a + '\"';\n        }).join(' | ');\n        break;\n\n      case 'oneOfType':\n        result = '' + propTypeFormat(propType.args, ' | ');\n        break;\n\n      case 'shape':\n        result = '' + shapeFormat(propType.args);\n        break;\n\n      default:\n        result = '' + propType.type;\n        break;\n    }\n  } else {\n    result = 'any';\n  }\n\n  return result;\n};\n\nvar propTypeAsTypescript = function propTypeAsTypescript(propType, propName) {\n  var documentation = _extends({}, propType.reactDesc, {\n    name: propName\n  });\n\n  documentation.format = propTypeFormat(propType);\n  return documentation;\n};\n\nfunction descToTypescript(component) {\n  var reactDesc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!component) {\n    throw new Error('react-desc: component is required');\n  }\n\n  var documentation = _extends({\n    name: component.displayName || component.name\n  }, reactDesc);\n\n  if (reactDesc) {\n    delete documentation.propTypes;\n\n    if (reactDesc.propTypes) {\n      var propTypes = [];\n      Object.keys(reactDesc.propTypes).forEach(function (propName) {\n        var propType = reactDesc.propTypes[propName];\n        propTypes.push(propTypeAsTypescript(propType, propName));\n      });\n\n      if (propTypes.length > 0) {\n        documentation.properties = propTypes;\n      }\n    }\n  }\n\n  return documentation;\n}","map":null,"metadata":{},"sourceType":"script"}