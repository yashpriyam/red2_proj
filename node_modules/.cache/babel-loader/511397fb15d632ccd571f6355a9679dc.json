{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = descToJSON;\n\nvar arrayFormat = function arrayFormat(array, prefix) {\n  return array.map(function (propType) {\n    return propTypeFormat(propType, prefix);\n  });\n};\n\nvar shapeFormat = function shapeFormat(shape, prefix) {\n  var props = Object.keys(shape).map(function (key) {\n    var value = shape[key];\n    var valueFormat = void 0;\n\n    if (value.type && (value.type === 'arrayOf' || value.type === 'oneOfType' || value.type === 'oneOf') && Array.isArray(value.args)) {\n      valueFormat = '\\n' + propTypeFormat(value, prefix + '    ');\n    } else if (value.type === 'shape') {\n      valueFormat = '\\n' + propTypeFormat(value, prefix + '    ');\n    } else {\n      valueFormat = propTypeFormat(value);\n    }\n\n    return prefix + '  ' + key + ': ' + valueFormat;\n  });\n  return prefix + '{\\n' + props.join(',\\n') + '\\n' + prefix + '}';\n};\n\nvar propTypeFormat = function propTypeFormat(propType) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var result = void 0;\n\n  if (propType.type) {\n    switch (propType.type) {\n      case 'arrayOf':\n        if (Array.isArray(propType.args)) {\n          result = prefix + '[\\n' + arrayFormat(propType.args, prefix + '  ').join('\\n') + '\\n' + prefix + ']';\n        } else if (propType.args.type === 'oneOfType') {\n          result = prefix + '[\\n' + propTypeFormat(propType.args, prefix + '  ') + '\\n' + prefix + ']';\n        } else {\n          result = prefix + '[' + propTypeFormat(propType.args) + ']';\n        }\n\n        break;\n\n      case 'bool':\n        result = prefix + 'boolean';\n        break;\n\n      case 'func':\n        result = prefix + 'function';\n        break;\n\n      case 'instanceOf':\n        result = prefix + 'new ' + propType.args.name + '(...)';\n        break;\n\n      case 'objectOf':\n        result = prefix + '{ test: ' + propType.args.type + ', ... }';\n        break;\n\n      case 'oneOf':\n        result = propType.args.map(function (a) {\n          return '' + prefix + a;\n        }).join('\\n');\n        break;\n\n      case 'oneOfType':\n        if (Array.isArray(propType.args)) {\n          result = arrayFormat(propType.args, prefix).join('\\n');\n        } else {\n          result = '' + prefix + propTypeFormat(propType.args);\n        }\n\n        break;\n\n      case 'shape':\n        result = '' + shapeFormat(propType.args, prefix);\n        break;\n\n      default:\n        result = '' + prefix + propType.type;\n        break;\n    }\n  } else {\n    result = prefix + 'custom';\n  }\n\n  return result;\n};\n\nvar propTypeAsJson = function propTypeAsJson(propType, propName, defaultValue) {\n  var documentation = _extends({}, propType.reactDesc, {\n    name: propName\n  });\n\n  if (defaultValue) {\n    documentation.defaultValue = defaultValue;\n  }\n\n  documentation.format = documentation.format || propTypeFormat(propType);\n  return documentation;\n};\n\nfunction descToJSON(component) {\n  var reactDesc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!component) {\n    throw new Error('react-desc: component is required');\n  }\n\n  var documentation = _extends({\n    name: component.displayName || component.name\n  }, reactDesc);\n\n  if (reactDesc) {\n    delete documentation.propTypes;\n\n    if (reactDesc.propTypes) {\n      var propTypes = [];\n      Object.keys(reactDesc.propTypes).forEach(function (propName) {\n        var propType = reactDesc.propTypes[propName];\n        propTypes.push(propTypeAsJson(propType, propName, (component.defaultProps || {})[propName]));\n      });\n\n      if (propTypes.length > 0) {\n        documentation.properties = propTypes;\n      }\n    }\n  }\n\n  return documentation;\n}","map":null,"metadata":{},"sourceType":"script"}