{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(Carousel) {\n  var DocumentedCarousel = describe(Carousel).availableAt(getAvailableAtBadge('Carousel')).description(\"A carousel that cycles through children. Child components\\n      would typically be Images. It is the caller's responsibility to ensure\\n      that all children are the same size.\").usage(\"import { Carousel } from 'grommet';\\n<Carousel />\").intrinsicElement('div');\n  DocumentedCarousel.propTypes = _extends({}, genericProps, {\n    fill: PropTypes.bool.description(\"Whether to expand to fill\\n      all of the available width and height in the parent container.\"),\n    play: PropTypes.number.description(\"If specified, the number of\\n      milliseconds between automatically transitioning to the next child. It\\n      will loop through all children indefinitely.\"),\n    initialChild: PropTypes.number.description(\"If specified, the index of\\n      the first element to be shown. Defaults to 0.\"),\n    controls: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['arrows', 'selectors'])]).description(\"Whether to show carousel controls and which type of controls.\").defaultValue(true)\n  });\n  return DocumentedCarousel;\n};\nexport var themeDoc = _extends({\n  'carousel.icons.next': {\n    description: 'The icon to use for the next image navigation control.',\n    type: 'element',\n    defaultValue: '<Next />'\n  },\n  'carousel.animation.duration': {\n    description: 'The duration of the Carousel animation.',\n    type: 'number',\n    defaultValue: 1000\n  },\n  'carousel.icons.previous': {\n    description: 'The icon to use for the previous image navigation control.',\n    type: 'element',\n    defaultValue: '<Previous />'\n  },\n  'carousel.icons.current': {\n    description: \"The icon to use on the middle navigation control. \\n      One icon per carousel image.\",\n    type: 'element',\n    defaultValue: '<Next />'\n  },\n  'carousel.icons.color': {\n    description: 'The color used for Carousel icons.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: undefined\n  },\n  'carousel.disabled.icons.color': {\n    description: 'The color used for disabled Carousel icons.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: undefined\n  }\n}, themeDocUtils.iconColor, {}, themeDocUtils.edgeStyle('The possible sizes for margin.'));","map":null,"metadata":{},"sourceType":"module"}