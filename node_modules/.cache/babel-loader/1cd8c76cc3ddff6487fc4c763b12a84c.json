{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { getNewContainer } from '../../utils';\nimport { LayerContainer } from './LayerContainer';\nimport { animationDuration } from './StyledLayer';\nvar Layer = forwardRef(function (props, ref) {\n  var animate = props.animate,\n      animation = props.animation;\n\n  var _useState = useState(),\n      originalFocusedElement = _useState[0],\n      setOriginalFocusedElement = _useState[1];\n\n  useEffect(function () {\n    return setOriginalFocusedElement(document.activeElement);\n  }, []);\n\n  var _useState2 = useState(),\n      layerContainer = _useState2[0],\n      setLayerContainer = _useState2[1];\n\n  useEffect(function () {\n    return setLayerContainer(getNewContainer());\n  }, []); // just a few things to clean up when the Layer is unmounted\n\n  useEffect(function () {\n    return function () {\n      if (originalFocusedElement) {\n        if (originalFocusedElement.focus) {\n          // wait for the fixed positioning to come back to normal\n          // see layer styling for reference\n          setTimeout(function () {\n            return originalFocusedElement.focus();\n          }, 0);\n        } else if (originalFocusedElement.parentNode && originalFocusedElement.parentNode.focus) {\n          // required for IE11 and Edge\n          originalFocusedElement.parentNode.focus();\n        }\n      }\n\n      if (layerContainer) {\n        var activeAnimation = animation !== undefined ? animation : animate;\n\n        if (activeAnimation !== false) {\n          // undefined uses 'slide' as the default\n          // animate out and remove later\n          var layerClone = layerContainer.cloneNode(true);\n          layerClone.id = 'layerClone';\n          document.body.appendChild(layerClone);\n          var clonedContainer = layerClone.querySelector('[class*=\"StyledLayer__StyledContainer\"]');\n\n          if (clonedContainer && clonedContainer.style) {\n            clonedContainer.style.animationDirection = 'reverse';\n          }\n\n          setTimeout(function () {\n            // we add the id and query here so the unit tests work\n            var clone = document.getElementById('layerClone');\n\n            if (clone) {\n              document.body.removeChild(clone);\n              layerContainer.remove();\n            }\n          }, animationDuration);\n        } else {\n          document.body.removeChild(layerContainer);\n        }\n      }\n    };\n  }, [animate, animation, layerContainer, originalFocusedElement]);\n  return layerContainer ? createPortal(React.createElement(LayerContainer, _extends({\n    ref: ref\n  }, props)), layerContainer) : null;\n});\nLayer.displayName = 'Layer';\nvar LayerDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  LayerDoc = require('./doc').doc(Layer); // eslint-disable-line global-require\n}\n\nvar LayerWrapper = LayerDoc || Layer;\nexport { LayerWrapper as Layer };","map":null,"metadata":{},"sourceType":"module"}