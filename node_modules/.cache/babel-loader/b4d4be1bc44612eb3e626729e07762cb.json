{"ast":null,"code":"import styled, { css } from 'styled-components';\nimport { activeStyle, backgroundStyle, disabledStyle, focusStyle, genericStyles, getHoverIndicatorStyle, normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\n\nvar radiusStyle = function radiusStyle(props) {\n  // border.radius shouldn't impact an only-icon rendering.\n  var isIconOnly = props.hasIcon && !props.hasLabel;\n  var size = props.sizeProp;\n\n  if (!isIconOnly && size && props.theme.button.size && props.theme.button.size[size]) {\n    return props.theme.button.size[size].border.radius;\n  }\n\n  return props.theme.button.border.radius;\n};\n\nvar fontStyle = function fontStyle(props) {\n  var size = props.sizeProp || 'medium';\n  var data = props.theme.text[size];\n  return css([\"font-size:\", \";line-height:\", \";\"], data.size, data.height);\n};\n\nvar padStyle = function padStyle(props) {\n  var size = props.sizeProp;\n\n  if (size && props.theme.button.size && props.theme.button.size[size]) {\n    return css([\"\", \" \", \"\"], props.theme.button.size[size].pad.vertical, props.theme.button.size[size].pad.horizontal);\n  }\n\n  return css([\"\", \" \", \"\"], props.theme.button.padding.vertical, props.theme.button.padding.horizontal);\n};\n\nvar basicStyle = function basicStyle(props) {\n  return css([\"border:\", \" solid \", \";border-radius:\", \";color:\", \";padding:\", \";\", \"\"], props.theme.button.border.width, normalizeColor(props.colorValue || props.theme.button.border.color || 'control', props.theme), radiusStyle(props), normalizeColor(props.theme.button.color || 'text', props.theme), padStyle(props), fontStyle(props));\n};\n\nvar primaryStyle = function primaryStyle(props) {\n  return css([\"\", \" border-radius:\", \";\"], backgroundStyle(normalizeColor(props.colorValue || props.theme.button.primary.color || 'control', props.theme), props.theme, props.theme.button.color), radiusStyle(props));\n};\n\nfunction getHoverColor(props) {\n  if (props.colorValue) {\n    return normalizeColor(props.colorValue, props.theme);\n  }\n\n  return normalizeColor(props.theme.button.border.color || 'control', props.theme);\n}\n\nvar hoverStyle = css([\"&:hover{\", \" \", \";}\"], function (props) {\n  return props.hoverIndicator && getHoverIndicatorStyle(props.hoverIndicator, props.theme);\n}, function (props) {\n  return !props.plain && css([\"box-shadow:0px 0px 0px 2px \", \";\"], getHoverColor(props));\n});\n\nvar fillStyle = function fillStyle(fillContainer) {\n  if (fillContainer === 'horizontal') {\n    return 'width: 100%;';\n  }\n\n  if (fillContainer === 'vertical') {\n    return 'height: 100%;';\n  }\n\n  if (fillContainer) {\n    return \"\\n      width: 100%;\\n      height: 100%;\\n      max-width: none;\\n      flex: 1 0 auto;\\n    \";\n  }\n\n  return undefined;\n};\n\nvar plainStyle = function plainStyle(props) {\n  return css([\"color:\", \";border:none;padding:0;text-align:inherit;\"], normalizeColor(props.colorValue || 'inherit', props.theme));\n}; // Deprecate props.theme.button.disabled.opacity in V3\n\n\nvar StyledButton = styled.button.withConfig({\n  displayName: \"StyledButton\",\n  componentId: \"sc-323bzc-0\"\n})([\"display:inline-block;box-sizing:border-box;cursor:pointer;outline:none;font:inherit;text-decoration:none;margin:0;background:transparent;overflow:visible;text-transform:none;\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"\"], genericStyles, function (props) {\n  return props.plain && plainStyle(props);\n}, function (props) {\n  return !props.plain && basicStyle(props);\n}, function (props) {\n  return props.primary && primaryStyle(props);\n}, function (props) {\n  return !props.disabled && !props.focus && hoverStyle;\n}, function (props) {\n  return !props.disabled && props.active && activeStyle;\n}, function (props) {\n  return props.disabled && props.theme.button && disabledStyle(props.theme.button.disabled && props.theme.button.disabled.opacity);\n}, function (props) {\n  return props.focus && (!props.plain || props.focusIndicator) && focusStyle;\n}, function (props) {\n  return !props.plain && props.theme.button.transition && \"\\n    transition-property: \" + props.theme.button.transition.properties.join(',') + \";\\n    transition-duration: \" + props.theme.button.transition.duration + \"s;\\n    transition-timing-function: \" + props.theme.button.transition.timing + \";\\n  \";\n}, function (props) {\n  return props.fillContainer && fillStyle(props.fillContainer);\n}, function (props) {\n  return props.hasIcon && !props.hasLabel && \"\\n    line-height: 0;\\n  \";\n}, function (props) {\n  return props.pad && props.hasIcon && !props.hasLabel && \"\\n    padding: \" + props.theme.global.edgeSize.small + \";\\n  \";\n}, function (props) {\n  return props.theme.button && props.theme.button.extend;\n});\nStyledButton.defaultProps = {};\nObject.setPrototypeOf(StyledButton.defaultProps, defaultProps);\nexport { StyledButton };","map":null,"metadata":{},"sourceType":"module"}