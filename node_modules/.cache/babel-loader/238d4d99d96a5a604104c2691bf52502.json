{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Children, forwardRef, useContext, useMemo, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { backgroundIsDark } from '../../utils';\nimport { Keyboard } from '../Keyboard';\nimport { StyledBox, StyledBoxGap } from './StyledBox';\nvar Box = forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      background = _ref.background,\n      border = _ref.border,\n      children = _ref.children,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === void 0 ? 'column' : _ref$direction,\n      elevation = _ref.elevation,\n      fill = _ref.fill,\n      gap = _ref.gap,\n      _onBlur = _ref.onBlur,\n      onClick = _ref.onClick,\n      _onFocus = _ref.onFocus,\n      overflow = _ref.overflow,\n      _ref$responsive = _ref.responsive,\n      responsive = _ref$responsive === void 0 ? true : _ref$responsive,\n      tag = _ref.tag,\n      as = _ref.as,\n      wrap = _ref.wrap,\n      width = _ref.width,\n      height = _ref.height,\n      tabIndex = _ref.tabIndex,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"a11yTitle\", \"background\", \"border\", \"children\", \"direction\", \"elevation\", \"fill\", \"gap\", \"onBlur\", \"onClick\", \"onFocus\", \"overflow\", \"responsive\", \"tag\", \"as\", \"wrap\", \"width\", \"height\", \"tabIndex\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var focusable = useMemo(function () {\n    return onClick && !(tabIndex < 0);\n  }, [onClick, tabIndex]);\n\n  var _useState = useState(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var clickProps = useMemo(function () {\n    if (focusable) {\n      return {\n        onClick: onClick,\n        onFocus: function onFocus(event) {\n          setFocus(true);\n          if (_onFocus) _onFocus(event);\n        },\n        onBlur: function onBlur(event) {\n          setFocus(false);\n          if (_onBlur) _onBlur(event);\n        }\n      };\n    }\n\n    var result = {};\n    if (_onBlur) result.onBlur = _onBlur;\n    if (onClick) result.onClick = onClick;\n    if (_onFocus) result.onFocus = _onFocus;\n    return result;\n  }, [focusable, onClick, _onFocus, _onBlur]);\n  var adjustedTabIndex = useMemo(function () {\n    if (tabIndex !== undefined) return tabIndex;\n    if (focusable) return 0;\n    return undefined;\n  }, [focusable, tabIndex]);\n\n  if ((border === 'between' || border && border.side === 'between') && !gap) {\n    console.warn('Box must have a gap to use border between');\n  }\n\n  var contents = children;\n\n  if (gap) {\n    contents = [];\n    var firstIndex;\n    Children.forEach(children, function (child, index) {\n      if (child) {\n        if (firstIndex === undefined) {\n          firstIndex = index;\n        } else {\n          contents.push(React.createElement(StyledBoxGap // eslint-disable-next-line react/no-array-index-key\n          , {\n            key: \"gap-\" + index,\n            gap: gap,\n            directionProp: direction,\n            responsive: responsive,\n            border: border\n          }));\n        }\n      }\n\n      contents.push(child);\n    });\n  }\n\n  if (background || theme.darkChanged) {\n    var dark = backgroundIsDark(background, theme);\n    var darkChanged = dark !== undefined && dark !== theme.dark;\n\n    if (darkChanged || theme.darkChanged) {\n      dark = dark === undefined ? theme.dark : dark;\n      contents = React.createElement(ThemeContext.Provider, {\n        value: _extends({}, theme, {\n          dark: dark\n        })\n      }, contents);\n    }\n  }\n\n  var content = React.createElement(StyledBox, _extends({\n    as: !as && tag ? tag : as,\n    \"aria-label\": a11yTitle,\n    background: background,\n    border: border,\n    ref: ref,\n    directionProp: direction,\n    elevationProp: elevation,\n    fillProp: fill,\n    focus: focus,\n    overflowProp: overflow,\n    wrapProp: wrap,\n    widthProp: width,\n    heightProp: height,\n    responsive: responsive,\n    tabIndex: adjustedTabIndex\n  }, clickProps, rest), contents);\n\n  if (onClick) {\n    content = React.createElement(Keyboard, {\n      onEnter: onClick\n    }, content);\n  }\n\n  return content;\n});\nBox.displayName = 'Box';\nvar BoxDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  BoxDoc = require('./doc').doc(Box); // eslint-disable-line global-require\n}\n\nvar BoxWrapper = BoxDoc || Box;\nexport { BoxWrapper as Box };","map":null,"metadata":{},"sourceType":"module"}