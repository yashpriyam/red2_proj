{"ast":null,"code":"import { normalizeColor } from '../../utils';\nexport var strokeProps = function strokeProps(color, theme) {\n  var result = {};\n\n  if (color) {\n    if (typeof color === 'object') {\n      result.stroke = normalizeColor(color.color, theme);\n\n      if (color.opacity) {\n        result.strokeOpacity = \"\" + (color.opacity === true ? theme.global.opacity.medium : theme.global.opacity[color.opacity] || color.opacity);\n      }\n    } else {\n      result.stroke = normalizeColor(color, theme);\n    }\n  }\n\n  return result;\n};\nvar neutralExp = /^neutral-\\d+/;\nexport var defaultColor = function defaultColor(index, theme, valuesLength) {\n  if (index === valuesLength - 1 && theme.meter.color) {\n    return theme.meter.color;\n  } // We want the last value to have the first color\n\n\n  var colorIndex = valuesLength - index - 1;\n\n  if (theme.meter && theme.meter.colors) {\n    var _colors = theme.meter.colors[theme.dark ? 'dark' : 'light'] || theme.meter.colors;\n\n    return _colors[colorIndex % _colors.length];\n  }\n\n  var colors = Object.keys(theme.global.colors).filter(function (n) {\n    return n.match(/^graph-[0-9]$/);\n  });\n\n  if (colors.length > 0) {\n    return colors[colorIndex % colors.length];\n  } // Deprecate using \"neutral-*\" color names. Remove eventually.\n\n\n  var neutralColors = Object.keys(theme.global.colors).filter(function (k) {\n    return neutralExp.test(k);\n  });\n  return neutralColors[colorIndex % neutralColors.length];\n};","map":null,"metadata":{},"sourceType":"module"}