{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(DropButton) {\n  var DocumentedDropButton = describe(DropButton).availableAt(getAvailableAtBadge('DropButton')).description(\"A Button that controls a Drop. When opened, the Drop will contain\\n      whatever is specified via `dropContent`. The Drop will control the focus\\n      so that the contents behind it are not focusable. All properties and \\n      theme properties of Button or Drop can be passed through.\\n      \").usage(\"import { DropButton } from 'grommet';\\n<DropButton dropContent={...} />\").intrinsicElement('button');\n  DocumentedDropButton.propTypes = _extends({}, genericProps, {\n    disabled: PropTypes.bool.description('Whether the button should be disabled.').defaultValue(false),\n    dropAlign: PropTypes.shape({\n      top: PropTypes.oneOf(['top', 'bottom']),\n      bottom: PropTypes.oneOf(['top', 'bottom']),\n      right: PropTypes.oneOf(['left', 'right']),\n      left: PropTypes.oneOf(['left', 'right'])\n    }).description('How to align the drop with respect to the button.').defaultValue({\n      top: 'top',\n      left: 'left'\n    }),\n    dropContent: PropTypes.element.description('Content to put inside the Drop.').isRequired,\n    dropTarget: PropTypes.object.description(\"Target where the drop will be aligned to. This should be\\n      a React reference. Typically, this is not required as the drop will be\\n      aligned to the DropButton itself by default.\"),\n    dropProps: PropTypes.object.description('Any valid Drop prop.'),\n    onClose: PropTypes.func.description('Callback for when the drop is closed'),\n    onOpen: PropTypes.func.description('Callback for when the drop is opened'),\n    open: PropTypes.bool.description(\"Whether the drop should be open or not. Setting this property does not\\n      influence user interaction after it has been rendered.\").defaultValue(false)\n  });\n  return DocumentedDropButton;\n};","map":null,"metadata":{},"sourceType":"module"}