{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { Analog } from './Analog';\nimport { Digital } from './Digital';\nvar TIME_REGEXP = /T([0-9]{2}):([0-9]{2})(?::([0-9.,]{2,}))?/;\nvar DURATION_REGEXP = /^(-|\\+)?P.*T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?$/;\n\nvar parseTime = function parseTime(time, hourLimit) {\n  var result = {};\n\n  if (time) {\n    var match = DURATION_REGEXP.exec(time);\n\n    if (match) {\n      result.hours = parseFloat(match[2]);\n\n      if (hourLimit === 12) {\n        result.hours12 = result.hours > 12 ? result.hours - 12 : result.hours;\n      }\n\n      result.minutes = parseFloat(match[3]) || 0;\n      result.seconds = parseFloat(match[4]) || 0;\n      result.duration = true;\n    } else {\n      match = TIME_REGEXP.exec(time);\n\n      if (match) {\n        result.hours = parseFloat(match[1]);\n\n        if (hourLimit === 12) {\n          result.hours12 = result.hours > 12 ? result.hours - 12 : result.hours;\n        }\n\n        result.minutes = parseFloat(match[2]) || 0;\n        result.seconds = parseFloat(match[3]) || 0;\n      } else {\n        console.error(\"Grommet Clock cannot parse '\" + time + \"'\");\n      }\n    }\n  } else {\n    var date = new Date();\n    result.hours = date.getHours();\n    result.minutes = date.getMinutes();\n    result.seconds = date.getSeconds();\n  }\n\n  return result;\n};\n\nvar Clock = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Clock, _Component);\n\n  function Clock() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    return _this;\n  }\n\n  Clock.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var hourLimit = nextProps.hourLimit,\n        time = nextProps.time;\n    var elements = prevState.elements;\n\n    if (!elements || time) {\n      var nextElements = parseTime(time, hourLimit);\n\n      if (!elements) {\n        return {\n          elements: nextElements\n        };\n      }\n\n      if (Object.keys(nextElements).some(function (k) {\n        return elements[k] !== nextElements[k];\n      })) {\n        return {\n          elements: nextElements\n        };\n      }\n    }\n\n    return null;\n  };\n\n  var _proto = Clock.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var run = this.props.run;\n\n    if (run) {\n      this.run();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var run = this.props.run;\n\n    if (run && !prevProps.run) {\n      this.run();\n    } else if (!run && prevProps.run) {\n      clearInterval(this.timer);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearInterval(this.timer);\n  };\n\n  _proto.run = function run() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        hourLimit = _this$props.hourLimit,\n        onChange = _this$props.onChange,\n        precision = _this$props.precision,\n        run = _this$props.run;\n    var elements = this.state.elements; // set the interval time based on the precision\n\n    var interval = 1000;\n    var increment = 'seconds';\n\n    if (precision !== 'seconds' && elements.seconds === 0) {\n      interval *= 60;\n      increment = 'minutes';\n\n      if (precision !== 'minutes' && elements.minutes === 0) {\n        interval *= 60;\n        increment = 'hours';\n      }\n    }\n\n    clearInterval(this.timer);\n    this.timer = setInterval(function () {\n      var previousElements = _this2.state.elements;\n\n      var nextElements = _extends({}, previousElements); // adjust time based on precision\n\n\n      if (increment === 'seconds') {\n        if (run === 'backward') {\n          nextElements.seconds -= 1;\n        } else {\n          nextElements.seconds += 1;\n        }\n      } else if (increment === 'minutes') {\n        if (run === 'backward') {\n          nextElements.minutes -= 1;\n        } else {\n          nextElements.minutes += 1;\n        }\n      } else if (increment === 'hours') {\n        if (run === 'backward') {\n          nextElements.hours -= 1;\n        } else {\n          nextElements.hours += 1;\n        }\n      } // deal with overflows\n\n\n      if (nextElements.seconds >= 60) {\n        nextElements.minutes += Math.floor(nextElements.seconds / 60);\n        nextElements.seconds = 0;\n      } else if (nextElements.seconds < 0) {\n        nextElements.minutes += Math.floor(nextElements.seconds / 60);\n        nextElements.seconds = 59;\n      }\n\n      if (nextElements.minutes >= 60) {\n        nextElements.hours += Math.floor(nextElements.minutes / 60);\n        nextElements.minutes = 0;\n      } else if (nextElements.minutes < 0) {\n        nextElements.hours += Math.floor(nextElements.minutes / 60);\n        nextElements.minutes = 59;\n      }\n\n      if (nextElements.hours >= 24 || nextElements.hours < 0) {\n        nextElements.hours = 0;\n      }\n\n      if (hourLimit === 12) {\n        nextElements.hours12 = nextElements.hours > 12 ? nextElements.hours - 12 : nextElements.hours;\n      }\n\n      _this2.setState({\n        elements: nextElements\n      }, function () {\n        if (onChange) {\n          var e2 = _this2.state.elements;\n\n          if (elements.duration) {\n            onChange(\"P\" + e2.hours + \"H\" + e2.minutes + \"M\" + e2.seconds + \"S\");\n          } else {\n            onChange(\"T\" + e2.hours + \":\" + e2.minutes + \":\" + e2.seconds);\n          }\n        }\n      });\n    }, interval);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        type = _this$props2.type,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"type\"]);\n\n    var elements = this.state.elements;\n    var content;\n\n    if (type === 'analog') {\n      content = React.createElement(Analog, _extends({\n        elements: elements\n      }, rest));\n    } else if (type === 'digital') {\n      content = React.createElement(Digital, _extends({\n        elements: elements\n      }, rest));\n    }\n\n    return content;\n  };\n\n  return Clock;\n}(Component);\n\n_defineProperty(Clock, \"defaultProps\", {\n  hourLimit: 24,\n  precision: 'seconds',\n  run: 'forward',\n  size: 'medium',\n  type: 'analog'\n});\n\nvar ClockDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  ClockDoc = require('./doc').doc(Clock); // eslint-disable-line global-require\n}\n\nvar ClockWrapper = ClockDoc || Clock;\nexport { ClockWrapper as Clock };","map":null,"metadata":{},"sourceType":"module"}