{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Children, cloneElement, forwardRef, useContext, useEffect, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { parseMetricToNum } from '../../utils';\nimport { Box } from '../Box';\nimport { CheckBox } from '../CheckBox';\nimport { RadioButtonGroup } from '../RadioButtonGroup';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\nimport { FormContext } from '../Form/FormContext';\nvar grommetInputNames = ['TextInput', 'Select', 'MaskedInput', 'TextArea'];\nvar grommetInputPadNames = ['CheckBox', 'RadioButtonGroup', 'RangeInput'];\n\nvar isGrommetInput = function isGrommetInput(comp) {\n  return comp && (grommetInputNames.indexOf(comp.displayName) !== -1 || grommetInputPadNames.indexOf(comp.displayName) !== -1);\n};\n\nvar FormFieldBox = styled(Box).withConfig({\n  displayName: \"FormField__FormFieldBox\",\n  componentId: \"m9hood-0\"\n})([\"\", \"\"], function (props) {\n  return props.theme.formField && props.theme.formField.extend;\n});\n\nvar Message = function Message(_ref) {\n  var message = _ref.message,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"message\"]);\n\n  if (message) {\n    if (typeof message === 'string') return React.createElement(Text, rest, message);\n    return React.createElement(Box, rest, message);\n  }\n\n  return null;\n};\n\nvar FormField = forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n      className = _ref2.className,\n      component = _ref2.component,\n      disabled = _ref2.disabled,\n      error = _ref2.error,\n      help = _ref2.help,\n      htmlFor = _ref2.htmlFor,\n      info = _ref2.info,\n      label = _ref2.label,\n      margin = _ref2.margin,\n      name = _ref2.name,\n      _onBlur = _ref2.onBlur,\n      _onFocus = _ref2.onFocus,\n      pad = _ref2.pad,\n      required = _ref2.required,\n      style = _ref2.style,\n      validate = _ref2.validate,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"children\", \"className\", \"component\", \"disabled\", \"error\", \"help\", \"htmlFor\", \"info\", \"label\", \"margin\", \"name\", \"onBlur\", \"onFocus\", \"pad\", \"required\", \"style\", \"validate\"]);\n\n  var theme = useContext(ThemeContext);\n  var context = useContext(FormContext);\n  useEffect(function () {\n    if (context && context.addValidation) {\n      var addValidation = context.addValidation,\n          messages = context.messages,\n          removeValidation = context.removeValidation;\n\n      var validateSingle = function validateSingle(aValidate, value2, data) {\n        var result;\n\n        if (typeof aValidate === 'function') {\n          result = aValidate(value2, data);\n        } else if (validate.regexp) {\n          if (!validate.regexp.test(value2)) {\n            result = validate.message || messages.invalid;\n\n            if (validate.status) {\n              result = {\n                message: error,\n                status: validate.status\n              };\n            }\n          }\n        }\n\n        return result;\n      };\n\n      var validateField = function validateField(value2, data) {\n        var result;\n\n        if (required && ( // false is for CheckBox\n        value2 === undefined || value2 === '' || value2 === false)) {\n          result = messages.required;\n        } else if (validate) {\n          if (Array.isArray(validate)) {\n            validate.some(function (aValidate) {\n              result = validateSingle(aValidate, value2, data);\n              return !!result;\n            });\n          } else {\n            result = validateSingle(validate, value2, data);\n          }\n        }\n\n        return result;\n      };\n\n      if (validate || required) {\n        addValidation(name, validateField);\n        return function () {\n          return removeValidation(name, validateField);\n        };\n      }\n\n      removeValidation(name, validateField);\n    }\n\n    return undefined;\n  }, [context, error, name, required, validate]);\n\n  var _useState = useState(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var renderInput = function renderInput(formValue, invalid) {\n    var Input = component || TextInput;\n\n    if (Input === CheckBox) {\n      return React.createElement(Input, _extends({\n        name: name,\n        label: label,\n        disabled: disabled,\n        \"aria-invalid\": invalid || undefined\n      }, rest));\n    }\n\n    return React.createElement(Input, _extends({\n      name: name,\n      value: !isGrommetInput(component) ? formValue[name] : undefined,\n      disabled: disabled,\n      plain: true,\n      focusIndicator: false,\n      \"aria-invalid\": invalid || undefined\n    }, rest, {\n      onChange: // Grommet input components already check for FormContext\n      // and, using their `name`, end up calling the context.update()\n      // already. For custom components, we expect they will call\n      // this onChange() and we'll call context.update() here, primarily\n      // for backwards compatibility.\n      isGrommetInput(component) ? rest.onChange : function (event) {\n        context.update(name, event.target.value);\n        if (rest.onChange) rest.onChange(event);\n      }\n    }));\n  };\n\n  var formField = theme.formField;\n  var border = formField.border; // This is here for backwards compatibility. In case the child is a grommet\n  // input component, set plain and focusIndicator props, if they aren't\n  // already set.\n\n  var wantContentPad = component && (component === CheckBox || component === RadioButtonGroup);\n  var contents = border && children && Children.map(children, function (child) {\n    if (child && child.type && grommetInputPadNames.indexOf(child.type.displayName) !== -1) {\n      wantContentPad = true;\n    }\n\n    if (child && child.type && grommetInputNames.indexOf(child.type.displayName) !== -1 && child.props.plain === undefined && child.props.focusIndicator === undefined) {\n      return cloneElement(child, {\n        plain: true,\n        focusIndicator: false\n      });\n    }\n\n    return child;\n  }) || children;\n  var normalizedError = error;\n  var normalizedInfo = info;\n  var onFieldBlur; // put rest on container, unless we use renderInput()\n\n  var containerRest = rest;\n\n  if (context && context.addValidation) {\n    var errors = context.errors,\n        infos = context.infos,\n        onContextBlur = context.onBlur,\n        formValue = context.value;\n    normalizedError = error || errors[name];\n    normalizedInfo = info || infos[name];\n    if (!contents) containerRest = {};\n    contents = contents || renderInput(formValue, !!normalizedError);\n\n    if (onContextBlur) {\n      onFieldBlur = function onFieldBlur() {\n        return onContextBlur(name);\n      };\n    }\n  }\n\n  var contentProps = pad || wantContentPad ? _extends({}, formField.content) : {};\n\n  if (border.position === 'inner') {\n    if (normalizedError && formField.error) {\n      contentProps.background = formField.error.background;\n    } else if (disabled && formField.disabled) {\n      contentProps.background = formField.disabled.background;\n    }\n  }\n\n  contents = React.createElement(Box, contentProps, contents);\n  var borderColor;\n\n  if (focus && !normalizedError) {\n    borderColor = 'focus';\n  } else if (normalizedError) {\n    borderColor = border && border.error.color || 'status-critical';\n  } else {\n    borderColor = border && border.color || 'border';\n  }\n\n  var abut;\n  var abutMargin;\n  var outerStyle = style;\n\n  if (border) {\n    contents = React.createElement(Box, {\n      border: border.position === 'inner' ? _extends({}, border, {\n        side: border.side || 'bottom',\n        color: borderColor\n      }) : undefined,\n      round: border.position === 'inner' ? formField.round : undefined\n    }, contents);\n    var mergedMargin = margin || formField.margin;\n    abut = border.position === 'outer' && (border.side === 'all' || border.side === 'horizontal' || !border.side) && !(mergedMargin && (typeof mergedMargin === 'string' && mergedMargin !== 'none' || mergedMargin.bottom && mergedMargin.bottom !== 'none' || mergedMargin.horizontal && mergedMargin.horizontal !== 'none'));\n\n    if (abut) {\n      // marginBottom is set to overlap adjacent fields\n      abutMargin = {\n        bottom: '-1px'\n      };\n\n      if (margin) {\n        abutMargin = margin;\n      } else if (border.size) {\n        // if the user defines a margin,\n        // then the default margin below will be overriden\n        abutMargin = {\n          bottom: \"-\" + parseMetricToNum(theme.global.borderSize[border.size] || border.size) + \"px\"\n        };\n      }\n\n      outerStyle = _extends({\n        position: focus ? 'relative' : undefined,\n        zIndex: focus ? 10 : undefined\n      }, style);\n    }\n  }\n\n  var outerBackground;\n\n  if (border.position === 'outer') {\n    if (normalizedError && formField.error) {\n      outerBackground = formField.error.background;\n    } else if (disabled && formField.disabled) {\n      outerBackground = formField.disabled.background;\n    }\n  }\n\n  return React.createElement(FormFieldBox, _extends({\n    ref: ref,\n    className: className,\n    border: border && border.position === 'outer' ? _extends({}, border, {\n      color: borderColor\n    }) : undefined,\n    background: outerBackground,\n    margin: abut ? abutMargin : margin || _extends({}, formField.margin),\n    round: border.position === 'outer' ? formField.round : undefined,\n    style: outerStyle,\n    onFocus: function onFocus(event) {\n      setFocus(true);\n      if (_onFocus) _onFocus(event);\n    },\n    onBlur: function onBlur(event) {\n      setFocus(false);\n      if (onFieldBlur) onFieldBlur(event);\n      if (_onBlur) _onBlur(event);\n    }\n  }, containerRest), label && component !== CheckBox || help ? React.createElement(React.Fragment, null, label && component !== CheckBox && React.createElement(Text, _extends({\n    as: \"label\",\n    htmlFor: htmlFor\n  }, formField.label), label), React.createElement(Message, _extends({\n    message: help\n  }, formField.help))) : undefined, contents, React.createElement(Message, _extends({\n    message: normalizedError\n  }, formField.error)), React.createElement(Message, _extends({\n    message: normalizedInfo\n  }, formField.info)));\n});\nFormField.displayName = 'FormField';\nvar FormFieldDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  FormFieldDoc = require('./doc').doc(FormField);\n}\n\nvar FormFieldWrapper = FormFieldDoc || FormField;\nexport { FormFieldWrapper as FormField };","map":null,"metadata":{},"sourceType":"module"}