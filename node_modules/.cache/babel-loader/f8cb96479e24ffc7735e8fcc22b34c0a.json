{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, isValidElement, useContext, useMemo, useState, useRef, useEffect } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { controlBorderStyle, normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { DropButton } from '../DropButton';\nimport { Keyboard } from '../Keyboard';\nimport { FormContext } from '../Form/FormContext';\nimport { TextInput } from '../TextInput';\nimport { SelectContainer } from './SelectContainer';\nvar SelectTextInput = styled(TextInput).withConfig({\n  displayName: \"Select__SelectTextInput\",\n  componentId: \"sc-17idtfo-0\"\n})([\"cursor:pointer;\"]);\nvar StyledSelectDropButton = styled(DropButton).withConfig({\n  displayName: \"Select__StyledSelectDropButton\",\n  componentId: \"sc-17idtfo-1\"\n})([\"\", \";\", \";\", \";\"], function (props) {\n  return !props.plain && controlBorderStyle;\n}, function (props) {\n  return props.theme.select && props.theme.select.control && props.theme.select.control.extend;\n}, function (props) {\n  return props.open && props.theme.select.control.open;\n});\nStyledSelectDropButton.defaultProps = {};\nObject.setPrototypeOf(StyledSelectDropButton.defaultProps, defaultProps);\nvar Select = forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      alignSelf = _ref.alignSelf,\n      children = _ref.children,\n      _ref$closeOnChange = _ref.closeOnChange,\n      closeOnChange = _ref$closeOnChange === void 0 ? true : _ref$closeOnChange,\n      disabled = _ref.disabled,\n      disabledKey = _ref.disabledKey,\n      _ref$dropAlign = _ref.dropAlign,\n      dropAlign = _ref$dropAlign === void 0 ? {\n    top: 'bottom',\n    left: 'left'\n  } : _ref$dropAlign,\n      dropHeight = _ref.dropHeight,\n      dropProps = _ref.dropProps,\n      dropTarget = _ref.dropTarget,\n      emptySearchMessage = _ref.emptySearchMessage,\n      focusIndicator = _ref.focusIndicator,\n      gridArea = _ref.gridArea,\n      id = _ref.id,\n      icon = _ref.icon,\n      labelKey = _ref.labelKey,\n      margin = _ref.margin,\n      _ref$messages = _ref.messages,\n      messages = _ref$messages === void 0 ? {\n    multiple: 'multiple'\n  } : _ref$messages,\n      multiple = _ref.multiple,\n      name = _ref.name,\n      onChange = _ref.onChange,\n      onClose = _ref.onClose,\n      onKeyDown = _ref.onKeyDown,\n      onMore = _ref.onMore,\n      onOpen = _ref.onOpen,\n      onSearch = _ref.onSearch,\n      propOpen = _ref.open,\n      options = _ref.options,\n      placeholder = _ref.placeholder,\n      plain = _ref.plain,\n      replace = _ref.replace,\n      searchPlaceholder = _ref.searchPlaceholder,\n      selected = _ref.selected,\n      size = _ref.size,\n      valueProp = _ref.value,\n      valueKey = _ref.valueKey,\n      valueLabel = _ref.valueLabel,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"a11yTitle\", \"alignSelf\", \"children\", \"closeOnChange\", \"disabled\", \"disabledKey\", \"dropAlign\", \"dropHeight\", \"dropProps\", \"dropTarget\", \"emptySearchMessage\", \"focusIndicator\", \"gridArea\", \"id\", \"icon\", \"labelKey\", \"margin\", \"messages\", \"multiple\", \"name\", \"onChange\", \"onClose\", \"onKeyDown\", \"onMore\", \"onOpen\", \"onSearch\", \"open\", \"options\", \"placeholder\", \"plain\", \"replace\", \"searchPlaceholder\", \"selected\", \"size\", \"value\", \"valueKey\", \"valueLabel\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var inputRef = useRef();\n  var formContext = useContext(FormContext); // normalize the value prop to not be objects\n\n  var normalizedValueProp = useMemo(function () {\n    if (Array.isArray(valueProp)) {\n      if (valueProp.length === 0) return valueProp;\n\n      if (typeof valueProp[0] === 'object' && valueKey) {\n        return valueProp.map(function (v) {\n          return v[valueKey];\n        });\n      }\n\n      return valueProp;\n    }\n\n    if (typeof valueProp === 'object' && valueKey) return valueProp[valueKey];\n    return valueProp;\n  }, [valueKey, valueProp]);\n\n  var _formContext$useFormC = formContext.useFormContext(name, normalizedValueProp, ''),\n      value = _formContext$useFormC[0],\n      setValue = _formContext$useFormC[1]; // track which options are present in the value\n\n\n  var valueOptions = useMemo(function () {\n    return options.filter(function (option, index) {\n      if (selected !== undefined) {\n        if (Array.isArray(selected)) return selected.indexOf(index) !== -1;\n        return index === selected;\n      }\n\n      if (typeof option === 'object' && valueKey) {\n        if (Array.isArray(value)) {\n          return value.indexOf(option[valueKey]) !== -1;\n        }\n\n        return option[valueKey] === value;\n      }\n\n      if (Array.isArray(value)) {\n        return value.indexOf(option) !== -1;\n      }\n\n      return option === value;\n    });\n  }, [options, selected, value, valueKey]);\n\n  var _useState = useState(propOpen),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  useEffect(function () {\n    return setOpen(propOpen);\n  }, [propOpen]);\n\n  var onRequestOpen = function onRequestOpen() {\n    setOpen(true);\n    if (onOpen) onOpen();\n  };\n\n  var onRequestClose = function onRequestClose() {\n    setOpen(false);\n    if (onClose) onClose();\n  };\n\n  var onSelectChange = function onSelectChange(event, _ref2) {\n    var option = _ref2.option,\n        nextValue = _ref2.value,\n        nextSelected = _ref2.selected;\n    if (closeOnChange) onRequestClose();\n    setValue(nextValue);\n\n    if (onChange) {\n      event.persist();\n      var adjustedEvent = event;\n      adjustedEvent.target = inputRef.current;\n      adjustedEvent.value = nextValue;\n      adjustedEvent.option = option;\n      adjustedEvent.selected = nextSelected;\n      onChange(adjustedEvent);\n    }\n  };\n\n  var SelectIcon;\n\n  switch (icon) {\n    case false:\n      break;\n\n    case true:\n    case undefined:\n      SelectIcon = theme.select.icons.down;\n      break;\n\n    default:\n      SelectIcon = icon;\n  } // element to show, trumps inputValue\n\n\n  var selectValue = useMemo(function () {\n    if (valueLabel) return valueLabel;\n    if (React.isValidElement(value)) return value;\n    return undefined;\n  }, [value, valueLabel]); // text to show\n\n  var inputValue = useMemo(function () {\n    if (!selectValue) {\n      if (Array.isArray(valueOptions)) {\n        if (valueOptions.length === 0) return '';\n\n        if (valueOptions.length === 1) {\n          var valueOption = valueOptions[0];\n\n          if (typeof valueOption === 'object' && labelKey) {\n            if (typeof labelKey === 'function') {\n              return labelKey(valueOption);\n            }\n\n            return valueOption[labelKey];\n          }\n\n          return valueOption;\n        }\n\n        return messages.multiple;\n      }\n\n      if (typeof valueOptions === 'object' && labelKey) {\n        if (typeof labelKey === 'function') {\n          return labelKey(valueOptions);\n        }\n\n        return valueOptions[labelKey];\n      }\n\n      if (valueOptions !== undefined) return valueOptions;\n      return '';\n    }\n\n    return undefined;\n  }, [labelKey, messages, selectValue, valueOptions]); // const dark = theme.select.background\n  // ? colorIsDark(theme.select.background)\n  // : theme.dark;\n\n  var iconColor = normalizeColor(theme.select.icons.color || 'control', theme);\n  return React.createElement(Keyboard, {\n    onDown: onRequestOpen,\n    onUp: onRequestOpen\n  }, React.createElement(StyledSelectDropButton, {\n    ref: ref,\n    id: id,\n    disabled: disabled === true || undefined,\n    dropAlign: dropAlign,\n    dropTarget: dropTarget,\n    open: open,\n    alignSelf: alignSelf,\n    focusIndicator: focusIndicator,\n    gridArea: gridArea,\n    margin: margin,\n    onOpen: onRequestOpen,\n    onClose: onRequestClose,\n    dropContent: React.createElement(SelectContainer, {\n      disabled: disabled,\n      disabledKey: disabledKey,\n      dropHeight: dropHeight,\n      emptySearchMessage: emptySearchMessage,\n      id: id,\n      labelKey: labelKey,\n      multiple: multiple,\n      name: name,\n      onChange: onSelectChange,\n      onKeyDown: onKeyDown,\n      onMore: onMore,\n      onSearch: onSearch,\n      options: options,\n      replace: replace,\n      searchPlaceholder: searchPlaceholder,\n      selected: selected,\n      value: value,\n      valueKey: valueKey\n    }, children),\n    plain: plain,\n    dropProps: dropProps,\n    theme: theme\n  }, React.createElement(Box, {\n    align: \"center\",\n    direction: \"row\",\n    justify: \"between\",\n    background: theme.select.background\n  }, React.createElement(Box, {\n    direction: \"row\",\n    flex: true,\n    basis: \"auto\"\n  }, selectValue || React.createElement(SelectTextInput, _extends({\n    a11yTitle: a11yTitle && \"\" + a11yTitle + (typeof value === 'string' ? \", \" + value : ''),\n    id: id ? id + \"__input\" : undefined,\n    name: name,\n    ref: inputRef\n  }, rest, {\n    tabIndex: \"-1\",\n    type: \"text\",\n    placeholder: placeholder,\n    plain: true,\n    readOnly: true,\n    value: inputValue,\n    size: size,\n    theme: theme,\n    onClick: disabled === true ? undefined : onRequestOpen\n  }))), SelectIcon && React.createElement(Box, {\n    margin: theme.select.icons.margin,\n    flex: false,\n    style: {\n      minWidth: 'auto'\n    }\n  }, isValidElement(SelectIcon) ? SelectIcon : React.createElement(SelectIcon, {\n    color: iconColor,\n    size: size\n  })))));\n});\nSelect.defaultProps = _extends({}, defaultProps);\nSelect.displayName = 'Select';\nvar SelectDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  SelectDoc = require('./doc').doc(Select);\n}\n\nvar SelectWrapper = SelectDoc || Select;\nexport { SelectWrapper as Select };","map":null,"metadata":{},"sourceType":"module"}