{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Header } from './Header';\nimport { Footer } from './Footer';\nimport { Body } from './Body';\nimport { GroupedBody } from './GroupedBody';\nimport { buildFooterValues, buildGroups, buildGroupState, filterAndSortData, initializeFilters, normalizePrimaryProperty } from './buildState';\nimport { StyledDataTable } from './StyledDataTable';\nvar contexts = ['header', 'body', 'footer'];\n\nvar normalizeProp = function normalizeProp(prop, context) {\n  if (prop) {\n    if (prop[context]) return prop[context];\n    if (contexts.some(function (c) {\n      return prop[c];\n    })) return undefined;\n    return prop;\n  }\n\n  return undefined;\n};\n\nvar DataTable = function DataTable(_ref) {\n  var background = _ref.background,\n      border = _ref.border,\n      _ref$columns = _ref.columns,\n      columns = _ref$columns === void 0 ? [] : _ref$columns,\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? [] : _ref$data,\n      groupBy = _ref.groupBy,\n      onClickRow = _ref.onClickRow,\n      onMore = _ref.onMore,\n      onSearch = _ref.onSearch,\n      onSortProp = _ref.onSort,\n      replace = _ref.replace,\n      pad = _ref.pad,\n      primaryKey = _ref.primaryKey,\n      resizeable = _ref.resizeable,\n      rowProps = _ref.rowProps,\n      size = _ref.size,\n      sortProp = _ref.sort,\n      sortable = _ref.sortable,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? 50 : _ref$step,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"background\", \"border\", \"columns\", \"data\", \"groupBy\", \"onClickRow\", \"onMore\", \"onSearch\", \"onSort\", \"replace\", \"pad\", \"primaryKey\", \"resizeable\", \"rowProps\", \"size\", \"sort\", \"sortable\", \"step\"]); // property name of the primary property\n\n\n  var primaryProperty = useMemo(function () {\n    return normalizePrimaryProperty(columns, primaryKey);\n  }, [columns, primaryKey]); // whether or not we should show a footer\n\n  var showFooter = useMemo(function () {\n    return columns.filter(function (c) {\n      return c.footer;\n    }).length > 0;\n  }, [columns]); // what column we are actively capturing filter input on\n\n  var _useState = useState(),\n      filtering = _useState[0],\n      setFiltering = _useState[1]; // the currently active filters\n\n\n  var _useState2 = useState(initializeFilters(columns)),\n      filters = _useState2[0],\n      setFilters = _useState2[1]; // which column we are sorting on, with direction\n\n\n  var _useState3 = useState(sortProp || {}),\n      sort = _useState3[0],\n      setSort = _useState3[1]; // the data filtered and sorted, if needed\n\n\n  var adjustedData = useMemo(function () {\n    return filterAndSortData(data, filters, onSearch, sort);\n  }, [data, filters, onSearch, sort]); // the values to put in the footer cells\n\n  var footerValues = useMemo(function () {\n    return buildFooterValues(columns, adjustedData);\n  }, [adjustedData, columns]); // if groupBy, an array with one item per unique groupBy key value\n\n  var groups = useMemo(function () {\n    return buildGroups(columns, adjustedData, groupBy);\n  }, [adjustedData, columns, groupBy]); // an object indicating which group values are expanded\n\n  var _useState4 = useState(buildGroupState(groups, groupBy)),\n      groupState = _useState4[0],\n      setGroupState = _useState4[1]; // any customized column widths\n\n\n  var _useState5 = useState({}),\n      widths = _useState5[0],\n      setWidths = _useState5[1]; // remember that we are filtering on this property\n\n\n  var onFiltering = function onFiltering(property) {\n    return setFiltering(property);\n  }; // remember the search text we should filter this property by\n\n\n  var onFilter = function onFilter(property, value) {\n    var nextFilters = _extends({}, filters);\n\n    nextFilters[property] = value;\n    setFilters(nextFilters); // Let caller know about search, if interested\n\n    if (onSearch) onSearch(nextFilters);\n  }; // toggle the sort direction on this property\n\n\n  var onSort = function onSort(property) {\n    return function () {\n      var direction;\n      if (!sort || property !== sort.property) direction = 'asc';else if (sort.direction === 'asc') direction = 'desc';else direction = 'asc';\n      var nextSort = {\n        property: property,\n        direction: direction\n      };\n      setSort(nextSort);\n      if (onSortProp) onSortProp(nextSort);\n    };\n  }; // toggle whether the group is expanded\n\n\n  var onToggleGroup = function onToggleGroup(groupValue) {\n    return function () {\n      var nextGroupState = _extends({}, groupState);\n\n      nextGroupState[groupValue] = _extends({}, nextGroupState[groupValue], {\n        expanded: !nextGroupState[groupValue].expanded\n      });\n      setGroupState(nextGroupState);\n\n      if (groupBy.onExpand) {\n        var expandedKeys = Object.keys(nextGroupState).filter(function (k) {\n          return nextGroupState[k].expanded;\n        });\n        groupBy.onExpand(expandedKeys);\n      }\n    };\n  }; // toggle whether all groups are expanded\n\n\n  var onToggleGroups = function onToggleGroups() {\n    var expanded = Object.keys(groupState).filter(function (k) {\n      return !groupState[k].expanded;\n    }).length === 0;\n    var nextGroupState = {};\n    Object.keys(groupState).forEach(function (k) {\n      nextGroupState[k] = _extends({}, groupState[k], {\n        expanded: !expanded\n      });\n    });\n    setGroupState(nextGroupState);\n\n    if (groupBy.onExpand) {\n      var expandedKeys = Object.keys(nextGroupState).filter(function (k) {\n        return nextGroupState[k].expanded;\n      });\n      groupBy.onExpand(expandedKeys);\n    }\n  }; // remember the width this property's column should be\n\n\n  var onResize = useCallback(function (property, width) {\n    if (widths[property] !== width) {\n      var nextWidths = _extends({}, widths);\n\n      nextWidths[property] = width;\n      setWidths(nextWidths);\n    }\n  }, [widths]);\n\n  if (size && resizeable) {\n    console.warn('DataTable cannot combine \"size\" and \"resizeble\".');\n  }\n\n  return React.createElement(StyledDataTable, rest, React.createElement(Header, {\n    background: normalizeProp(background, 'header'),\n    border: normalizeProp(border, 'header'),\n    columns: columns,\n    filtering: filtering,\n    filters: filters,\n    groups: groups,\n    groupState: groupState,\n    pad: normalizeProp(pad, 'header'),\n    size: size,\n    sort: sort,\n    widths: widths,\n    onFiltering: onFiltering,\n    onFilter: onFilter,\n    onResize: resizeable ? onResize : undefined,\n    onSort: sortable || sortProp || onSortProp ? onSort : undefined,\n    onToggle: onToggleGroups\n  }), groups ? React.createElement(GroupedBody, {\n    background: normalizeProp(background, 'body'),\n    border: normalizeProp(border, 'body'),\n    columns: columns,\n    groupBy: groupBy.property ? groupBy.property : groupBy,\n    groups: groups,\n    groupState: groupState,\n    pad: normalizeProp(pad, 'body'),\n    primaryProperty: primaryProperty,\n    onToggle: onToggleGroup,\n    size: size\n  }) : React.createElement(Body, {\n    background: normalizeProp(background, 'body'),\n    border: normalizeProp(border, 'body'),\n    columns: columns,\n    data: adjustedData,\n    onMore: onMore,\n    replace: replace,\n    onClickRow: onClickRow,\n    pad: normalizeProp(pad, 'body'),\n    primaryProperty: primaryProperty,\n    rowProps: rowProps,\n    size: size,\n    step: step\n  }), showFooter && React.createElement(Footer, {\n    background: normalizeProp(background, 'footer'),\n    border: normalizeProp(border, 'footer'),\n    columns: columns,\n    footerValues: footerValues,\n    groups: groups,\n    pad: normalizeProp(pad, 'footer'),\n    primaryProperty: primaryProperty,\n    size: size\n  }));\n};\n\nvar DataTableDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  DataTableDoc = require('./doc').doc(DataTable);\n}\n\nvar DataTableWrapper = DataTableDoc || DataTable;\nexport { DataTableWrapper as DataTable };","map":null,"metadata":{},"sourceType":"module"}