{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Image) {\n  var DocumentedImage = describe(Image).availableAt(getAvailableAtBadge('Image')).description('An image.').usage(\"import { Image } from 'grommet';\\n<Image/>\").intrinsicElement('img');\n  DocumentedImage.propTypes = _extends({}, genericProps, {\n    fill: PropTypes.oneOfType([PropTypes.oneOf(['horizontal', 'vertical']), PropTypes.bool]).description('Whether the width and/or height should fill the container.'),\n    fit: PropTypes.oneOf(['cover', 'contain']).description('How the image fills its container.'),\n    fallback: PropTypes.string.description(\"Specifies the URL of the fallback image used when \\n      src is failing to load\"),\n    opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.string, PropTypes.bool]).description('Transparency of the image.')\n  });\n  return DocumentedImage;\n};\nexport var themeDoc = {\n  'global.opacity.medium': {\n    description: 'The value used when opacity is set to true.',\n    type: 'number',\n    defaultValue: '0.4'\n  },\n  'image.extend': {\n    description: 'Any additional style for the Image.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};","map":null,"metadata":{},"sourceType":"module"}