{"ast":null,"code":"function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { createRef, Component } from 'react';\nimport { compose } from 'recompose';\nimport styled, { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\n\nvar animatedBoxProperty = function animatedBoxProperty(direction) {\n  return direction === 'horizontal' ? 'width' : 'height';\n};\n\nvar AnimatedBox = styled(Box).withConfig({\n  displayName: \"Collapsible__AnimatedBox\",\n  componentId: \"sc-15kniua-0\"\n})([\"\", \";\"], function (props) {\n  return !props.animate && (props.open ? \"\\n    max-\" + animatedBoxProperty(props.collapsibleDirection) + \": unset;\\n    visibility: visible;\\n  \" : \"\\n    max-\" + animatedBoxProperty(props.collapsibleDirection) + \": 0;\\n    visibility: hidden;\\n    overflow: hidden;\\n  \");\n});\n\nvar Collapsible = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Collapsible, _Component);\n\n  Collapsible.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var open = nextProps.open;\n\n    if (open !== prevState.open) {\n      return {\n        animate: true,\n        open: open\n      };\n    }\n\n    return null;\n  };\n\n  function Collapsible(props, context) {\n    var _this;\n\n    _this = _Component.call(this, props, context) || this;\n    /* eslint-disable-next-line react/prop-types */\n\n    _defineProperty(_assertThisInitialized(_this), \"ref\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getSnapshotBeforeUpdate\", function () {\n      return _this.ref.current && _this.ref.current.getBoundingClientRect();\n    });\n\n    _this.state = {\n      open: props.open,\n      animate: false\n    };\n    return _this;\n  }\n\n  var _proto = Collapsible.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState, snapshot) {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        direction = _this$props.direction,\n        _this$props$theme$col = _this$props.theme.collapsible,\n        minSpeed = _this$props$theme$col.minSpeed,\n        baseline = _this$props$theme$col.baseline;\n    var _this$state = this.state,\n        animate = _this$state.animate,\n        open = _this$state.open;\n    var container = this.ref.current;\n\n    if (container) {\n      var dimension = animatedBoxProperty(direction);\n      var boudingClientRect = container.getBoundingClientRect();\n      var dimensionSize = boudingClientRect[dimension];\n      var shouldAnimate = animate && prevState.open !== open;\n\n      if (open && snapshot[dimension] && dimensionSize !== snapshot[dimension]) {\n        shouldAnimate = true;\n      }\n\n      if (shouldAnimate) {\n        if (this.animationTimeout) {\n          clearTimeout(this.animationTimeout);\n        }\n\n        var speed = Math.max(dimensionSize / baseline * minSpeed, minSpeed);\n        container.style[\"max-\" + dimension] = snapshot[dimension] + \"px\";\n        container.style.overflow = 'hidden';\n        requestAnimationFrame(function () {\n          requestAnimationFrame(function () {\n            // eslint-disable-next-line max-len\n            container.style.transition = \"max-\" + dimension + \" \" + speed + \"ms, visibility 50ms\";\n            container.style[\"max-\" + dimension] = open ? dimensionSize + \"px\" : '0px';\n            _this2.animationTimeout = setTimeout(function () {\n              container.removeAttribute('style');\n\n              _this2.setState({\n                animate: false\n              });\n            }, speed);\n          });\n        });\n      }\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.animationTimeout) {\n      clearTimeout(this.animationTimeout);\n    }\n  };\n\n  _proto.render = function render() {\n    /* eslint-disable-next-line react/prop-types */\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        direction = _this$props2.direction;\n    var _this$state2 = this.state,\n        animate = _this$state2.animate,\n        open = _this$state2.open;\n    return React.createElement(AnimatedBox, {\n      \"aria-hidden\": !open,\n      ref: this.ref,\n      open: open,\n      animate: animate,\n      collapsibleDirection: direction\n    }, children);\n  };\n\n  return Collapsible;\n}(Component);\n\nCollapsible.defaultProps = {};\nObject.setPrototypeOf(Collapsible.defaultProps, defaultProps);\nvar CollapsibleDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  CollapsibleDoc = require('./doc').doc(Collapsible);\n}\n\nvar CollapsibleWrapper = compose(withTheme)(CollapsibleDoc || Collapsible);\nexport { CollapsibleWrapper as Collapsible };","map":null,"metadata":{},"sourceType":"module"}