{"ast":null,"code":"// This file contains helper functions for DataTable, to keep the component\n// files simpler.\n// get the value for the property in the datum object\nexport var datumValue = function datumValue(datum, property) {\n  if (!property) return undefined;\n  var parts = property.split('.');\n\n  if (parts.length === 1) {\n    return datum[property];\n  }\n\n  if (!datum[parts[0]]) {\n    return undefined;\n  }\n\n  return datumValue(datum[parts[0]], parts.slice(1).join('.'));\n}; // get the primary property name\n\nexport var normalizePrimaryProperty = function normalizePrimaryProperty(columns, primaryKey) {\n  var result;\n  columns.forEach(function (column) {\n    // remember the first key property\n    if (column.primary && !result) {\n      result = column.property;\n    }\n  });\n\n  if (!result) {\n    if (primaryKey === false) result = undefined;else if (primaryKey) result = primaryKey;else if (columns.length > 0) result = columns[0].property;\n  }\n\n  return result;\n}; // initialize filters with empty strings\n\nexport var initializeFilters = function initializeFilters(columns) {\n  var result = {};\n  columns.forEach(function (column) {\n    if (column.search) {\n      result[column.property] = '';\n    }\n  });\n  return result;\n}; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n\nvar escapeRegExp = function escapeRegExp(input) {\n  return input.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}; // filter data based on filters then sort\n\n\nexport var filterAndSortData = function filterAndSortData(data, filters, onSearch, sort) {\n  var result = data;\n\n  if (!onSearch) {\n    var regexps = {};\n    Object.keys(filters).filter(function (n) {\n      return filters[n];\n    }).forEach(function (n) {\n      regexps[n] = new RegExp(escapeRegExp(filters[n]), 'i');\n    });\n\n    if (Object.keys(regexps).length > 0) {\n      result = data.filter(function (datum) {\n        return !Object.keys(regexps).some(function (property) {\n          return !regexps[property].test(datumValue(datum, property));\n        });\n      });\n    }\n  }\n\n  if (sort) {\n    var property = sort.property,\n        direction = sort.direction;\n    result = result === data ? [].concat(data) : result; // don't sort caller's data\n\n    var before = direction === 'asc' ? 1 : -1;\n    var after = direction === 'asc' ? -1 : 1;\n    result.sort(function (d1, d2) {\n      if (d1[property] > d2[property]) return before;\n      if (d1[property] < d2[property]) return after;\n      return 0;\n    });\n  }\n\n  return result;\n}; // aggregate reducers\n\nvar sumReducer = function sumReducer(accumulated, next) {\n  return accumulated + next;\n};\n\nvar minReducer = function minReducer(accumulated, next) {\n  return accumulated === undefined ? next : Math.min(accumulated, next);\n};\n\nvar maxReducer = function maxReducer(accumulated, next) {\n  return accumulated === undefined ? next : Math.max(accumulated, next);\n};\n\nvar reducers = {\n  max: maxReducer,\n  min: minReducer,\n  sum: sumReducer\n}; // aggregate a single column\n\nvar aggregateColumn = function aggregateColumn(column, data) {\n  var value;\n\n  if (column.aggregate === 'avg') {\n    value = data.map(function (d) {\n      return datumValue(d, column.property);\n    }).reduce(sumReducer);\n    value /= data.length;\n  } else {\n    value = data.map(function (d) {\n      return datumValue(d, column.property);\n    }).reduce(reducers[column.aggregate], 0);\n  }\n\n  return value;\n}; // aggregate all columns that can\n\n\nvar aggregate = function aggregate(columns, data) {\n  var result = {};\n  columns.forEach(function (column) {\n    if (column.aggregate) {\n      result[column.property] = aggregateColumn(column, data);\n    }\n  });\n  return result;\n}; // build the values for the footer cells\n\n\nexport var buildFooterValues = function buildFooterValues(columns, data) {\n  var aggregateValues = aggregate(columns, data);\n  var result = {};\n  columns.forEach(function (column) {\n    if (column.footer) {\n      if (typeof column.footer === 'string') {\n        result[column.property] = column.footer;\n      } else if (column.footer.aggregate) {\n        result[column.property] = aggregateValues[column.property];\n      }\n    }\n  });\n  return result;\n}; // looks at the groupBy property of each data object and returns an\n// array with one item for each unique value of that property.\n\nexport var buildGroups = function buildGroups(columns, data, groupBy) {\n  var result;\n\n  if (groupBy) {\n    result = [];\n    var groupMap = {};\n    data.forEach(function (datum) {\n      var groupByProperty = groupBy.property ? groupBy.property : groupBy;\n      var groupValue = datumValue(datum, groupByProperty);\n\n      if (!groupMap[groupValue]) {\n        var group = {\n          data: [],\n          datum: {},\n          key: groupValue\n        };\n        group.datum[groupByProperty] = groupValue;\n        result.push(group);\n        groupMap[groupValue] = group;\n      }\n\n      groupMap[groupValue].data.push(datum);\n    }); // include any aggregate column values across the data for each group\n\n    columns.forEach(function (column) {\n      if (column.aggregate) {\n        result.forEach(function (group) {\n          var datum = group.datum;\n          datum[column.property] = aggregateColumn(column, group.data);\n        });\n      }\n    });\n  }\n\n  return result;\n}; // build group expanded state, expanding any in groupBy.expand\n\nexport var buildGroupState = function buildGroupState(groups, groupBy) {\n  var result = {};\n\n  if (groups) {\n    groups.forEach(function (_ref) {\n      var key = _ref.key;\n      result[key] = {\n        expanded: false\n      };\n    });\n  }\n\n  if (groupBy && groupBy.expand) {\n    groupBy.expand.forEach(function (value) {\n      result[value] = {\n        expanded: true\n      };\n    });\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}