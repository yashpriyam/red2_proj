{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Meter) {\n  var DocumentedMeter = describe(Meter).availableAt(getAvailableAtBadge('Meter')).description('A graphical meter.').usage(\"import { Meter } from 'grommet';\\n<Meter />\"); // We don't include svg due to a collision on the values property\n  // .intrinsicElement('svg');\n\n  DocumentedMeter.propTypes = _extends({}, genericProps, {\n    background: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      color: PropTypes.string,\n      opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.number, PropTypes.bool])\n    })]).description('Background color').defaultValue({\n      color: 'light-2',\n      opacity: 'medium'\n    }),\n    max: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The maximum value for the Meter.'),\n    round: PropTypes.bool.description('Whether to round the line ends').defaultValue(false),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'full']), PropTypes.string]).description('The size of the Meter.').defaultValue('medium'),\n    thickness: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the Meter.').defaultValue('medium'),\n    type: PropTypes.oneOf(['bar', 'circle']).description('The visual type of meter.').defaultValue('bar'),\n    values: PropTypes.arrayOf(PropTypes.shape({\n      color: PropTypes.string,\n      highlight: PropTypes.bool,\n      label: PropTypes.string.isRequired,\n      // for accessibility\n      onClick: PropTypes.func,\n      onHover: PropTypes.func,\n      value: PropTypes.number.isRequired\n    })).description(\"Array of value objects describing the data.\\n      'value' is the actual numeric value.\\n      'label' is a text string describing it.\\n      'color' indicates the color name to use. If not specified a default one\\n      will be chosen.\\n      'onClick' will be called when the user clicks on it.\\n      Set 'highlight' to call attention to it.\\n      'onHover' will be called with a boolean argument indicating when the\\n      user hovers onto or away from it.\")\n  });\n  return DocumentedMeter;\n};\nexport var themeDoc = {\n  'global.colors': {\n    description: 'Color options.',\n    type: 'object',\n    defaultValue: \"{\\n      \\\"accent-1\\\": \\\"#6FFFB0\\\",\\n      \\\"graph-0\\\": \\\"accent-1\\\",\\n      ...\\n    }\"\n  },\n  'global.edgeSize': {\n    description: \"The border-radius of the styled Meter. thickness, height and \\n    width of the Bar Meter, height of the Circle Meter.\",\n    type: 'object',\n    defaultValue: \"{\\n        none: '0px',\\n        hair: '1px',\\n        xxsmall: '3px',\\n        xsmall: '6px',\\n        small: '12px',\\n        medium: '24px',\\n        large: '48px',\\n        xlarge: '96px',\\n        responsiveBreakpoint: 'small',\\n    }\"\n  },\n  'global.opacity.medium': {\n    description: 'The opacity value used on the Meter color.',\n    type: 'number',\n    defaultValue: '0.4'\n  },\n  'global.size': {\n    description: 'The possible sizes for Circle Meter width.',\n    type: 'object',\n    defaultValue: \"{\\n      xxsmall: '48px',\\n      xsmall: '96px',\\n      small: '192px',\\n      medium: '384px',\\n      large: '768px',\\n      xlarge: '1152px',\\n      xxlarge: '1536px',\\n      full: '100%',\\n    }\"\n  },\n  'meter.color': {\n    description: 'The color used for the Meter.',\n    type: 'string',\n    defaultValue: 'accent-1'\n  },\n  'meter.extend': {\n    description: 'Any additional style for Meter.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};","map":null,"metadata":{},"sourceType":"module"}