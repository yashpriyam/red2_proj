{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { StyledAvatar, StyledAvatarText } from './StyledAvatar';\n\nvar Avatar = function Avatar(_ref) {\n  var _ref$align = _ref.align,\n      align = _ref$align === void 0 ? 'center' : _ref$align,\n      children = _ref.children,\n      height = _ref.height,\n      _ref$justify = _ref.justify,\n      justify = _ref$justify === void 0 ? 'center' : _ref$justify,\n      _ref$round = _ref.round,\n      round = _ref$round === void 0 ? 'full' : _ref$round,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      src = _ref.src,\n      width = _ref.width,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"align\", \"children\", \"height\", \"justify\", \"round\", \"size\", \"src\", \"width\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var avatarSize = theme.avatar.size[size] || size;\n  var avatarProps = {\n    align: align,\n    height: avatarSize,\n    justify: justify,\n    overflow: 'hidden',\n    round: round,\n    width: avatarSize\n  };\n\n  var AvatarChildren = function AvatarChildren() {\n    return React.createElement(StyledAvatar, _extends({}, avatarProps, rest), children);\n  };\n\n  if (height || width) {\n    console.warn('Avatar should use `size` instead of `height` or `width` props');\n  }\n\n  if (typeof src === 'string') {\n    return React.createElement(StyledAvatar, _extends({}, avatarProps, rest, {\n      background: \"url(\" + src + \")\"\n    }));\n  }\n\n  if (typeof children === 'string') {\n    return React.createElement(StyledAvatar, _extends({}, avatarProps, rest), React.createElement(StyledAvatarText, {\n      alignSelf: \"center\",\n      size: \"large\"\n    }, children));\n  }\n\n  return React.createElement(AvatarChildren, null);\n};\n\nexport { Avatar };","map":null,"metadata":{},"sourceType":"module"}