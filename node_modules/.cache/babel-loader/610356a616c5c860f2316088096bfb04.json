{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useEffect, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { FocusedContainer } from '../FocusedContainer';\nimport { Keyboard } from '../Keyboard';\nimport { backgroundIsDark, findVisibleParent } from '../../utils';\nimport { StyledLayer, StyledContainer, StyledOverlay } from './StyledLayer';\nvar HiddenAnchor = styled.a.withConfig({\n  displayName: \"LayerContainer__HiddenAnchor\",\n  componentId: \"sc-1srj14c-0\"\n})([\"width:0;height:0;overflow:hidden;position:absolute;\"]);\nvar fullBounds = {\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0\n};\nvar LayerContainer = forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      _ref$full = _ref.full,\n      full = _ref$full === void 0 ? false : _ref$full,\n      id = _ref.id,\n      _ref$margin = _ref.margin,\n      margin = _ref$margin === void 0 ? 'none' : _ref$margin,\n      _ref$modal = _ref.modal,\n      modal = _ref$modal === void 0 ? true : _ref$modal,\n      onClickOutside = _ref.onClickOutside,\n      onEsc = _ref.onEsc,\n      plain = _ref.plain,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'center' : _ref$position,\n      _ref$responsive = _ref.responsive,\n      responsive = _ref$responsive === void 0 ? true : _ref$responsive,\n      layerTarget = _ref.target,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"children\", \"full\", \"id\", \"margin\", \"modal\", \"onClickOutside\", \"onEsc\", \"plain\", \"position\", \"responsive\", \"target\"]);\n\n  var theme = useContext(ThemeContext);\n\n  var _useState = useState(fullBounds),\n      targetBounds = _useState[0],\n      setTargetBounds = _useState[1];\n\n  var anchorRef = useRef();\n  var containerRef = useRef();\n  var layerRef = useRef();\n  useEffect(function () {\n    if (position !== 'hidden') {\n      var node = layerRef.current || containerRef.current || ref.current;\n      if (node && node.scrollIntoView) node.scrollIntoView(); // Once layer is open we make sure it has focus so that you\n      // can start tabbing inside the layer. If the caller put focus\n      // on an element already, we honor that. Otherwise, we put\n      // the focus in the hidden anchor.\n\n      var element = document.activeElement;\n\n      while (element) {\n        if (element === containerRef.current) {\n          // already have focus inside the container\n          break;\n        }\n\n        element = element.parentElement;\n      }\n\n      if (modal && !element && anchorRef.current) {\n        anchorRef.current.focus();\n      }\n    }\n  }, [modal, position, ref]);\n  useEffect(function () {\n    if (position !== 'hidden') {\n      var node = layerRef.current || containerRef.current || ref.current;\n      if (node && node.scrollIntoView) node.scrollIntoView();\n    }\n  }, [position, ref]);\n  useEffect(function () {\n    if (layerTarget) {\n      var updateBounds = function updateBounds() {\n        var rect = findVisibleParent(layerTarget).getBoundingClientRect();\n        setTargetBounds({\n          left: rect.left,\n          right: window.innerWidth - rect.right,\n          top: rect.top,\n          bottom: window.innerHeight - rect.bottom\n        });\n      };\n\n      updateBounds();\n      window.addEventListener('resize', updateBounds);\n      return function () {\n        return window.removeEventListener('resize', updateBounds);\n      };\n    }\n\n    setTargetBounds(fullBounds);\n    return undefined;\n  }, [layerTarget]);\n  var content = React.createElement(StyledContainer, _extends({\n    ref: ref || containerRef,\n    id: id,\n    full: full,\n    margin: margin,\n    modal: modal,\n    targetBounds: !modal ? targetBounds : fullBounds\n  }, rest, {\n    position: position,\n    plain: plain,\n    responsive: responsive,\n    dir: theme.dir\n  }), React.createElement(HiddenAnchor, {\n    ref: anchorRef,\n    tabIndex: \"-1\",\n    \"aria-hidden\": \"true\"\n  }), children);\n\n  if (modal) {\n    content = React.createElement(StyledLayer, {\n      ref: layerRef,\n      id: id,\n      targetBounds: targetBounds,\n      plain: plain,\n      position: position,\n      responsive: responsive,\n      tabIndex: \"-1\",\n      dir: theme.dir\n    }, React.createElement(StyledOverlay, {\n      plain: plain,\n      onMouseDown: onClickOutside,\n      responsive: responsive\n    }), content);\n  }\n\n  if (onEsc) {\n    content = React.createElement(Keyboard, {\n      onEsc: onEsc\n    }, content);\n  }\n\n  if (theme.layer.background) {\n    var dark = backgroundIsDark(theme.layer.background, theme);\n\n    if (dark !== undefined && dark !== theme.dark) {\n      content = React.createElement(ThemeContext.Provider, {\n        value: _extends({}, theme, {\n          dark: dark\n        })\n      }, content);\n    }\n  }\n\n  if (modal) {\n    content = React.createElement(FocusedContainer, {\n      hidden: position === 'hidden',\n      restrictScroll: true\n    }, content);\n  }\n\n  return content;\n});\nexport { LayerContainer };","map":null,"metadata":{},"sourceType":"module"}