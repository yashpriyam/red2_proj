{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Menu } from '../Menu';\nimport { Meter } from '../Meter';\nimport { Stack } from '../Stack';\nimport { Text } from '../Text';\nimport { withForwardRef } from '../hocs';\nimport { throttle } from '../../utils';\nimport { StyledVideo, StyledVideoContainer, StyledVideoControls, StyledVideoScrubber } from './StyledVideo'; // Split the volume control into 6 segments. Empirically determined.\n\nvar VOLUME_STEP = 0.166667;\n\nvar formatTime = function formatTime(time) {\n  var minutes = Math.round(time / 60);\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  var seconds = Math.round(time) % 60;\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  return minutes + \":\" + seconds;\n};\n\nvar videoEvents = ['onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onError', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting'];\n\nvar Video = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Video, _Component);\n\n  Video.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var forwardRef = nextProps.forwardRef;\n    var videoRef = prevState.videoRef;\n    var nextVideoRef = forwardRef || videoRef;\n\n    if (nextVideoRef !== videoRef) {\n      return {\n        videoRef: nextVideoRef\n      };\n    }\n\n    return null;\n  };\n\n  function Video(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      captions: [],\n      scrubberRef: React.createRef(),\n      videoRef: React.createRef()\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hasPlayed\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"injectUpdateVideoEvents\", function () {\n      return videoEvents.reduce(function (previousValue, currentValue) {\n        var nextValue = _extends({}, previousValue);\n\n        nextValue[currentValue] = function (e) {\n          if (currentValue in _this.props &&\n          /* eslint-disable react/destructuring-assignment */\n          typeof _this.props[currentValue] === 'function') {\n            _this.props[currentValue](e);\n            /* eslint-enable react/destructuring-assignment */\n\n          }\n\n          _this.update();\n        };\n\n        return nextValue;\n      }, {});\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"update\", function () {\n      var videoRef = _this.state.videoRef;\n      var video = videoRef.current; // Set flag for Video first play\n\n      if (!_this.hasPlayed && !video.paused && !video.loading || video.currentTime) {\n        _this.hasPlayed = true;\n      }\n\n      var interacting = _this.state.interacting;\n\n      if (video.ended) {\n        interacting = false;\n      }\n\n      _this.setState({\n        duration: video.duration,\n        currentTime: video.currentTime,\n        // buffered: video.buffered,\n        // paused: video.paused,\n        // muted: video.muted,\n        volume: video.volume,\n        // ended: video.ended,\n        // readyState: video.readyState,\n        interacting: interacting,\n        // computed values\n        // hasPlayed: this.hasPlayed,\n        playing: !video.paused && !video.loading,\n        // percentageBuffered: video.buffered.length &&\n        //   (video.buffered.end(video.buffered.length - 1) /\n        //   video.duration) * 100,\n        percentagePlayed: video.currentTime / video.duration * 100 // loading: video.readyState < video.HAVE_ENOUGH_DATA,\n\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"play\", function () {\n      var videoRef = _this.state.videoRef;\n      videoRef.current.play();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pause\", function () {\n      var videoRef = _this.state.videoRef;\n      videoRef.current.pause();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scrub\", function (event) {\n      var _this$state = _this.state,\n          duration = _this$state.duration,\n          scrubberRef = _this$state.scrubberRef;\n\n      if (scrubberRef.current) {\n        var scrubberRect = scrubberRef.current.getBoundingClientRect();\n        var percent = (event.clientX - scrubberRect.left) / scrubberRect.width;\n\n        _this.setState({\n          scrubTime: duration * percent\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"seek\", function (event) {\n      var _this$state2 = _this.state,\n          duration = _this$state2.duration,\n          scrubberRef = _this$state2.scrubberRef,\n          videoRef = _this$state2.videoRef;\n\n      if (scrubberRef.current) {\n        var scrubberRect = scrubberRef.current.getBoundingClientRect();\n        var percent = (event.clientX - scrubberRect.left) / scrubberRect.width;\n        videoRef.current.currentTime = duration * percent;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unmute\", function () {\n      var videoRef = _this.state.videoRef;\n\n      if (videoRef.current) {\n        videoRef.current.muted = false;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mute\", function () {\n      var videoRef = _this.state.videoRef;\n\n      if (videoRef.current) {\n        videoRef.current.muted = true;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"louder\", function () {\n      var videoRef = _this.state.videoRef;\n      videoRef.current.volume += VOLUME_STEP;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"quieter\", function () {\n      var videoRef = _this.state.videoRef;\n      videoRef.current.volume -= VOLUME_STEP;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showCaptions\", function (index) {\n      var videoRef = _this.state.videoRef;\n      var textTracks = videoRef.current.textTracks;\n\n      for (var i = 0; i < textTracks.length; i += 1) {\n        textTracks[i].mode = i === index ? 'showing' : 'hidden';\n      } // Using forceUpdate to force redraw of controls when changing captions\n\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fullscreen\", function () {\n      var videoRef = _this.state.videoRef;\n      var video = videoRef.current;\n\n      if (video.requestFullscreen) {\n        video.requestFullscreen();\n      } else if (video.msRequestFullscreen) {\n        video.msRequestFullscreen();\n      } else if (video.mozRequestFullScreen) {\n        video.mozRequestFullScreen();\n      } else if (video.webkitRequestFullscreen) {\n        video.webkitRequestFullscreen();\n      } else {\n        console.warn(\"Your browser doesn't support fullscreen.\");\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionStart\", function () {\n      _this.setState({\n        interacting: true\n      });\n\n      clearTimeout(_this.interactionTimer);\n      _this.interactionTimer = setTimeout(_this.interactionStop, 3000);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionStop\", function () {\n      var focus = _this.state.focus;\n\n      if (!focus && !_this.unmounted) {\n        _this.setState({\n          interacting: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"restate\", function () {\n      var _this$state3 = _this.state,\n          captions = _this$state3.captions,\n          height = _this$state3.height,\n          videoRef = _this$state3.videoRef,\n          width = _this$state3.width;\n      var video = videoRef.current;\n\n      if (video) {\n        if (video.videoHeight) {\n          // set the size based on the video aspect ratio\n          var rect = video.getBoundingClientRect();\n          var ratio = rect.width / rect.height;\n          var videoRatio = video.videoWidth / video.videoHeight;\n\n          if (videoRatio > ratio) {\n            var nextHeight = rect.width / videoRatio;\n\n            if (nextHeight !== height) {\n              _this.setState({\n                height: nextHeight,\n                width: undefined\n              });\n            }\n          } else {\n            var nextWidth = rect.height * videoRatio;\n\n            if (nextWidth !== width) {\n              _this.setState({\n                height: undefined,\n                width: nextWidth\n              });\n            }\n          }\n        } // remember the state of the text tracks for subsequent rendering\n\n\n        var textTracks = video.textTracks;\n\n        if (textTracks.length > 0) {\n          if (textTracks.length === 1) {\n            var active = textTracks[0].mode === 'showing';\n\n            if (!captions || !captions[0] || captions[0].active !== active) {\n              _this.setState({\n                captions: [{\n                  active: active\n                }]\n              });\n            }\n          } else {\n            var nextCaptions = [];\n            var set = false;\n\n            for (var i = 0; i < textTracks.length; i += 1) {\n              var track = textTracks[i];\n\n              var _active = track.mode === 'showing';\n\n              nextCaptions.push({\n                label: track.label,\n                active: _active\n              });\n\n              if (!captions || !captions[i] || captions[i].active !== _active) {\n                set = true;\n              }\n            }\n\n            if (set) {\n              _this.setState({\n                captions: nextCaptions\n              });\n            }\n          }\n        }\n      }\n    });\n\n    _this.update = throttle(_this.update, 100, _assertThisInitialized(_this));\n    _this.mediaEventProps = _this.injectUpdateVideoEvents();\n    return _this;\n  }\n\n  var _proto = Video.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var mute = this.props.mute;\n    var videoRef = this.state.videoRef;\n    var video = videoRef.current;\n\n    if (mute) {\n      this.mute();\n    }\n\n    if (video) {\n      // hide all captioning to start with\n      var textTracks = video.textTracks;\n\n      for (var i = 0; i < textTracks.length; i += 1) {\n        textTracks[i].mode = 'hidden';\n      }\n\n      this.restate();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var autoPlay = this.props.autoPlay;\n\n    if (autoPlay && !prevProps.autoPlay) {\n      // Caller wants the video to play now.\n      this.play();\n    }\n\n    this.restate();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unmounted = true;\n  };\n\n  _proto.renderControls = function renderControls() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        controls = _this$props.controls,\n        theme = _this$props.theme;\n    var _this$state4 = this.state,\n        captions = _this$state4.captions,\n        currentTime = _this$state4.currentTime,\n        duration = _this$state4.duration,\n        interacting = _this$state4.interacting,\n        percentagePlayed = _this$state4.percentagePlayed,\n        playing = _this$state4.playing,\n        scrubberRef = _this$state4.scrubberRef,\n        scrubTime = _this$state4.scrubTime,\n        volume = _this$state4.volume;\n    var over = controls === 'over';\n    var background = over ? theme.video.controls && theme.video.controls.background || {\n      color: 'dark-1',\n      opacity: 'strong'\n    } : undefined;\n    var iconColor = over && (theme.video.icons.color || 'light-1');\n    var formattedTime = formatTime(scrubTime || currentTime || duration);\n    var Icons = {\n      ClosedCaption: theme.video.icons.closedCaption,\n      Configure: theme.video.icons.configure,\n      FullScreen: theme.video.icons.fullScreen,\n      Pause: theme.video.icons.pause,\n      Play: theme.video.icons.play,\n      ReduceVolume: theme.video.icons.reduceVolume,\n      Volume: theme.video.icons.volume\n    };\n    var captionControls = captions.map(function (caption) {\n      return {\n        icon: caption.label ? undefined : React.createElement(Icons.ClosedCaption, {\n          color: iconColor\n        }),\n        label: caption.label,\n        active: caption.active,\n        onClick: function onClick() {\n          return _this2.showCaptions(caption.active ? -1 : 0);\n        }\n      };\n    });\n    return React.createElement(StyledVideoControls, {\n      over: over,\n      active: !this.hasPlayed || controls === 'below' || over && interacting\n    }, React.createElement(Box, {\n      direction: \"row\",\n      align: \"center\",\n      justify: \"between\",\n      background: background\n    }, React.createElement(Button, {\n      icon: playing ? React.createElement(Icons.Pause, {\n        color: iconColor\n      }) : React.createElement(Icons.Play, {\n        color: iconColor\n      }),\n      hoverIndicator: \"background\",\n      onClick: playing ? this.pause : this.play\n    }), React.createElement(Box, {\n      direction: \"row\",\n      align: \"center\",\n      flex: true\n    }, React.createElement(Box, {\n      flex: true\n    }, React.createElement(Stack, null, React.createElement(Meter, {\n      \"aria-label\": \"Video progress\",\n      background: over ? theme.video.scrubber && theme.video.scrubber.track && theme.video.scrubber.track.color || 'dark-3' : undefined,\n      size: \"full\",\n      thickness: \"small\",\n      values: [{\n        value: percentagePlayed || 0\n      }]\n    }), React.createElement(StyledVideoScrubber, {\n      ref: scrubberRef,\n      tabIndex: 0,\n      role: \"button\",\n      value: scrubTime ? Math.round(scrubTime / duration * 100) : undefined,\n      onMouseMove: this.scrub,\n      onMouseLeave: function onMouseLeave() {\n        return _this2.setState({\n          scrubTime: undefined\n        });\n      },\n      onClick: this.seek\n    }))), React.createElement(Box, {\n      pad: {\n        horizontal: 'small'\n      }\n    }, React.createElement(Text, {\n      margin: \"none\"\n    }, formattedTime))), React.createElement(Menu, {\n      icon: React.createElement(Icons.Configure, {\n        color: iconColor\n      }),\n      dropAlign: {\n        bottom: 'top',\n        right: 'right'\n      },\n      dropBackground: background,\n      items: [{\n        icon: React.createElement(Icons.Volume, {\n          color: iconColor\n        }),\n        onClick: volume <= 1 - VOLUME_STEP ? this.louder : undefined,\n        close: false\n      }, {\n        icon: React.createElement(Icons.ReduceVolume, {\n          color: iconColor\n        }),\n        onClick: volume >= VOLUME_STEP ? this.quieter : undefined,\n        close: false\n      }].concat(captionControls, [{\n        icon: React.createElement(Icons.FullScreen, {\n          color: iconColor\n        }),\n        onClick: this.fullscreen\n      }])\n    })));\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        alignSelf = _this$props2.alignSelf,\n        autoPlay = _this$props2.autoPlay,\n        children = _this$props2.children,\n        controls = _this$props2.controls,\n        gridArea = _this$props2.gridArea,\n        loop = _this$props2.loop,\n        margin = _this$props2.margin,\n        theme = _this$props2.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"alignSelf\", \"autoPlay\", \"children\", \"controls\", \"gridArea\", \"loop\", \"margin\", \"theme\"]);\n\n    var _this$state5 = this.state,\n        height = _this$state5.height,\n        videoRef = _this$state5.videoRef,\n        width = _this$state5.width;\n    var controlsElement = controls ? this.renderControls() : undefined;\n    var mouseEventListeners;\n\n    if (controls === 'over') {\n      mouseEventListeners = {\n        onMouseEnter: this.interactionStart,\n        onMouseMove: this.interactionStart,\n        onTouchStart: this.interactionStart\n      };\n    }\n\n    var style;\n\n    if (rest.fit === 'contain' && controls === 'over') {\n      // constrain the size to fit the aspect ratio so the controls\n      // overlap correctly\n      if (width) {\n        style = {\n          width: width\n        };\n      } else if (height) {\n        style = {\n          height: height\n        };\n      }\n    }\n\n    return React.createElement(StyledVideoContainer, _extends({}, mouseEventListeners, {\n      alignSelf: alignSelf,\n      gridArea: gridArea,\n      margin: margin,\n      style: style\n    }), React.createElement(StyledVideo, _extends({}, rest, {\n      ref: videoRef\n    }, this.mediaEventProps, {\n      autoPlay: autoPlay || false,\n      loop: loop || false\n    }), children), controlsElement);\n  };\n\n  return Video;\n}(Component);\n\nVideo.defaultProps = {\n  controls: 'over'\n};\nObject.setPrototypeOf(Video.defaultProps, defaultProps);\nvar VideoDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  VideoDoc = require('./doc').doc(Video);\n}\n\nvar VideoWrapper = compose(withTheme, withForwardRef)(VideoDoc || Video);\nexport { VideoWrapper as Video };","map":null,"metadata":{},"sourceType":"module"}