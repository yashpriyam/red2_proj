{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Fragment } from 'react';\nimport { Cell } from './Cell';\nimport { ExpanderCell } from './ExpanderCell';\nimport { StyledDataTableBody, StyledDataTableRow } from './StyledDataTable';\nexport var GroupedBody = function GroupedBody(_ref) {\n  var background = _ref.background,\n      border = _ref.border,\n      columns = _ref.columns,\n      groupBy = _ref.groupBy,\n      groups = _ref.groups,\n      groupState = _ref.groupState,\n      pad = _ref.pad,\n      primaryProperty = _ref.primaryProperty,\n      onToggle = _ref.onToggle,\n      size = _ref.size,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"background\", \"border\", \"columns\", \"groupBy\", \"groups\", \"groupState\", \"pad\", \"primaryProperty\", \"onToggle\", \"size\"]);\n\n  return React.createElement(StyledDataTableBody, _extends({\n    size: size\n  }, rest), groups.map(function (group) {\n    var expanded = groupState[group.key].expanded;\n    var memberCount = group.data.length;\n    var content = memberCount > 1 ? React.createElement(StyledDataTableRow, {\n      key: group.key,\n      size: size\n    }, React.createElement(ExpanderCell, {\n      context: expanded ? 'groupHeader' : 'body',\n      expanded: expanded,\n      onToggle: onToggle(group.key)\n    }), columns.map(function (column) {\n      return React.createElement(Cell, {\n        key: column.property,\n        background: background,\n        border: border,\n        context: expanded ? 'groupHeader' : 'body',\n        column: column,\n        datum: group.datum,\n        pad: pad,\n        scope: column.property === groupBy ? 'row' : undefined\n      });\n    })) : null;\n\n    if (memberCount === 1 || expanded) {\n      content = React.createElement(Fragment, {\n        key: group.key\n      }, content, group.data.map(function (datum, index) {\n        var context = memberCount > 1 && index === memberCount - 1 ? 'groupEnd' : 'body';\n        return React.createElement(StyledDataTableRow, {\n          key: datum[primaryProperty],\n          size: size\n        }, React.createElement(ExpanderCell, {\n          context: context\n        }), columns.map(function (column) {\n          return React.createElement(Cell, {\n            key: column.property,\n            background: background,\n            border: border,\n            context: context,\n            column: column,\n            datum: datum,\n            pad: pad,\n            scope: column.primary ? 'row' : undefined\n          });\n        }));\n      }));\n    }\n\n    return content;\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}