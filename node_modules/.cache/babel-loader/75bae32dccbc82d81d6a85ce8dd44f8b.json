{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { Box } from '../Box';\nimport { FormContext } from '../Form/FormContext';\nimport { Keyboard } from '../Keyboard';\nimport { RadioButton } from '../RadioButton';\nvar RadioButtonGroup = forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      disabled = _ref.disabled,\n      _ref$gap = _ref.gap,\n      gap = _ref$gap === void 0 ? 'small' : _ref$gap,\n      name = _ref.name,\n      _onChange = _ref.onChange,\n      optionsProp = _ref.options,\n      valueProp = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"children\", \"disabled\", \"gap\", \"name\", \"onChange\", \"options\", \"value\"]);\n\n  var formContext = useContext(FormContext); // normalize options to always use an object\n\n  var options = useMemo(function () {\n    return optionsProp.map(function (o) {\n      return typeof o === 'string' ? {\n        disabled: disabled,\n        id: rest.id ? rest.id + \"-\" + o : o,\n        label: o,\n        value: o\n      } : _extends({\n        disabled: disabled\n      }, o);\n    });\n  }, [disabled, optionsProp, rest.id]);\n\n  var _formContext$useFormC = formContext.useFormContext(name, valueProp, ''),\n      value = _formContext$useFormC[0],\n      setValue = _formContext$useFormC[1];\n\n  var _useState = useState(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var optionRefs = useRef([]);\n  var valueIndex = React.useMemo(function () {\n    var result;\n    options.some(function (option, index) {\n      if (option.value === value) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }, [options, value]);\n  useEffect(function () {\n    if (focus && valueIndex >= 0) optionRefs.current[valueIndex].focus();\n  }, [focus, valueIndex]);\n\n  var onNext = function onNext() {\n    if (valueIndex !== undefined && valueIndex < options.length - 1) {\n      var nextIndex = valueIndex + 1;\n      var nextValue = options[nextIndex].value;\n      setValue(nextValue);\n      if (_onChange) _onChange({\n        target: {\n          value: nextValue\n        }\n      });\n    }\n  };\n\n  var onPrevious = function onPrevious() {\n    if (valueIndex > 0) {\n      var nextIndex = valueIndex - 1;\n      var nextValue = options[nextIndex].value;\n      setValue(nextValue);\n      if (_onChange) _onChange({\n        target: {\n          value: nextValue\n        }\n      });\n    }\n  };\n\n  var onFocus = function onFocus() {\n    // Delay just a wee bit so Chrome doesn't missing turning the button on.\n    // Chrome behaves differently in that focus is given to radio buttons\n    // when the user selects one, unlike Safari and Firefox.\n    setTimeout(function () {\n      return !focus && setFocus(true);\n    }, 1);\n  };\n\n  var onBlur = function onBlur() {\n    return focus && setFocus(false);\n  };\n\n  return React.createElement(Keyboard, {\n    target: \"document\",\n    onUp: focus ? onPrevious : undefined,\n    onDown: focus ? onNext : undefined,\n    onLeft: focus ? onPrevious : undefined,\n    onRight: focus ? onNext : undefined\n  }, React.createElement(Box, _extends({\n    ref: ref,\n    gap: gap\n  }, rest), options.map(function (_ref2, index) {\n    var optionDisabled = _ref2.disabled,\n        id = _ref2.id,\n        label = _ref2.label,\n        optionValue = _ref2.value,\n        optionRest = _objectWithoutPropertiesLoose(_ref2, [\"disabled\", \"id\", \"label\", \"value\"]);\n\n    return React.createElement(RadioButton, _extends({\n      ref: function ref(aRef) {\n        optionRefs.current[index] = aRef;\n      },\n      key: optionValue,\n      name: name,\n      label: !children ? label : undefined,\n      disabled: optionDisabled,\n      checked: optionValue === value,\n      focus: focus && (optionValue === value || value === undefined && !index),\n      id: id,\n      value: optionValue,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: function onChange(event) {\n        setValue(event.target.value);\n        if (_onChange) _onChange(event);\n      }\n    }, optionRest), children ? function (state) {\n      return children(optionsProp[index], state);\n    } : null);\n  })));\n});\nRadioButtonGroup.displayName = 'RadioButtonGroup';\nvar RadioButtonGroupDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  RadioButtonGroupDoc = require('./doc').doc(RadioButtonGroup);\n}\n\nvar RadioButtonGroupWrapper = RadioButtonGroupDoc || RadioButtonGroup;\nexport { RadioButtonGroupWrapper as RadioButtonGroup };","map":null,"metadata":{},"sourceType":"module"}