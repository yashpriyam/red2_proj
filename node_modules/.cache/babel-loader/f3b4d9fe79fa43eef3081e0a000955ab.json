{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { EdgeControl } from './EdgeControl';\nimport { parseMetricToNum } from '../../utils';\nvar Container = styled(Box).withConfig({\n  displayName: \"RangeSelector__Container\",\n  componentId: \"siof5p-0\"\n})([\"user-select:none;\"]);\nvar RangeSelector = forwardRef(function (_ref, ref) {\n  var color = _ref.color,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === void 0 ? 'horizontal' : _ref$direction,\n      invert = _ref.invert,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      _ref$messages = _ref.messages,\n      messages = _ref$messages === void 0 ? {\n    lower: 'Lower Bounds',\n    upper: 'Upper Bounds'\n  } : _ref$messages,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      onChange = _ref.onChange,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 'medium' : _ref$opacity,\n      round = _ref.round,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? 1 : _ref$step,\n      _ref$values = _ref.values,\n      values = _ref$values === void 0 ? [] : _ref$values,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"color\", \"direction\", \"invert\", \"max\", \"messages\", \"min\", \"onChange\", \"opacity\", \"round\", \"size\", \"step\", \"values\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(),\n      changing = _useState[0],\n      setChanging = _useState[1];\n\n  var _useState2 = useState(),\n      lastChange = _useState2[0],\n      setLastChange = _useState2[1];\n\n  var _useState3 = useState(),\n      moveValue = _useState3[0],\n      setMoveValue = _useState3[1];\n\n  var containerRef = useRef();\n  var valueForMouseCoord = useCallback(function (event) {\n    var rect = containerRef.current.getBoundingClientRect();\n    var value;\n\n    if (direction === 'vertical') {\n      // there is no x and y in unit testing\n      var y = event.clientY - (rect.top || 0); // test resilience\n\n      var scaleY = rect.height / (max - min + 1) || 1; // test resilience\n\n      value = Math.floor(y / scaleY) + min;\n    } else {\n      var x = event.clientX - (rect.left || 0); // test resilience\n\n      var scaleX = rect.width / (max - min + 1) || 1; // test resilience\n\n      value = Math.floor(x / scaleX) + min;\n    } // align with closest step within [min, max]\n\n\n    var result = Math.ceil(value / step) * step;\n\n    if (result < min) {\n      return min;\n    }\n\n    if (result > max) {\n      return max;\n    }\n\n    return result;\n  }, [direction, max, min, step]);\n  useEffect(function () {\n    var mouseMove = function mouseMove(event) {\n      var value = valueForMouseCoord(event);\n      var nextValues;\n\n      if (changing === 'lower' && value <= values[1] && value !== moveValue) {\n        nextValues = [value, values[1]];\n      } else if (changing === 'upper' && value >= values[0] && value !== moveValue) {\n        nextValues = [values[0], value];\n      } else if (changing === 'selection' && value !== moveValue) {\n        var delta = value - moveValue;\n\n        if (values[0] + delta >= min && values[1] + delta <= max) {\n          nextValues = [values[0] + delta, values[1] + delta];\n        }\n      }\n\n      if (nextValues) {\n        setMoveValue(value);\n        onChange(nextValues);\n      }\n    };\n\n    var mouseUp = function mouseUp() {\n      return setChanging(undefined);\n    };\n\n    if (changing) {\n      window.addEventListener('mousemove', mouseMove);\n      window.addEventListener('mouseup', mouseUp);\n      return function () {\n        window.removeEventListener('mousemove', mouseMove);\n        window.removeEventListener('mouseup', mouseUp);\n      };\n    }\n\n    return undefined;\n  }, [changing, max, min, moveValue, onChange, valueForMouseCoord, values]);\n  var onClick = useCallback(function (event) {\n    var value = valueForMouseCoord(event);\n\n    if (value <= values[0] || value < values[1] && lastChange === 'lower') {\n      setLastChange('lower');\n      onChange([value, values[1]]);\n    } else if (value >= values[1] || value > values[0] && lastChange === 'upper') {\n      setLastChange('upper');\n      onChange([values[0], value]);\n    }\n  }, [lastChange, onChange, valueForMouseCoord, values]);\n  var lower = values[0],\n      upper = values[1]; // It needs to be true when vertical, due to how browsers manage height\n  // const fill = direction === 'vertical' ? true : 'horizontal';\n\n  var thickness = size === 'full' ? undefined : parseMetricToNum(theme.global.edgeSize[size] || size) + \"px\";\n  var layoutProps = {\n    fill: direction,\n    round: round\n  };\n  if (direction === 'vertical') layoutProps.width = thickness;else layoutProps.height = thickness;\n  if (size === 'full') layoutProps.alignSelf = 'stretch';\n  return React.createElement(Container, _extends({\n    ref: containerRef,\n    direction: direction === 'vertical' ? 'column' : 'row',\n    align: \"center\",\n    fill: true\n  }, rest, {\n    tabIndex: \"-1\",\n    onClick: onChange ? onClick : undefined\n  }), React.createElement(Box, _extends({\n    style: {\n      flex: lower - min + \" 0 0\"\n    },\n    background: invert ? // preserve existing dark, instead of using darknes\n    // of this color\n    {\n      color: color || theme.rangeSelector.background.invert.color,\n      opacity: opacity,\n      dark: theme.dark\n    } : undefined\n  }, layoutProps)), React.createElement(EdgeControl, {\n    a11yTitle: messages.lower,\n    tabIndex: 0,\n    ref: ref,\n    color: color,\n    direction: direction,\n    thickness: thickness,\n    edge: \"lower\",\n    onMouseDown: onChange ? function () {\n      return setChanging('lower');\n    } : undefined,\n    onDecrease: onChange && lower - step >= min ? function () {\n      return onChange([lower - step, upper]);\n    } : undefined,\n    onIncrease: onChange && lower + step <= upper ? function () {\n      return onChange([lower + step, upper]);\n    } : undefined\n  }), React.createElement(Box, _extends({\n    style: {\n      flex: upper - lower + 1 + \" 0 0\",\n      cursor: direction === 'vertical' ? 'ns-resize' : 'ew-resize'\n    },\n    background: invert ? undefined : // preserve existing dark, instead of using darknes of\n    // this color\n    {\n      color: color || 'control',\n      opacity: opacity,\n      dark: theme.dark\n    }\n  }, layoutProps, {\n    onMouseDown: onChange ? function (event) {\n      var nextMoveValue = valueForMouseCoord(event);\n      setChanging('selection');\n      setMoveValue(nextMoveValue);\n    } : undefined\n  })), React.createElement(EdgeControl, {\n    a11yTitle: messages.upper,\n    tabIndex: 0,\n    color: color,\n    direction: direction,\n    thickness: thickness,\n    edge: \"upper\",\n    onMouseDown: onChange ? function () {\n      return setChanging('upper');\n    } : undefined,\n    onDecrease: onChange && upper - step >= lower ? function () {\n      return onChange([lower, upper - step]);\n    } : undefined,\n    onIncrease: onChange && upper + step <= max ? function () {\n      return onChange([lower, upper + step]);\n    } : undefined\n  }), React.createElement(Box, _extends({\n    style: {\n      flex: max - upper + \" 0 0\"\n    },\n    background: invert ? // preserve existing dark, instead of using darknes of this\n    // color\n    {\n      color: color || theme.rangeSelector.background.invert.color,\n      opacity: opacity,\n      dark: theme.dark\n    } : undefined\n  }, layoutProps, {\n    round: round\n  })));\n});\nRangeSelector.displayName = 'RangeSelector';\nvar RangeSelectorDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  RangeSelectorDoc = require('./doc').doc(RangeSelector);\n}\n\nvar RangeSelectorWrapper = RangeSelectorDoc || RangeSelector;\nexport { RangeSelectorWrapper as RangeSelector };","map":null,"metadata":{},"sourceType":"module"}