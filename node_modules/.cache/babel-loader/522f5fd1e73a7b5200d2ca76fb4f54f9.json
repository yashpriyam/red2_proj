{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useEffect, useMemo, useRef } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { FocusedContainer } from '../FocusedContainer';\nimport { backgroundIsDark, findScrollParents, findVisibleParent, parseMetricToNum } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Keyboard } from '../Keyboard';\nimport { PortalContext } from './PortalContext';\nimport { StyledDrop } from './StyledDrop'; // using react synthetic event to be able to stop propagation that\n// would otherwise close the layer on ESC.\n\nvar preventLayerClose = function preventLayerClose(event) {\n  var key = event.keyCode ? event.keyCode : event.which;\n\n  if (key === 27) {\n    event.stopPropagation();\n  }\n};\n\nvar DropContainer = forwardRef(function (_ref, ref) {\n  var _ref$align = _ref.align,\n      align = _ref$align === void 0 ? {\n    top: 'top',\n    left: 'left'\n  } : _ref$align,\n      children = _ref.children,\n      dropTarget = _ref.dropTarget,\n      elevation = _ref.elevation,\n      onClickOutside = _ref.onClickOutside,\n      onEsc = _ref.onEsc,\n      onKeyDown = _ref.onKeyDown,\n      _ref$overflow = _ref.overflow,\n      overflow = _ref$overflow === void 0 ? 'auto' : _ref$overflow,\n      plain = _ref.plain,\n      responsive = _ref.responsive,\n      restrictFocus = _ref.restrictFocus,\n      _ref$stretch = _ref.stretch,\n      stretch = _ref$stretch === void 0 ? 'width' : _ref$stretch,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"align\", \"children\", \"dropTarget\", \"elevation\", \"onClickOutside\", \"onEsc\", \"onKeyDown\", \"overflow\", \"plain\", \"responsive\", \"restrictFocus\", \"stretch\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var portalContext = useContext(PortalContext) || [];\n  var portalId = useMemo(function () {\n    return portalContext.length;\n  }, [portalContext]);\n  var nextPortalContext = useMemo(function () {\n    return [].concat(portalContext, [portalId]);\n  }, [portalContext, portalId]);\n  var dropRef = useRef();\n  useEffect(function () {\n    // We try to preserve the maxHeight as changing it causes any scroll\n    // position to be lost. We set the maxHeight on mount and if the window\n    // is resized.\n    var place = function place(preserveHeight) {\n      var windowWidth = window.innerWidth;\n      var windowHeight = window.innerHeight;\n      var target = dropTarget;\n      var container = (ref || dropRef).current;\n\n      if (container && target) {\n        // clear prior styling\n        container.style.left = '';\n        container.style.top = '';\n        container.style.bottom = '';\n        container.style.width = '';\n\n        if (!preserveHeight) {\n          container.style.maxHeight = '';\n        } // get bounds\n\n\n        var targetRect = findVisibleParent(target).getBoundingClientRect();\n        var containerRect = container.getBoundingClientRect(); // determine width\n\n        var width = Math.min(stretch ? Math.max(targetRect.width, containerRect.width) : containerRect.width, windowWidth); // set left position\n\n        var left;\n\n        if (align.left) {\n          if (align.left === 'left') {\n            left = targetRect.left;\n          } else if (align.left === 'right') {\n            left = targetRect.left + targetRect.width;\n          }\n        } else if (align.right) {\n          if (align.right === 'left') {\n            left = targetRect.left - width;\n          } else if (align.right === 'right') {\n            left = targetRect.left + targetRect.width - width;\n          }\n        } else {\n          left = targetRect.left + targetRect.width / 2 - width / 2;\n        }\n\n        if (left + width > windowWidth) {\n          left -= left + width - windowWidth;\n        } else if (left < 0) {\n          left = 0;\n        } // set top or bottom position\n\n\n        var top;\n        var bottom;\n        var maxHeight = containerRect.height;\n\n        if (align.top) {\n          if (align.top === 'top') {\n            top = targetRect.top;\n          } else {\n            top = targetRect.bottom;\n          } // Calculate visible area underneath the control w.r.t window height\n\n\n          var percentVisibleAreaBelow = 100 - targetRect.bottom / windowHeight * 100; // Check whether it is within 20% from bottom of the window or\n          // visible area to flip the control\n          // DropContainer doesn't fit well within visible area when\n          // percentVisibleAreaBelow value<=20%\n          // There is enough space from DropContainer to bottom of the window\n          // when percentVisibleAreaBelow>20%.\n\n          if (windowHeight === top || percentVisibleAreaBelow <= 20) {\n            // We need more room than we have.\n            // We put it below, but there's more room above, put it above\n            top = '';\n\n            if (align.top === 'bottom') {\n              bottom = targetRect.top;\n            } else {\n              bottom = targetRect.bottom;\n            }\n\n            maxHeight = bottom;\n            container.style.maxHeight = maxHeight + \"px\";\n          } else if (top > 0) {\n            maxHeight = windowHeight - top;\n            container.style.maxHeight = maxHeight + \"px\";\n          } else {\n            maxHeight = windowHeight - top;\n          }\n        } else if (align.bottom) {\n          if (align.bottom === 'bottom') {\n            bottom = targetRect.bottom;\n          } else {\n            bottom = targetRect.top;\n          }\n\n          maxHeight = bottom;\n          container.style.maxHeight = maxHeight + \"px\";\n        } else {\n          // center\n          top = targetRect.top + targetRect.height / 2 - containerRect.height / 2;\n          maxHeight = windowHeight - top;\n        } // if we can't fit it all, or we're rather close,\n        // see if there's more room the other direction\n\n\n        if (responsive && (containerRect.height > maxHeight || maxHeight < windowHeight / 10)) {\n          // We need more room than we have.\n          if (align.top && top > windowHeight / 2) {\n            // We put it below, but there's more room above, put it above\n            top = '';\n\n            if (align.top === 'bottom') {\n              // top = Math.max(targetRect.top - containerRect.height, 0);\n              // maxHeight = targetRect.top - top;\n              bottom = targetRect.top;\n            } else {\n              // top = Math.max(targetRect.bottom - containerRect.height, 0);\n              // maxHeight = targetRect.bottom - top;\n              bottom = targetRect.bottom;\n            }\n\n            maxHeight = bottom;\n          } else if (align.bottom && maxHeight < windowHeight / 2) {\n            // We put it above but there's more room below, put it below\n            bottom = '';\n\n            if (align.bottom === 'bottom') {\n              top = targetRect.top;\n            } else {\n              top = targetRect.bottom;\n            }\n\n            maxHeight = windowHeight - top;\n          }\n        }\n\n        container.style.left = left + \"px\";\n\n        if (stretch) {\n          // offset width by 0.1 to avoid a bug in ie11 that\n          // unnecessarily wraps the text if width is the same\n          // NOTE: turned off for now\n          container.style.width = width + 0.1 + \"px\";\n        } // the (position:absolute + scrollTop)\n        // is presenting issues with desktop scroll flickering\n\n\n        if (top !== '') {\n          container.style.top = top + \"px\";\n        }\n\n        if (bottom !== '') {\n          container.style.bottom = windowHeight - bottom + \"px\";\n        }\n\n        if (!preserveHeight) {\n          if (theme.drop && theme.drop.maxHeight) {\n            maxHeight = Math.min(maxHeight, parseMetricToNum(theme.drop.maxHeight));\n          }\n\n          container.style.maxHeight = maxHeight + \"px\";\n        }\n      }\n    };\n\n    var scrollParents;\n\n    var addScrollListeners = function addScrollListeners() {\n      scrollParents = findScrollParents(dropTarget);\n      scrollParents.forEach(function (scrollParent) {\n        return scrollParent.addEventListener('scroll', place);\n      });\n    };\n\n    var removeScrollListeners = function removeScrollListeners() {\n      scrollParents.forEach(function (scrollParent) {\n        return scrollParent.removeEventListener('scroll', place);\n      });\n      scrollParents = [];\n    };\n\n    var onClickDocument = function onClickDocument(event) {\n      // determine which portal id the target is in, if any\n      var clickedPortalId = null;\n      var node = event.target;\n\n      while (clickedPortalId === null && node !== document) {\n        var attr = node.getAttribute('data-g-portal-id');\n        if (attr !== null) clickedPortalId = parseInt(attr, 10);\n        node = node.parentNode;\n      }\n\n      if (clickedPortalId === null || portalContext.indexOf(clickedPortalId) !== -1) {\n        onClickOutside(event);\n      }\n    };\n\n    var onResize = function onResize() {\n      removeScrollListeners();\n      addScrollListeners();\n      place(false);\n    };\n\n    addScrollListeners();\n    window.addEventListener('resize', onResize);\n\n    if (onClickOutside) {\n      document.addEventListener('mousedown', onClickDocument);\n    }\n\n    place(false);\n    return function () {\n      removeScrollListeners();\n      window.removeEventListener('resize', onResize);\n\n      if (onClickOutside) {\n        document.removeEventListener('mousedown', onClickDocument);\n      }\n    };\n  }, [align, dropTarget, onClickOutside, portalContext, portalId, ref, responsive, restrictFocus, stretch, theme.drop]);\n  useEffect(function () {\n    if (restrictFocus) {\n      (ref || dropRef).current.focus();\n    }\n  }, [ref, restrictFocus]);\n  var content = React.createElement(StyledDrop, _extends({\n    ref: ref || dropRef,\n    as: Box,\n    plain: plain,\n    elevation: !plain ? elevation || theme.global.drop.shadowSize || 'small' : undefined,\n    tabIndex: \"-1\",\n    alignProp: align,\n    overflow: overflow,\n    \"data-g-portal-id\": portalId\n  }, rest), children);\n\n  if (theme.global.drop.background) {\n    var dark = backgroundIsDark(theme.global.drop.background, theme);\n\n    if (dark !== undefined && dark !== theme.dark) {\n      content = React.createElement(ThemeContext.Provider, {\n        value: _extends({}, theme, {\n          dark: dark\n        })\n      }, content);\n    }\n  }\n\n  return React.createElement(PortalContext.Provider, {\n    value: nextPortalContext\n  }, React.createElement(FocusedContainer, {\n    onKeyDown: onEsc && preventLayerClose\n  }, React.createElement(Keyboard, {\n    onEsc: onEsc ? function (event) {\n      event.stopPropagation();\n      onEsc(event);\n    } : undefined,\n    onKeyDown: onKeyDown,\n    target: \"document\"\n  }, content)));\n});\nexport { DropContainer };","map":null,"metadata":{},"sourceType":"module"}