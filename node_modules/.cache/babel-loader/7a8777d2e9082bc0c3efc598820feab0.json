{"ast":null,"code":"import { css } from 'styled-components';\nimport { normalizeColor } from './colors';\nimport { breakpointStyle } from './mixins';\nexport var borderStyle = function borderStyle(data, responsive, theme) {\n  var styles = [];\n  var color = normalizeColor(data.color || 'border', theme);\n  var borderSize = data.size || 'xsmall';\n  var style = data.style || 'solid';\n  var side = typeof data === 'string' ? data : data.side || 'all';\n  var value = style + \" \" + (theme.global.borderSize[borderSize] || borderSize) + \" \" + color;\n  var breakpoint = theme.box.responsiveBreakpoint && theme.global.breakpoints[theme.box.responsiveBreakpoint];\n  var responsiveValue = responsive && breakpoint && (breakpoint.borderSize[borderSize] || borderSize) && style + \" \" + (breakpoint.borderSize[borderSize] || borderSize) + \" \" + color;\n\n  if (side === 'top' || side === 'bottom' || side === 'left' || side === 'right') {\n    styles.push(\"border-\" + side + \": \" + value + \";\");\n\n    if (responsiveValue) {\n      styles.push(breakpointStyle(breakpoint, \"\\n        border-\" + side + \": \" + responsiveValue + \";\\n      \"));\n    }\n  } else if (side === 'end' || side === 'start') {\n    styles.push(css([\"border-inline-\", \":\", \";\"], side, value));\n\n    if (responsiveValue) {\n      styles.push(breakpointStyle(breakpoint, \"\\n        border-inline-\" + side + \": \" + responsiveValue + \";\\n      \"));\n    }\n  } else if (side === 'vertical') {\n    styles.push(css([\"border-left:\", \";border-right:\", \";\"], value, value));\n\n    if (responsiveValue) {\n      styles.push(breakpointStyle(breakpoint, \"\\n        border-left: \" + responsiveValue + \";\\n        border-right: \" + responsiveValue + \";\\n      \"));\n    }\n  } else if (side === 'horizontal') {\n    styles.push(css([\"border-top:\", \";border-bottom:\", \";\"], value, value));\n\n    if (responsiveValue) {\n      styles.push(breakpointStyle(breakpoint, \"\\n        border-top: \" + responsiveValue + \";\\n        border-bottom: \" + responsiveValue + \";\\n      \"));\n    }\n  } else if (side === 'between') {// no-op\n  } else {\n    styles.push(css([\"border:\", \";\"], value));\n\n    if (responsiveValue) {\n      styles.push(breakpointStyle(breakpoint, \"border: \" + responsiveValue + \";\"));\n    }\n  }\n\n  return styles;\n};","map":null,"metadata":{},"sourceType":"module"}