{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { parseMetricToNum } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { StyledAnalog, StyledHour, StyledMinute, StyledSecond } from './StyledClock'; // this will serve both minutes and hours (360 / 6)\n\nvar ANGLE_UNIT = 6; // 360 / 12\n\nvar HOUR_ANGLE_UNIT = 30;\n\nvar getClockDimensions = function getClockDimensions(theme) {\n  return {\n    size: parseMetricToNum(theme.clock.analog.size.medium),\n    secondSize: parseMetricToNum(theme.clock.analog.second.size),\n    minuteSize: parseMetricToNum(theme.clock.analog.minute.size),\n    hourSize: parseMetricToNum(theme.clock.analog.hour.size)\n  };\n};\n\nvar getClockState = function getClockState(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      seconds = _ref.seconds;\n  var hour12 = hours > 12 ? hours - 12 : hours;\n  var minuteAngle = minutes * ANGLE_UNIT;\n  return {\n    // offset hour angle by half of the minute angle so that it gets closer\n    // to the next hour\n    hourAngle: hour12 * HOUR_ANGLE_UNIT + minutes / 2,\n    minuteAngle: minuteAngle,\n    secondAngle: seconds * ANGLE_UNIT\n  };\n};\n\nvar Analog = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Analog, _Component);\n\n  function Analog() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    return _this;\n  }\n\n  Analog.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var elements = nextProps.elements;\n    var nextState = getClockState(elements);\n\n    if (prevState.hourAngle === undefined || Object.keys(nextState).some(function (k) {\n      return prevState[k] !== nextState[k];\n    })) {\n      return nextState;\n    }\n\n    return null;\n  };\n\n  var _proto = Analog.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        precision = _this$props.precision,\n        theme = _this$props.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"precision\", \"theme\"]);\n\n    var _this$state = this.state,\n        hourAngle = _this$state.hourAngle,\n        minuteAngle = _this$state.minuteAngle,\n        secondAngle = _this$state.secondAngle;\n\n    var _getClockDimensions = getClockDimensions(theme),\n        size = _getClockDimensions.size,\n        secondSize = _getClockDimensions.secondSize,\n        minuteSize = _getClockDimensions.minuteSize,\n        hourSize = _getClockDimensions.hourSize;\n\n    var halfSize = size / 2;\n    var secondHand;\n\n    if (precision === 'seconds') {\n      secondHand = React.createElement(StyledSecond, {\n        x1: halfSize,\n        y1: halfSize,\n        x2: halfSize,\n        y2: secondSize,\n        stroke: \"#000000\",\n        strokeLinecap: theme.clock.analog.second.shape,\n        style: {\n          transform: \"rotate(\" + secondAngle + \"deg)\",\n          transformOrigin: halfSize + \"px \" + halfSize + \"px\"\n        }\n      });\n    }\n\n    var minuteHand;\n\n    if (precision === 'seconds' || precision === 'minutes') {\n      minuteHand = React.createElement(StyledMinute, {\n        x1: halfSize,\n        y1: halfSize,\n        x2: halfSize,\n        y2: minuteSize,\n        stroke: \"#000000\",\n        strokeLinecap: theme.clock.analog.minute.shape,\n        style: {\n          transform: \"rotate(\" + minuteAngle + \"deg)\",\n          transformOrigin: halfSize + \"px \" + halfSize + \"px\"\n        }\n      });\n    }\n\n    return React.createElement(StyledAnalog, _extends({\n      version: \"1.1\",\n      width: size,\n      height: size,\n      preserveAspectRatio: \"xMidYMid meet\",\n      viewBox: \"0 0 \" + size + \" \" + size\n    }, rest), secondHand, minuteHand, React.createElement(StyledHour, {\n      x1: halfSize,\n      y1: halfSize,\n      x2: halfSize,\n      y2: hourSize,\n      stroke: \"#000000\",\n      strokeLinecap: theme.clock.analog.hour.shape,\n      style: {\n        transform: \"rotate(\" + hourAngle + \"deg)\",\n        transformOrigin: halfSize + \"px \" + halfSize + \"px\"\n      }\n    }));\n  };\n\n  return Analog;\n}(Component);\n\n_defineProperty(Analog, \"defaultProps\", {\n  size: 'medium'\n});\n\nObject.setPrototypeOf(Analog.defaultProps, defaultProps);\nvar AnalogWrapper = compose(withTheme)(Analog);\nexport { AnalogWrapper as Analog };","map":null,"metadata":{},"sourceType":"module"}