{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(CheckBox) {\n  var DocumentedCheckBox = describe(CheckBox).availableAt(getAvailableAtBadge('CheckBox')).description('A checkbox toggle control.').usage(\"import { CheckBox } from 'grommet';\\n<CheckBox />\").intrinsicElement('input');\n  DocumentedCheckBox.propTypes = {\n    checked: PropTypes.bool.description('Same as React <input checked={} />').defaultValue(false),\n    disabled: PropTypes.bool.description(\"Same as React <input disabled={} />. Also adds a hidden input element\\n      with the same name so form submissions work.\").defaultValue(false),\n    id: PropTypes.string.description('The DOM id attribute value to use for the underlying <input/> element.'),\n    label: PropTypes.node.description('Label text to place next to the control.'),\n    name: PropTypes.string.description(\"The DOM name attribute value to use for the underlying <input/> \\n      element.\"),\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks the check box. It\\n      will be passed a React event object. The current state can be accessed\\n      via event.target.checked. Same as React <input onChange={} />.\"),\n    reverse: PropTypes.bool.description('Whether to show the label in front of the checkbox.').defaultValue(false),\n    toggle: PropTypes.bool.description('Whether to visualize it as a toggle switch.').defaultValue(false),\n    indeterminate: PropTypes.bool.description(\"Whether state is indeterminate.\\nNOTE: This can only be used with non-toggle components\").defaultValue(false)\n  };\n  return DocumentedCheckBox;\n};\nexport var themeDoc = {\n  'checkBox.border.color': {\n    description: 'The border color when unchecked.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: \"{ dark: 'rgba(255, 255, 255, 0.5)', light: 'rgba(0, 0, 0, 0.15)' }\"\n  },\n  'checkBox.border.width': {\n    description: 'The border width when unchecked.',\n    type: 'string',\n    defaultValue: '2px'\n  },\n  'checkBox.check.extend': {\n    description: 'Any additional style for checked CheckBox.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.check.radius': {\n    description: 'The radius of the checked icon.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'checkBox.check.thickness': {\n    description: 'The stroke width of the checked icon.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'checkBox.color': {\n    description: 'The stroke color for the CheckBox icon, and the border when checked.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: undefined\n  },\n  'checkBox.extend': {\n    description: 'Any additional style for CheckBox.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.gap': {\n    description: 'The right margin of the CheckBox to its label.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  'checkBox.hover.border.color': {\n    description: 'The border color on hover.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: \"{ dark: 'white', light: 'black' }\"\n  },\n  'checkBox.icon.size': {\n    description: 'The size of the checked icon.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  'checkBox.icon.extend': {\n    description: 'Any additional style for CheckBox icon.',\n    type: 'string | (props)=>{}',\n    defaultValue: undefined\n  },\n  'checkBox.icons.checked': {\n    description: 'The icon to use when checked.',\n    type: 'React.Element',\n    defaultValue: undefined\n  },\n  'checkBox.icons.indeterminate': {\n    description: 'The icon to use when indeterminate.',\n    type: 'React.Element',\n    defaultValue: undefined\n  },\n  'checkBox.size': {\n    description: 'The height and width used for the CheckBox icon.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'checkBox.toggle.background': {\n    description: 'The background color of the toggle.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: undefined\n  },\n  'checkBox.toggle.color': {\n    description: 'The color of the toggle knob.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: \"{ dark: '#d9d9d9', light: '#d9d9d9' }\"\n  },\n  'checkBox.toggle.extend': {\n    description: 'Any additional style for CheckBox toggle.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.toggle.knob.extend': {\n    description: 'Any additional style for the CheckBox toggle knob.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.toggle.radius': {\n    description: 'The border radius used for the toggle and the knob.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'checkBox.toggle.size': {\n    description: 'The width size of the toggle.',\n    type: 'string',\n    defaultValue: '48px'\n  }\n};","map":null,"metadata":{},"sourceType":"module"}