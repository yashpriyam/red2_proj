{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Tabs) {\n  var DocumentedTabs = describe(Tabs).availableAt(getAvailableAtBadge('Tabs')).description('A container with controls to show one Tab at a time.').usage(\"import { Tabs, Tab } from 'grommet';\\n<Tabs>\\n  <Tab title='Tab 1'>...</Tab>\\n  <Tab title='Tab 2'>...</Tab>\\n</Tabs>\").intrinsicElement('div');\n  DocumentedTabs.propTypes = _extends({}, genericProps, {\n    activeIndex: PropTypes.number.description(\"Active tab index. If specified, Tabs will be a controlled component.\\nThis means that future tab changes will not work unless you subscribe to\\nonActive function and update activeIndex accordingly.\"),\n    children: PropTypes.node.description('Array of Tab.').isRequired,\n    flex: PropTypes.oneOfType([PropTypes.oneOf(['grow', 'shrink']), PropTypes.bool]).description('Whether flex-grow and/or flex-shrink is true.'),\n    justify: PropTypes.oneOf(['start', 'center', 'end']).description('How to align the tabs along the main axis.').defaultValue('center'),\n    messages: PropTypes.shape({\n      tabContents: PropTypes.string\n    }).description('Custom messages for Tabs. Used for accessibility by screen readers.').defaultValue({\n      tabContents: 'Tab Contents'\n    }),\n    onActive: PropTypes.func.description(\"Function that will be called with the active tab index when the\\ncurrently active tab changes.\")\n  });\n  return DocumentedTabs;\n};\nexport var themeDoc = {\n  'global.borderSize': {\n    description: 'The size of the border.',\n    type: 'string',\n    defaultValue: \"{\\n      xsmall: '1px',\\n      small: '2px',\\n      medium: '4px',\\n      large: '12px',\\n      xlarge: '24px,\\n    }\"\n  },\n  'global.colors.border': {\n    description: 'The color of tabs border.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{ dark: rgba(255, 255, 255, 0.33), light: rgba(0, 0, 0, 0.33) }'\n  },\n  'global.edgeSize.small': {\n    description: 'The possible sizes for margin, pad and gap.',\n    type: 'string',\n    defaultValue: '6px'\n  },\n  'tabs.background': {\n    description: 'background styling of Tabs.',\n    type: 'string | object',\n    defaultValue: undefined\n  },\n  'tabs.extend': {\n    description: 'Any additional style for Tabs.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'tabs.gap': {\n    description: 'The gap size between the Tabs.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  'tabs.header.background': {\n    description: 'The background styles of Tabs header.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: undefined\n  },\n  'tabs.header.extend': {\n    description: 'Any additional style for Tabs header.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'tabs.panel.extend': {\n    description: 'Any additional style for Tabs panel.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};","map":null,"metadata":{},"sourceType":"module"}