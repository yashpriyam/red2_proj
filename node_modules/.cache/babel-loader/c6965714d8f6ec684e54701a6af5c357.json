{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Children, useContext, useEffect, useState, useRef } from 'react';\nimport { normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { ThemeContext } from '../../contexts';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Keyboard } from '../Keyboard';\nimport { Stack } from '../Stack';\n\nvar Carousel = function Carousel(_ref) {\n  var initialChild = _ref.initialChild,\n      play = _ref.play,\n      children = _ref.children,\n      controls = _ref.controls,\n      fill = _ref.fill,\n      _onFocus = _ref.onFocus,\n      _onBlur = _ref.onBlur,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"initialChild\", \"play\", \"children\", \"controls\", \"fill\", \"onFocus\", \"onBlur\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var timerRef = useRef();\n\n  var _useState2 = useState({\n    activeIndex: initialChild\n  }),\n      indexes = _useState2[0],\n      setIndexes = _useState2[1];\n\n  var activeIndex = indexes.activeIndex,\n      priorActiveIndex = indexes.priorActiveIndex;\n  var lastIndex = Children.count(children) - 1;\n  useEffect(function () {\n    if (play) {\n      var timer = setInterval(function () {\n        if (activeIndex < lastIndex) {\n          setIndexes({\n            activeIndex: activeIndex + 1,\n            priorActiveIndex: activeIndex\n          });\n        } else {\n          setIndexes({\n            activeIndex: 0,\n            priorActiveIndex: activeIndex\n          });\n        }\n      }, play);\n      timerRef.current = timer;\n      return function () {\n        clearTimeout(timer);\n      };\n    }\n\n    return function () {};\n  }, [activeIndex, play, children, lastIndex]);\n\n  var onRight = function onRight() {\n    if (activeIndex >= lastIndex) {\n      return;\n    }\n\n    clearInterval(timerRef.current);\n    setIndexes({\n      activeIndex: activeIndex + 1,\n      priorActiveIndex: activeIndex\n    });\n  };\n\n  var onLeft = function onLeft() {\n    if (activeIndex <= 0) {\n      return;\n    }\n\n    clearInterval(timerRef.current);\n    setIndexes({\n      activeIndex: activeIndex - 1,\n      priorActiveIndex: activeIndex\n    });\n  };\n\n  var onSelect = function onSelect(index) {\n    return function () {\n      clearInterval(timerRef.current);\n      setIndexes({\n        activeIndex: index,\n        priorActiveIndex: activeIndex\n      });\n    };\n  };\n\n  var showArrows = controls && controls !== 'selectors';\n  var showSelectors = controls && controls !== 'arrows';\n  var CurrentIcon = theme.carousel.icons.current;\n  var iconColor = normalizeColor(theme.carousel.icons.color || 'control', theme);\n  var selectors = [];\n  var wrappedChildren = Children.map(children, function (child, index) {\n    selectors.push(React.createElement(Button // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: index,\n      icon: React.createElement(CurrentIcon, {\n        color: activeIndex === index ? iconColor : undefined\n      }),\n      onClick: onSelect(index)\n    }));\n    var animation;\n\n    if (index === activeIndex) {\n      if (priorActiveIndex !== undefined) {\n        animation = {\n          type: priorActiveIndex < activeIndex ? 'slideLeft' : 'slideRight',\n          size: 'xlarge',\n          duration: theme.carousel.animation.duration\n        };\n      }\n    } else if (index === priorActiveIndex) {\n      animation = {\n        type: 'fadeOut',\n        duration: theme.carousel.animation.duration\n      };\n    } else {\n      animation = {\n        type: 'fadeOut',\n        duration: 0\n      };\n    }\n\n    return React.createElement(Box, {\n      fill: fill,\n      overflow: \"hidden\"\n    }, React.createElement(Box, {\n      fill: fill,\n      animation: animation\n    }, child));\n  });\n  var NextIcon = theme.carousel.icons.next;\n  var PreviousIcon = theme.carousel.icons.previous;\n  var nextIconDisabled = activeIndex >= lastIndex;\n  var previousIconDisabled = activeIndex <= 0;\n  return React.createElement(Keyboard, {\n    onLeft: onLeft,\n    onRight: onRight\n  }, React.createElement(Stack, _extends({\n    guidingChild: activeIndex,\n    fill: fill\n  }, rest), wrappedChildren, React.createElement(Box, {\n    tabIndex: \"0\",\n    focus: focus,\n    onFocus: function onFocus(event) {\n      setFocus(true);\n      if (_onFocus) _onFocus(event);\n    },\n    onBlur: function onBlur(event) {\n      setFocus(false);\n      if (_onBlur) _onBlur(event);\n    },\n    fill: true,\n    direction: \"row\",\n    justify: \"between\"\n  }, showArrows && React.createElement(Button, {\n    fill: \"vertical\",\n    icon: React.createElement(PreviousIcon, {\n      color: normalizeColor(previousIconDisabled ? theme.carousel.disabled.icons.color : theme.carousel.icons.color, theme)\n    }),\n    plain: true,\n    disabled: previousIconDisabled,\n    onClick: onLeft,\n    hoverIndicator: true\n  }), showSelectors && React.createElement(Box, {\n    justify: \"end\",\n    fill: !showArrows && 'horizontal'\n  }, React.createElement(Box, {\n    direction: \"row\",\n    justify: \"center\"\n  }, selectors)), showArrows && React.createElement(Button, {\n    fill: \"vertical\",\n    icon: React.createElement(NextIcon, {\n      color: normalizeColor(nextIconDisabled ? theme.carousel.disabled.icons.color : theme.carousel.icons.color, theme)\n    }),\n    plain: true,\n    disabled: nextIconDisabled,\n    onClick: onRight,\n    hoverIndicator: true\n  }))));\n};\n\nCarousel.defaultProps = {\n  initialChild: 0,\n  controls: true\n};\nObject.setPrototypeOf(Carousel.defaultProps, defaultProps);\nCarousel.displayName = 'Carousel';\nvar CarouselDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  CarouselDoc = require('./doc').doc(Carousel);\n}\n\nvar CarouselWrapper = CarouselDoc || Carousel;\nexport { CarouselWrapper as Carousel };","map":null,"metadata":{},"sourceType":"module"}