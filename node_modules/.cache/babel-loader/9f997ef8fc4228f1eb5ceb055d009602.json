{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(TextInput) {\n  var DocumentedTextInput = describe(TextInput).availableAt(getAvailableAtBadge('TextInput')).description('A control to input a single line of text, with optional suggestions.').usage(\"import { TextInput } from 'grommet';\\n<TextInput id='item' name='item' />\").intrinsicElement('input');\n  DocumentedTextInput.propTypes = {\n    dropAlign: PropTypes.shape({\n      top: PropTypes.oneOf(['top', 'bottom']),\n      bottom: PropTypes.oneOf(['top', 'bottom']),\n      right: PropTypes.oneOf(['left', 'right']),\n      left: PropTypes.oneOf(['left', 'right'])\n    }).description('How to align the drop.').defaultValue({\n      top: 'bottom',\n      left: 'left'\n    }),\n    dropHeight: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The height of the drop container.'),\n    dropTarget: PropTypes.object.description(\"Target where any suggestions drop will be aligned to. This should be\\n      a React reference. Typically, this is not required as the drop will be\\n      aligned to the TextInput itself by default.\"),\n    dropProps: PropTypes.object.description('Any valid Drop prop.'),\n    icon: PropTypes.element.description(\"An optional icon to show. This could be used to provide an\\n      indication of what kind of input is expected, like an email icon,\\n      or what the input will be used for, like a search icon.\"),\n    id: PropTypes.string.description('The id attribute of the input.'),\n    focusIndicator: PropTypes.bool.description('Whether the plain text input should receive a focus outline.'),\n    messages: PropTypes.shape({\n      enterSelect: PropTypes.string,\n      suggestionsCount: PropTypes.string,\n      suggestionsExist: PropTypes.string,\n      suggestionIsOpen: PropTypes.string\n    }).description(\"Custom messages for TextInput. Used for accessibility by screen \\n        readers.\").defaultValue({\n      enterSelect: '(Press Enter to Select)',\n      suggestionsCount: 'suggestions available',\n      suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n      suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n    }),\n    name: PropTypes.string.description(\"The name of the attribute when in a Form or FormField.\"),\n    onChange: PropTypes.func.description('Function that will be called when the user types in the input.'),\n    onSelect: PropTypes.func.description(\"Function that will be called when the user selects a suggestion.\\nThe suggestion contains the object chosen from the supplied suggestions.\"),\n    onSuggestionsOpen: PropTypes.func.description('Function that will be called when the suggestions drop is opened.'),\n    onSuggestionsClose: PropTypes.func.description('Function that will be called when the suggestions drop is closed.'),\n    placeholder: PropTypes.node.description('Placeholder to use when no value is provided.'),\n    plain: PropTypes.bool.description(\"Whether this is a plain input with no border or padding.\\nOnly use this when the containing context provides sufficient affordance\"),\n    reverse: PropTypes.bool.description(\"Whether an icon should be reversed so that the icon is at the\\n      end of the input.\"),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the TextInput.'),\n    suggestions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n      label: PropTypes.node,\n      value: PropTypes.any\n    }), PropTypes.string])).description(\"Suggestions to show. It is recommended to avoid showing too many\\nsuggestions and instead rely on the user to type more.\"),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).description('What text to put in the input.')\n  };\n  return DocumentedTextInput;\n};\nexport var themeDoc = _extends({\n  'global.colors.border': {\n    description: 'The color of the border.',\n    type: 'object',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)'\n    }\n  },\n  'global.control.border.color': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: 'border'\n  },\n  'global.control.border.radius': {\n    description: 'The border radius.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'global.control.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '1px'\n  },\n  'select.step': {\n    description: 'How many suggestions to render at a time.',\n    type: 'number',\n    defaultValue: 20\n  },\n  text: {\n    description: \"The possible sizes of the text in terms of its font-size and \\n    line-height.\",\n    type: 'object',\n    defaultValue: \"{\\n      xsmall: {\\n        size: '12px',\\n        height: '18px',\\n       },\\n      small: {\\n        size: '14px',\\n        height: '20px',\\n       },\\n      medium: {\\n        size: '18px',\\n        height: '24px',\\n      },\\n      large: {\\n        size: '22px',\\n        height: '28px',\\n      },\\n      xlarge: {\\n        size: '26px',\\n        height: '32px',\\n      },\\n      xxlarge: {\\n        size: '34px',\\n        height: '40px',\\n      },\\n    }\"\n  },\n  'textInput.extend': {\n    description: 'Any additional style for TextInput.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.container.extend': {\n    description: 'Any additional style for TextInput container.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.placeholder.extend': {\n    description: 'Any additional style for non-string placeholder inside TextInput.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.suggestions.extend': {\n    description: 'Any additional style for TextInput suggestions.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.disabled.opacity': {\n    description: 'The opacity when the textInput is disabled.',\n    type: 'number',\n    defaultValue: 0.3\n  }\n}, themeDocUtils.focusStyle, {}, themeDocUtils.placeholderStyle, {}, themeDocUtils.disabledStyle, {}, themeDocUtils.inputStyle);","map":null,"metadata":{},"sourceType":"module"}