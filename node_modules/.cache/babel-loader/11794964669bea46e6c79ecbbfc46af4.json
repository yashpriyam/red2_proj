{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useMemo, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { normalizeColor } from '../../utils';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Collapsible } from '../Collapsible';\nimport { Heading } from '../Heading';\nvar AccordionPanel = forwardRef(function (_ref, ref) {\n  var active = _ref.active,\n      animate = _ref.animate,\n      children = _ref.children,\n      header = _ref.header,\n      label = _ref.label,\n      onClick = _ref.onClick,\n      _onMouseOut = _ref.onMouseOut,\n      _onMouseOver = _ref.onMouseOver,\n      onPanelChange = _ref.onPanelChange,\n      _onFocus = _ref.onFocus,\n      _onBlur = _ref.onBlur,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"active\", \"animate\", \"children\", \"header\", \"label\", \"onClick\", \"onMouseOut\", \"onMouseOver\", \"onPanelChange\", \"onFocus\", \"onBlur\"]);\n\n  var theme = useContext(ThemeContext);\n\n  var _useState = useState(undefined),\n      hover = _useState[0],\n      setHover = _useState[1];\n\n  var iconColor = useMemo(function () {\n    return normalizeColor(theme.accordion.icons.color || 'control', theme);\n  }, [theme]);\n  var AccordionIcon = useMemo(function () {\n    return active ? theme.accordion.icons.collapse : theme.accordion.icons.expand;\n  }, [active, theme.accordion.icons]);\n  return React.createElement(Box, {\n    ref: ref,\n    flex: false,\n    onClick: onClick\n  }, React.createElement(Button, {\n    role: \"tab\",\n    \"aria-selected\": active,\n    \"aria-expanded\": active,\n    onClick: onPanelChange,\n    onMouseOver: function onMouseOver(event) {\n      setHover(theme.dark ? 'light-4' : 'dark-3');\n      if (_onMouseOver) _onMouseOver(event);\n    },\n    onMouseOut: function onMouseOut(event) {\n      setHover(undefined);\n      if (_onMouseOut) _onMouseOut(event);\n    },\n    onFocus: function onFocus(event) {\n      setHover(theme.dark ? 'light-4' : 'dark-3');\n      if (_onFocus) _onFocus(event);\n    },\n    onBlur: function onBlur(event) {\n      setHover(undefined);\n      if (_onBlur) _onBlur(event);\n    }\n  }, header || React.createElement(Box, _extends({\n    align: \"center\",\n    direction: \"row\",\n    justify: \"between\"\n  }, rest), typeof label === 'string' ? React.createElement(Box, {\n    pad: {\n      horizontal: 'xsmall'\n    }\n  }, React.createElement(Heading, {\n    level: theme.accordion.heading && theme.accordion.heading.level || 4,\n    color: hover\n  }, label)) : label, AccordionIcon && React.createElement(Box, {\n    pad: {\n      horizontal: 'small'\n    }\n  }, React.createElement(AccordionIcon, {\n    color: iconColor\n  })))), React.createElement(Box, {\n    border: theme.accordion.border\n  }, animate ? React.createElement(Collapsible, {\n    open: active\n  }, children) : active && children));\n});\nAccordionPanel.displayName = 'AccordionPanel';\nvar AccordionPanelDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  AccordionPanelDoc = require('./doc').doc(AccordionPanel);\n}\n\nvar AccordionPanelWrapper = AccordionPanelDoc || AccordionPanel;\nexport { AccordionPanelWrapper as AccordionPanel };","map":null,"metadata":{},"sourceType":"module"}