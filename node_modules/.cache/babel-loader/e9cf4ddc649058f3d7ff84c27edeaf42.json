{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport { FormContext } from './FormContext';\nvar defaultMessages = {\n  invalid: 'invalid',\n  required: 'required'\n};\nvar defaultValue = {};\nvar defaultErrors = {};\nvar defaultInfos = {};\n\nvar updateErrors = function updateErrors(nextErrors, name, error) {\n  // we disable no-param-reassing so we can use this as a utility function\n  // to update nextErrors, to avoid code duplication\n\n  /* eslint-disable no-param-reassign */\n  var hasStatusError = typeof error === 'object' && error.status === 'error'; // typeof error === 'object' is implied for both cases of error with\n  // a status message and for an error object that is a react node\n\n  if (typeof error === 'object' && !error.status || hasStatusError || typeof error === 'string') {\n    nextErrors[name] = hasStatusError ? error.message : error;\n  } else {\n    delete nextErrors[name];\n  }\n  /* eslint-enable no-param-reassign */\n\n};\n\nvar updateInfos = function updateInfos(nextInfos, name, error) {\n  /* eslint-disable no-param-reassign */\n  if (typeof error === 'object' && error.status === 'info') {\n    nextInfos[name] = error.message;\n  } else {\n    delete nextInfos[name];\n  }\n  /* eslint-enable no-param-reassign */\n\n};\n\nvar Form = forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      _ref$errors = _ref.errors,\n      errorsProp = _ref$errors === void 0 ? defaultErrors : _ref$errors,\n      _ref$infos = _ref.infos,\n      infosProp = _ref$infos === void 0 ? defaultInfos : _ref$infos,\n      _ref$messages = _ref.messages,\n      messagesProp = _ref$messages === void 0 ? defaultMessages : _ref$messages,\n      onChange = _ref.onChange,\n      _onReset = _ref.onReset,\n      _onSubmit = _ref.onSubmit,\n      _ref$validate = _ref.validate,\n      validate = _ref$validate === void 0 ? 'submit' : _ref$validate,\n      valueProp = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"children\", \"errors\", \"infos\", \"messages\", \"onChange\", \"onReset\", \"onSubmit\", \"validate\", \"value\"]);\n\n  var _useState = useState(valueProp || defaultValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  useEffect(function () {\n    if (valueProp !== undefined && valueProp !== value) {\n      setValue(valueProp);\n    }\n  }, [value, valueProp]);\n\n  var _useState2 = useState(messagesProp),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  useEffect(function () {\n    return setMessages(messagesProp);\n  }, [messagesProp]);\n\n  var _useState3 = useState(errorsProp || {}),\n      errors = _useState3[0],\n      setErrors = _useState3[1];\n\n  useEffect(function () {\n    return setErrors(errorsProp || {});\n  }, [errorsProp]);\n\n  var _useState4 = useState(infosProp || {}),\n      infos = _useState4[0],\n      setInfos = _useState4[1];\n\n  useEffect(function () {\n    return setInfos(infosProp || {});\n  }, [infosProp]);\n\n  var _useState5 = useState({}),\n      touched = _useState5[0],\n      setTouched = _useState5[1];\n\n  var validations = useRef({});\n  useEffect(function () {}, [value, errors, infos]);\n  var update = useCallback(function (name, data, initial) {\n    setValue(function (prevValue) {\n      var nextValue = _extends({}, prevValue);\n\n      nextValue[name] = data; // re-run any validations, in case the validation\n      // is checking across fields\n\n      setErrors(function (prevErrors) {\n        var nextErrors = _extends({}, prevErrors);\n\n        Object.keys(prevErrors).forEach(function (errName) {\n          if (validations.current[errName]) {\n            var nextError = validations.current[errName](data, nextValue);\n            updateErrors(nextErrors, errName, nextError);\n          }\n        });\n        return nextErrors;\n      });\n      setInfos(function (prevInfos) {\n        var nextInfos = _extends({}, prevInfos); // re-run any validations that have infos, in case the validation\n        // is checking across fields\n\n\n        Object.keys(nextInfos).forEach(function (infoName) {\n          if (validations.current[infoName]) {\n            var nextInfo = validations.current[infoName](data, nextValue);\n            updateInfos(nextInfos, infoName, nextInfo);\n          }\n        });\n        return nextInfos;\n      });\n      if (onChange) onChange(nextValue);\n      return nextValue;\n    });\n    if (!initial) setTouched(function (prevTouched) {\n      var nextTouched = _extends({}, prevTouched);\n\n      nextTouched[name] = true;\n      return nextTouched;\n    });\n  }, [onChange]);\n\n  var useFormContext = function useFormContext(name, componentValue, defaultComponentValue) {\n    var valueData = name && value[name] || defaultComponentValue;\n\n    var _useState6 = useState(componentValue !== undefined ? componentValue : valueData),\n        data = _useState6[0],\n        setData = _useState6[1];\n\n    if (componentValue !== undefined) {\n      if (componentValue !== data) {\n        setData(componentValue);\n        if (name) update(name, componentValue);\n      } else if (name && value[name] === undefined) {\n        update(name, componentValue, true);\n      }\n    } else if (valueData !== data) {\n      setData(valueData);\n    }\n\n    return [data, function (nextData) {\n      // only set if the caller hasn't supplied a specific value\n      if (componentValue === undefined) {\n        if (name) update(name, nextData);\n        setData(nextData);\n      }\n    }];\n  };\n\n  return React.createElement(\"form\", _extends({\n    ref: ref\n  }, rest, {\n    onReset: function onReset(event) {\n      setValue(defaultValue);\n      setErrors({});\n      setTouched({});\n\n      if (_onReset) {\n        event.persist(); // extract from React's synthetic event pool\n\n        var adjustedEvent = event;\n        adjustedEvent.value = defaultValue;\n\n        _onReset(adjustedEvent);\n      }\n    },\n    onSubmit: function onSubmit(event) {\n      // Don't submit the form via browser form action. We don't want it\n      // if the validation fails. And, we assume a javascript action handler\n      // otherwise.\n      event.preventDefault();\n\n      var nextErrors = _extends({}, errors);\n\n      var nextInfos = _extends({}, infos);\n\n      Object.keys(validations.current).forEach(function (name) {\n        var nextError = validations.current[name](value[name], value);\n        updateErrors(nextErrors, name, nextError);\n        updateInfos(nextInfos, name, nextError);\n      });\n      setErrors(nextErrors);\n      setInfos(nextInfos);\n\n      if (Object.keys(nextErrors).length === 0 && _onSubmit) {\n        event.persist(); // extract from React's synthetic event pool\n\n        var adjustedEvent = event;\n        adjustedEvent.value = value;\n        adjustedEvent.touched = touched;\n\n        _onSubmit(adjustedEvent);\n      }\n    }\n  }), React.createElement(FormContext.Provider, {\n    value: {\n      addValidation: function addValidation(name, validation) {\n        validations.current[name] = validation;\n      },\n      removeValidation: function removeValidation(name) {\n        delete validations.current[name];\n      },\n      onBlur: validate === 'blur' ? function (name) {\n        if (validations.current[name]) {\n          var error = validations.current[name](value[name], value);\n          setErrors(function (prevErrors) {\n            var nextErrors = _extends({}, prevErrors);\n\n            updateErrors(nextErrors, name, error);\n            return nextErrors;\n          });\n          setInfos(function (prevInfos) {\n            var nextInfos = _extends({}, prevInfos);\n\n            updateInfos(nextInfos, name, error);\n            return nextInfos;\n          });\n        }\n      } : undefined,\n      errors: errors,\n      get: function get(name) {\n        return value[name];\n      },\n      infos: infos,\n      messages: messages,\n      set: function set(name, nextValue) {\n        return update(name, nextValue);\n      },\n      touched: touched,\n      update: update,\n      useFormContext: useFormContext,\n      value: value\n    }\n  }, children));\n});\nForm.displayName = 'Form';\nvar FormDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  FormDoc = require('./doc').doc(Form); // eslint-disable-line global-require\n}\n\nvar FormWrapper = FormDoc || Form;\nexport { FormWrapper as Form };","map":null,"metadata":{},"sourceType":"module"}